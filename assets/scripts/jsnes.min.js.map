{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 428819cad9d0c9224ddd","webpack:///jsnes.min.js","webpack:///./src/utils.js","webpack:///./src/controller.js","webpack:///./src/tile.js","webpack:///./src/index.js","webpack:///./src/nes.js","webpack:///./src/cpu.js","webpack:///./src/ppu.js","webpack:///./src/papu.js","webpack:///./src/rom.js","webpack:///./src/mappers.js"],"names":["root","factory","exports","module","define","amd","self","this","__webpack_require__","moduleId","installedModules","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","copyArrayElements","src","srcPos","dest","destPos","length","copyArray","slice","fromJSON","obj","state","JSON_PROPERTIES","toJSON","Controller","Array","BUTTON_A","BUTTON_B","BUTTON_SELECT","BUTTON_START","BUTTON_UP","BUTTON_DOWN","BUTTON_LEFT","BUTTON_RIGHT","buttonDown","key","buttonUp","Tile","pix","fbIndex","tIndex","x","y","w","h","incX","incY","palIndex","tpri","initialized","opaque","setBuffer","scanline","setScanline","sline","b1","b2","render","buffer","srcx1","srcy1","srcx2","srcy2","dx","dy","palAdd","palette","flipHorizontal","flipVertical","pri","priTable","isTransparent","NES","CPU","PPU","PAPU","ROM","opts","onFrame","onAudioSample","onStatusUpdate","onBatteryRamWrite","preferredFrameRate","emulateSound","sampleRate","frameTime","ui","writeFrame","updateStatus","cpu","ppu","papu","mmap","controllers","1","2","frame","bind","zapperMove","zapperFireDown","zapperFireUp","fpsFrameCount","romData","reset","lastFpsTime","startFrame","cycles","FRAMELOOP","cyclesToHalt","emulate","clockFrameCounter","curX","spr0HitX","f_spVisibility","spr0HitY","setStatusFlag","STATUS_SPRITE0HIT","requestEndFrame","nmiCounter","startVBlank","endScanline","controller","button","zapperX","zapperY","zapperFired","getFPS","now","Date","fps","reloadROM","loadROM","data","rom","load","createMapper","setMirroring","getMirroringType","setFramerate","rate","setSampleRate","getState","loadState","utils","nes","mem","REG_ACC","REG_X","REG_Y","REG_SP","REG_PC","REG_PC_NEW","REG_STATUS","F_CARRY","F_DECIMAL","F_INTERRUPT","F_INTERRUPT_NEW","F_OVERFLOW","F_SIGN","F_ZERO","F_NOTUSED","F_NOTUSED_NEW","F_BRK","F_BRK_NEW","opdata","crash","irqRequested","irqType","IRQ_NORMAL","IRQ_NMI","IRQ_RESET","j","k","setStatus","OpData","temp","add","doIrq","doNonMaskableInterrupt","doResetInterrupt","opinf","cycleCount","cycleAdd","addrMode","opaddr","addr","load16bit","write","push","pull","stackWrap","console","error","toString","val","requestIrq","type","value","pageCrossed","addr1","addr2","haltCycles","status","getStatus","st","setOp","INS_ADC","ADDR_IMM","ADDR_ZP","ADDR_ZPX","ADDR_ABS","ADDR_ABSX","ADDR_ABSY","ADDR_PREIDXIND","ADDR_POSTIDXIND","INS_AND","INS_ASL","ADDR_ACC","INS_BCC","ADDR_REL","INS_BCS","INS_BEQ","INS_BIT","INS_BMI","INS_BNE","INS_BPL","INS_BRK","ADDR_IMP","INS_BVC","INS_BVS","INS_CLC","INS_CLD","INS_CLI","INS_CLV","INS_CMP","INS_CPX","INS_CPY","INS_DEC","INS_DEX","INS_DEY","INS_EOR","INS_INC","INS_INX","INS_INY","INS_JMP","ADDR_INDABS","INS_JSR","INS_LDA","INS_LDX","ADDR_ZPY","INS_LDY","INS_LSR","INS_NOP","INS_ORA","INS_PHA","INS_PHP","INS_PLA","INS_PLP","INS_ROL","INS_ROR","INS_RTI","INS_RTS","INS_SBC","INS_SEC","INS_SED","INS_SEI","INS_STA","INS_STX","INS_STY","INS_TAX","INS_TAY","INS_TSX","INS_TXA","INS_TXS","INS_TYA","INS_ALR","INS_ANC","INS_ARR","INS_AXS","INS_LAX","INS_SAX","INS_DCP","INS_ISC","INS_RLA","INS_RRA","INS_SLO","INS_SRE","INS_SKB","INS_IGN","cycTable","instname","addrDesc","INS_DUMMY","inst","op","size","vramMem","spriteMem","vramAddress","vramTmpAddress","vramBufferedReadValue","firstWrite","sramAddress","currentMirroring","nmiOk","dummyCycleToggle","validTileData","scanlineAlreadyRendered","f_nmiOnVblank","f_spriteSize","f_bgPatternTable","f_spPatternTable","f_addrInc","f_nTblAddress","f_color","f_bgVisibility","f_spClipping","f_bgClipping","f_dispType","cntFV","cntV","cntH","cntVT","cntHT","regFV","regV","regH","regVT","regHT","regFH","regS","curNt","attrib","bgbuffer","pixrendered","scantile","lastRenderedScanline","sprX","sprY","sprTile","sprCol","vertFlip","horiFlip","bgPriority","hitSpr0","sprPalette","imgPalette","ptTile","ntable1","nameTable","vramMirrorTable","palTable","showSpr0Hit","clipToTvSize","STATUS_VRAMWRITE","STATUS_SLSPRITECOUNT","STATUS_VBLANK","NameTable","PaletteTable","loadNTSCPalette","updateControlReg1","updateControlReg2","mirroring","triggerRendering","defineMirrorRegion","HORIZONTAL_MIRRORING","VERTICAL_MIRRORING","SINGLESCREEN_MIRRORING","SINGLESCREEN_MIRRORING2","fromStart","toStart","renderFramePartially","endFrame","renderBgScanline","checkSprite0","clockIrqCounter","regsToAddress","cntsToAddress","bgColor","setEmphasis","updatePalettes","flag","readStatusRegister","tmp","writeSRAMAddress","address","sramLoad","sramWrite","spriteRamWriteUpdate","scrollWrite","writeVRAMAddress","latchAccess","vramLoad","mirroredLoad","cntsFromAddress","regsFromAddress","vramWrite","mirroredWrite","writeMem","sramDMA","baseAddress","incTileCounter","count","Error","startScan","scanCount","renderSpritesPartially","si","ei","destIndex","scan","baseTile","t","tpix","att","col","tscanoffset","targetBuffer","tile","getTileIndex","getAttrib","sx","startscan","scancount","bgPri","top","toffset","bufferIndex","tIndexAdd","patternWrite","nameTableWrite","attribTableWrite","getEntry","tileIndex","Math","floor","leftOver","index","writeAttrib","doNMI","isPixelWhite","width","height","tx","ty","attindex","basex","basey","sqy","sqx","curTable","emphTable","currentEmph","makeTables","loadPALPalette","r","g","b","rFactor","gFactor","bFactor","emph","getRed","getGreen","getBlue","getRgb","yiq","rgb","loadDefaultPalette","square1","ChannelSquare","square2","triangle","ChannelTriangle","noise","ChannelNoise","dmc","ChannelDM","frameIrqCounter","frameIrqCounterMax","initCounter","channelEnableValue","lengthLookup","dmcFreqLookup","noiseWavelengthLookup","square_table","tnd_table","frameIrqEnabled","frameIrqActive","frameClockNow","startedPlaying","recordOutput","initingHardware","masterFrameCounter","derivedFrameCounter","countSequence","sampleTimer","sampleTimerMax","sampleCount","triValue","smpSquare1","smpSquare2","smpTriangle","smpDmc","accCount","prevSampleL","prevSampleR","smpAccumL","smpAccumR","dacRange","dcValue","masterVolume","stereoPosLSquare1","stereoPosLSquare2","stereoPosLTriangle","stereoPosLNoise","stereoPosLDMC","stereoPosRSquare1","stereoPosRSquare2","stereoPosRTriangle","stereoPosRNoise","stereoPosRDMC","extraCycles","maxSample","minSample","panning","setPanning","initLengthLookup","initDmcFrequencyLookup","initNoiseWavelengthLookup","initDACtables","writeReg","updateChannelEnable","resetCounter","readReg","getLengthStatus","getIrqStatus","irqGenerated","frameCounterTick","setEnabled","nCycles","maxCycles","isEnabled","shiftCounter","dmaFrequency","clockDmc","progTimerMax","progTimerCount","linearCounter","lengthCounter","triangleCounter","sampleValue","squareCounter","updateSampleValue","acc_c","accValue","shiftReg","randomMode","randomBit","accSample","sample","sampleCondition","clockLengthCounter","clockSweep","clockEnvDecay","clockLinearCounter","sq_index","tnd_index","smpNoise","sampleValueL","sampleValueR","smpDiffL","smpDiffR","getLengthMax","getDmcFrequency","getNoiseWaveLength","pos","updateStereoPos","setMasterVolume","ival","max_sqr","max_tnd","MODE_NORMAL","MODE_LOOP","MODE_IRQ","hasSample","playMode","dmaCounter","deltaCounter","playStartAddress","playAddress","playLength","playLengthCounter","reg4012","reg4013","dacLsb","endOfSample","nextSample","envDecayDisable","envDecayLoopEnable","lengthCounterEnable","envReset","shiftNow","envDecayRate","envDecayCounter","envVolume","dutyLookup","impLookup","sqr1","sweepActive","sweepCarry","updateSweepPeriod","sweepCounter","sweepCounterMax","sweepMode","sweepShiftAmount","dutyMode","sweepResult","vol","addrAdd","lcHalt","lcControl","lcLoadValue","updateSampleCondition","clockProgrammableTimer","clockTriangleGenerator","Mappers","mapperName","FOURSCREEN_MIRRORING","SINGLESCREEN_MIRRORING3","SINGLESCREEN_MIRRORING4","CHRROM_MIRRORING","header","vrom","vromTile","romCount","vromCount","batteryRam","trainer","fourScreen","mapperType","valid","v","indexOf","charCodeAt","foundError","offset","getMapperName","mapperSupported","joy1StrobeState","joy2StrobeState","joypadLastWrite","regWrite","writelow","regLoad","joy1Read","joy2Read","ret","loadPRGROM","loadCHRROM","loadBatteryRam","loadRomBank","loadVromBank","ram","bank","load32kRomBank","load8kVromBank","bank4kStart","load1kVromBank","bank1k","bank4k","bankoffset","baseIndex","load2kVromBank","bank2k","load8kRomBank","bank8k","bank16k","apply","regBuffer","regBufferCounter","oneScreenMirroring","prgSwitchingArea","prgSwitchingSize","vromSwitchingSize","romSelectionReg0","romSelectionReg1","romBankSelect","arguments","getRegNumber","setReg","reg","baseBank","switchLowHighPrgRom","oldSetting","switch16to32","switch32to16","CMD_SEL_2_1K_VROM_0000","CMD_SEL_2_1K_VROM_0800","CMD_SEL_1K_VROM_1000","CMD_SEL_1K_VROM_1400","CMD_SEL_1K_VROM_1800","CMD_SEL_1K_VROM_1C00","CMD_SEL_ROM_PAGE1","CMD_SEL_ROM_PAGE2","command","prgAddressSelect","chrAddressSelect","pageNumber","irqCounter","irqLatchValue","irqEnable","prgAddressChanged","executeCommand","cmd","arg","prg_size","chr_size","sram_we_a","sram_we_b","graphic_mode","nametable_mode","nametable_type","fill_chr","fill_pal","SetBank_SRAM","SetBank_CPU","chr_mode","chr_page","SetBank_PPU","split_control","split_scroll","split_page","irq_line","ClearIRQ","irq_enable","mult_a","mult_b","exWrite","irq_status","prgbank1","prgbank2"],"mappings":"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","file":"jsnes.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"jsnes\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"jsnes\"] = factory();\n\telse\n\t\troot[\"jsnes\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 428819cad9d0c9224ddd","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"jsnes\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"jsnes\"] = factory();\n\telse\n\t\troot[\"jsnes\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 3);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\nmodule.exports = {\r\n  copyArrayElements: function (src, srcPos, dest, destPos, length) {\r\n    for (var i = 0; i < length; ++i) {\r\n      dest[destPos + i] = src[srcPos + i];\r\n    }\r\n  },\r\n\r\n  copyArray: function (src) {\r\n    return src.slice(0);\r\n  },\r\n\r\n  fromJSON: function (obj, state) {\r\n    for (var i = 0; i < obj.JSON_PROPERTIES.length; i++) {\r\n      obj[obj.JSON_PROPERTIES[i]] = state[obj.JSON_PROPERTIES[i]];\r\n    }\r\n  },\r\n\r\n  toJSON: function (obj) {\r\n    var state = {};\r\n    for (var i = 0; i < obj.JSON_PROPERTIES.length; i++) {\r\n      state[obj.JSON_PROPERTIES[i]] = obj[obj.JSON_PROPERTIES[i]];\r\n    }\r\n    return state;\r\n  },\r\n};\r\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\nvar Controller = function () {\r\n  this.state = new Array(8);\r\n  for (var i = 0; i < this.state.length; i++) {\r\n    this.state[i] = 0x40;\r\n  }\r\n};\r\n\r\nController.BUTTON_A = 0;\r\nController.BUTTON_B = 1;\r\nController.BUTTON_SELECT = 2;\r\nController.BUTTON_START = 3;\r\nController.BUTTON_UP = 4;\r\nController.BUTTON_DOWN = 5;\r\nController.BUTTON_LEFT = 6;\r\nController.BUTTON_RIGHT = 7;\r\n\r\nController.prototype = {\r\n  buttonDown: function (key) {\r\n    this.state[key] = 0x41;\r\n  },\r\n\r\n  buttonUp: function (key) {\r\n    this.state[key] = 0x40;\r\n  },\r\n};\r\n\r\nmodule.exports = Controller;\r\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\nvar Tile = function () {\r\n  // Tile data:\r\n  this.pix = new Array(64);\r\n\r\n  this.fbIndex = null;\r\n  this.tIndex = null;\r\n  this.x = null;\r\n  this.y = null;\r\n  this.w = null;\r\n  this.h = null;\r\n  this.incX = null;\r\n  this.incY = null;\r\n  this.palIndex = null;\r\n  this.tpri = null;\r\n  this.c = null;\r\n  this.initialized = false;\r\n  this.opaque = new Array(8);\r\n};\r\n\r\nTile.prototype = {\r\n  setBuffer: function (scanline) {\r\n    for (this.y = 0; this.y < 8; this.y++) {\r\n      this.setScanline(this.y, scanline[this.y], scanline[this.y + 8]);\r\n    }\r\n  },\r\n\r\n  setScanline: function (sline, b1, b2) {\r\n    this.initialized = true;\r\n    this.tIndex = sline << 3;\r\n    for (this.x = 0; this.x < 8; this.x++) {\r\n      this.pix[this.tIndex + this.x] =\r\n        ((b1 >> (7 - this.x)) & 1) + (((b2 >> (7 - this.x)) & 1) << 1);\r\n      if (this.pix[this.tIndex + this.x] === 0) {\r\n        this.opaque[sline] = false;\r\n      }\r\n    }\r\n  },\r\n\r\n  render: function (\r\n    buffer,\r\n    srcx1,\r\n    srcy1,\r\n    srcx2,\r\n    srcy2,\r\n    dx,\r\n    dy,\r\n    palAdd,\r\n    palette,\r\n    flipHorizontal,\r\n    flipVertical,\r\n    pri,\r\n    priTable\r\n  ) {\r\n    if (dx < -7 || dx >= 256 || dy < -7 || dy >= 240) {\r\n      return;\r\n    }\r\n\r\n    this.w = srcx2 - srcx1;\r\n    this.h = srcy2 - srcy1;\r\n\r\n    if (dx < 0) {\r\n      srcx1 -= dx;\r\n    }\r\n    if (dx + srcx2 >= 256) {\r\n      srcx2 = 256 - dx;\r\n    }\r\n\r\n    if (dy < 0) {\r\n      srcy1 -= dy;\r\n    }\r\n    if (dy + srcy2 >= 240) {\r\n      srcy2 = 240 - dy;\r\n    }\r\n\r\n    if (!flipHorizontal && !flipVertical) {\r\n      this.fbIndex = (dy << 8) + dx;\r\n      this.tIndex = 0;\r\n      for (this.y = 0; this.y < 8; this.y++) {\r\n        for (this.x = 0; this.x < 8; this.x++) {\r\n          if (\r\n            this.x >= srcx1 &&\r\n            this.x < srcx2 &&\r\n            this.y >= srcy1 &&\r\n            this.y < srcy2\r\n          ) {\r\n            this.palIndex = this.pix[this.tIndex];\r\n            this.tpri = priTable[this.fbIndex];\r\n            if (this.palIndex !== 0 && pri <= (this.tpri & 0xff)) {\r\n              //console.log(\"Rendering upright tile to buffer\");\r\n              buffer[this.fbIndex] = palette[this.palIndex + palAdd];\r\n              this.tpri = (this.tpri & 0xf00) | pri;\r\n              priTable[this.fbIndex] = this.tpri;\r\n            }\r\n          }\r\n          this.fbIndex++;\r\n          this.tIndex++;\r\n        }\r\n        this.fbIndex -= 8;\r\n        this.fbIndex += 256;\r\n      }\r\n    } else if (flipHorizontal && !flipVertical) {\r\n      this.fbIndex = (dy << 8) + dx;\r\n      this.tIndex = 7;\r\n      for (this.y = 0; this.y < 8; this.y++) {\r\n        for (this.x = 0; this.x < 8; this.x++) {\r\n          if (\r\n            this.x >= srcx1 &&\r\n            this.x < srcx2 &&\r\n            this.y >= srcy1 &&\r\n            this.y < srcy2\r\n          ) {\r\n            this.palIndex = this.pix[this.tIndex];\r\n            this.tpri = priTable[this.fbIndex];\r\n            if (this.palIndex !== 0 && pri <= (this.tpri & 0xff)) {\r\n              buffer[this.fbIndex] = palette[this.palIndex + palAdd];\r\n              this.tpri = (this.tpri & 0xf00) | pri;\r\n              priTable[this.fbIndex] = this.tpri;\r\n            }\r\n          }\r\n          this.fbIndex++;\r\n          this.tIndex--;\r\n        }\r\n        this.fbIndex -= 8;\r\n        this.fbIndex += 256;\r\n        this.tIndex += 16;\r\n      }\r\n    } else if (flipVertical && !flipHorizontal) {\r\n      this.fbIndex = (dy << 8) + dx;\r\n      this.tIndex = 56;\r\n      for (this.y = 0; this.y < 8; this.y++) {\r\n        for (this.x = 0; this.x < 8; this.x++) {\r\n          if (\r\n            this.x >= srcx1 &&\r\n            this.x < srcx2 &&\r\n            this.y >= srcy1 &&\r\n            this.y < srcy2\r\n          ) {\r\n            this.palIndex = this.pix[this.tIndex];\r\n            this.tpri = priTable[this.fbIndex];\r\n            if (this.palIndex !== 0 && pri <= (this.tpri & 0xff)) {\r\n              buffer[this.fbIndex] = palette[this.palIndex + palAdd];\r\n              this.tpri = (this.tpri & 0xf00) | pri;\r\n              priTable[this.fbIndex] = this.tpri;\r\n            }\r\n          }\r\n          this.fbIndex++;\r\n          this.tIndex++;\r\n        }\r\n        this.fbIndex -= 8;\r\n        this.fbIndex += 256;\r\n        this.tIndex -= 16;\r\n      }\r\n    } else {\r\n      this.fbIndex = (dy << 8) + dx;\r\n      this.tIndex = 63;\r\n      for (this.y = 0; this.y < 8; this.y++) {\r\n        for (this.x = 0; this.x < 8; this.x++) {\r\n          if (\r\n            this.x >= srcx1 &&\r\n            this.x < srcx2 &&\r\n            this.y >= srcy1 &&\r\n            this.y < srcy2\r\n          ) {\r\n            this.palIndex = this.pix[this.tIndex];\r\n            this.tpri = priTable[this.fbIndex];\r\n            if (this.palIndex !== 0 && pri <= (this.tpri & 0xff)) {\r\n              buffer[this.fbIndex] = palette[this.palIndex + palAdd];\r\n              this.tpri = (this.tpri & 0xf00) | pri;\r\n              priTable[this.fbIndex] = this.tpri;\r\n            }\r\n          }\r\n          this.fbIndex++;\r\n          this.tIndex--;\r\n        }\r\n        this.fbIndex -= 8;\r\n        this.fbIndex += 256;\r\n      }\r\n    }\r\n  },\r\n\r\n  isTransparent: function (x, y) {\r\n    return this.pix[(y << 3) + x] === 0;\r\n  },\r\n\r\n  toJSON: function () {\r\n    return {\r\n      opaque: this.opaque,\r\n      pix: this.pix,\r\n    };\r\n  },\r\n\r\n  fromJSON: function (s) {\r\n    this.opaque = s.opaque;\r\n    this.pix = s.pix;\r\n  },\r\n};\r\n\r\nmodule.exports = Tile;\r\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = {\r\n  Controller: __webpack_require__(1),\r\n  NES: __webpack_require__(4),\r\n};\r\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar CPU = __webpack_require__(5);\r\nvar Controller = __webpack_require__(1);\r\nvar PPU = __webpack_require__(6);\r\nvar PAPU = __webpack_require__(7);\r\nvar ROM = __webpack_require__(8);\r\n\r\nvar NES = function (opts) {\r\n  this.opts = {\r\n    onFrame: function () {},\r\n    onAudioSample: null,\r\n    onStatusUpdate: function () {},\r\n    onBatteryRamWrite: function () {},\r\n\r\n    // FIXME: not actually used except for in PAPU\r\n    preferredFrameRate: 60,\r\n\r\n    emulateSound: true,\r\n    sampleRate: 48000, // Sound sample rate in hz\r\n  };\r\n  if (typeof opts !== \"undefined\") {\r\n    var key;\r\n    for (key in this.opts) {\r\n      if (typeof opts[key] !== \"undefined\") {\r\n        this.opts[key] = opts[key];\r\n      }\r\n    }\r\n  }\r\n\r\n  this.frameTime = 1000 / this.opts.preferredFrameRate;\r\n\r\n  this.ui = {\r\n    writeFrame: this.opts.onFrame,\r\n    updateStatus: this.opts.onStatusUpdate,\r\n  };\r\n  this.cpu = new CPU(this);\r\n  this.ppu = new PPU(this);\r\n  this.papu = new PAPU(this);\r\n  this.mmap = null; // set in loadROM()\r\n  this.controllers = {\r\n    1: new Controller(),\r\n    2: new Controller(),\r\n  };\r\n\r\n  this.ui.updateStatus(\"Ready to load a ROM.\");\r\n\r\n  this.frame = this.frame.bind(this);\r\n  this.buttonDown = this.buttonDown.bind(this);\r\n  this.buttonUp = this.buttonUp.bind(this);\r\n  this.zapperMove = this.zapperMove.bind(this);\r\n  this.zapperFireDown = this.zapperFireDown.bind(this);\r\n  this.zapperFireUp = this.zapperFireUp.bind(this);\r\n};\r\n\r\nNES.prototype = {\r\n  fpsFrameCount: 0,\r\n  romData: null,\r\n\r\n  // Resets the system\r\n  reset: function () {\r\n    if (this.mmap !== null) {\r\n      this.mmap.reset();\r\n    }\r\n\r\n    this.cpu.reset();\r\n    this.ppu.reset();\r\n    this.papu.reset();\r\n\r\n    this.lastFpsTime = null;\r\n    this.fpsFrameCount = 0;\r\n  },\r\n\r\n  frame: function () {\r\n    this.ppu.startFrame();\r\n    var cycles = 0;\r\n    var emulateSound = this.opts.emulateSound;\r\n    var cpu = this.cpu;\r\n    var ppu = this.ppu;\r\n    var papu = this.papu;\r\n    FRAMELOOP: for (;;) {\r\n      if (cpu.cyclesToHalt === 0) {\r\n        // Execute a CPU instruction\r\n        cycles = cpu.emulate();\r\n        if (emulateSound) {\r\n          papu.clockFrameCounter(cycles);\r\n        }\r\n        cycles *= 3;\r\n      } else {\r\n        if (cpu.cyclesToHalt > 8) {\r\n          cycles = 24;\r\n          if (emulateSound) {\r\n            papu.clockFrameCounter(8);\r\n          }\r\n          cpu.cyclesToHalt -= 8;\r\n        } else {\r\n          cycles = cpu.cyclesToHalt * 3;\r\n          if (emulateSound) {\r\n            papu.clockFrameCounter(cpu.cyclesToHalt);\r\n          }\r\n          cpu.cyclesToHalt = 0;\r\n        }\r\n      }\r\n\r\n      for (; cycles > 0; cycles--) {\r\n        if (\r\n          ppu.curX === ppu.spr0HitX &&\r\n          ppu.f_spVisibility === 1 &&\r\n          ppu.scanline - 21 === ppu.spr0HitY\r\n        ) {\r\n          // Set sprite 0 hit flag:\r\n          ppu.setStatusFlag(ppu.STATUS_SPRITE0HIT, true);\r\n        }\r\n\r\n        if (ppu.requestEndFrame) {\r\n          ppu.nmiCounter--;\r\n          if (ppu.nmiCounter === 0) {\r\n            ppu.requestEndFrame = false;\r\n            ppu.startVBlank();\r\n            break FRAMELOOP;\r\n          }\r\n        }\r\n\r\n        ppu.curX++;\r\n        if (ppu.curX === 341) {\r\n          ppu.curX = 0;\r\n          ppu.endScanline();\r\n        }\r\n      }\r\n    }\r\n    this.fpsFrameCount++;\r\n  },\r\n\r\n  buttonDown: function (controller, button) {\r\n    this.controllers[controller].buttonDown(button);\r\n  },\r\n\r\n  buttonUp: function (controller, button) {\r\n    this.controllers[controller].buttonUp(button);\r\n  },\r\n\r\n  zapperMove: function (x, y) {\r\n    if (!this.mmap) return;\r\n    this.mmap.zapperX = x;\r\n    this.mmap.zapperY = y;\r\n  },\r\n\r\n  zapperFireDown: function () {\r\n    if (!this.mmap) return;\r\n    this.mmap.zapperFired = true;\r\n  },\r\n\r\n  zapperFireUp: function () {\r\n    if (!this.mmap) return;\r\n    this.mmap.zapperFired = false;\r\n  },\r\n\r\n  getFPS: function () {\r\n    var now = +new Date();\r\n    var fps = null;\r\n    if (this.lastFpsTime) {\r\n      fps = this.fpsFrameCount / ((now - this.lastFpsTime) / 1000);\r\n    }\r\n    this.fpsFrameCount = 0;\r\n    this.lastFpsTime = now;\r\n    return fps;\r\n  },\r\n\r\n  reloadROM: function () {\r\n    if (this.romData !== null) {\r\n      this.loadROM(this.romData);\r\n    }\r\n  },\r\n\r\n  // Loads a ROM file into the CPU and PPU.\r\n  // The ROM file is validated first.\r\n  loadROM: function (data) {\r\n    // Load ROM file:\r\n    this.rom = new ROM(this);\r\n    this.rom.load(data);\r\n\r\n    this.reset();\r\n    this.mmap = this.rom.createMapper();\r\n    this.mmap.loadROM();\r\n    this.ppu.setMirroring(this.rom.getMirroringType());\r\n    this.romData = data;\r\n  },\r\n\r\n  setFramerate: function (rate) {\r\n    this.opts.preferredFrameRate = rate;\r\n    this.frameTime = 1000 / rate;\r\n    this.papu.setSampleRate(this.opts.sampleRate, false);\r\n  },\r\n\r\n  getState: function () {\r\n    return {\r\n      cpu: this.cpu.toJSON(),\r\n      mmap: this.mmap.toJSON(),\r\n      ppu: this.ppu.toJSON(),\r\n    };\r\n  },\r\n  \r\n  loadState: function (s) {\r\n    this.cpu.fromJSON(s.cpu);\r\n    this.mmap.fromJSON(s.mmap);\r\n    this.ppu.fromJSON(s.ppu);\r\n  },\r\n};\r\n\r\nmodule.exports = NES;\r\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar utils = __webpack_require__(0);\r\n\r\nvar CPU = function (nes) {\r\n  this.nes = nes;\r\n\r\n  // Keep Chrome happy\r\n  this.mem = null;\r\n  this.REG_ACC = null;\r\n  this.REG_X = null;\r\n  this.REG_Y = null;\r\n  this.REG_SP = null;\r\n  this.REG_PC = null;\r\n  this.REG_PC_NEW = null;\r\n  this.REG_STATUS = null;\r\n  this.F_CARRY = null;\r\n  this.F_DECIMAL = null;\r\n  this.F_INTERRUPT = null;\r\n  this.F_INTERRUPT_NEW = null;\r\n  this.F_OVERFLOW = null;\r\n  this.F_SIGN = null;\r\n  this.F_ZERO = null;\r\n  this.F_NOTUSED = null;\r\n  this.F_NOTUSED_NEW = null;\r\n  this.F_BRK = null;\r\n  this.F_BRK_NEW = null;\r\n  this.opdata = null;\r\n  this.cyclesToHalt = null;\r\n  this.crash = null;\r\n  this.irqRequested = null;\r\n  this.irqType = null;\r\n\r\n  this.reset();\r\n};\r\n\r\nCPU.prototype = {\r\n  // IRQ Types\r\n  IRQ_NORMAL: 0,\r\n  IRQ_NMI: 1,\r\n  IRQ_RESET: 2,\r\n\r\n  reset: function () {\r\n    // Main memory\r\n    this.mem = new Array(0x10000);\r\n\r\n    for (var i = 0; i < 0x2000; i++) {\r\n      this.mem[i] = 0xff;\r\n    }\r\n    for (var p = 0; p < 4; p++) {\r\n      var j = p * 0x800;\r\n      this.mem[j + 0x008] = 0xf7;\r\n      this.mem[j + 0x009] = 0xef;\r\n      this.mem[j + 0x00a] = 0xdf;\r\n      this.mem[j + 0x00f] = 0xbf;\r\n    }\r\n    for (var k = 0x2001; k < this.mem.length; k++) {\r\n      this.mem[k] = 0;\r\n    }\r\n\r\n    // CPU Registers:\r\n    this.REG_ACC = 0;\r\n    this.REG_X = 0;\r\n    this.REG_Y = 0;\r\n    // Reset Stack pointer:\r\n    this.REG_SP = 0x01ff;\r\n    // Reset Program counter:\r\n    this.REG_PC = 0x8000 - 1;\r\n    this.REG_PC_NEW = 0x8000 - 1;\r\n    // Reset Status register:\r\n    this.REG_STATUS = 0x28;\r\n\r\n    this.setStatus(0x28);\r\n\r\n    // Set flags:\r\n    this.F_CARRY = 0;\r\n    this.F_DECIMAL = 0;\r\n    this.F_INTERRUPT = 1;\r\n    this.F_INTERRUPT_NEW = 1;\r\n    this.F_OVERFLOW = 0;\r\n    this.F_SIGN = 0;\r\n    this.F_ZERO = 1;\r\n\r\n    this.F_NOTUSED = 1;\r\n    this.F_NOTUSED_NEW = 1;\r\n    this.F_BRK = 1;\r\n    this.F_BRK_NEW = 1;\r\n\r\n    this.opdata = new OpData().opdata;\r\n    this.cyclesToHalt = 0;\r\n\r\n    // Reset crash flag:\r\n    this.crash = false;\r\n\r\n    // Interrupt notification:\r\n    this.irqRequested = false;\r\n    this.irqType = null;\r\n  },\r\n\r\n  // Emulates a single CPU instruction, returns the number of cycles\r\n  emulate: function () {\r\n    var temp;\r\n    var add;\r\n\r\n    // Check interrupts:\r\n    if (this.irqRequested) {\r\n      temp =\r\n        this.F_CARRY |\r\n        ((this.F_ZERO === 0 ? 1 : 0) << 1) |\r\n        (this.F_INTERRUPT << 2) |\r\n        (this.F_DECIMAL << 3) |\r\n        (this.F_BRK << 4) |\r\n        (this.F_NOTUSED << 5) |\r\n        (this.F_OVERFLOW << 6) |\r\n        (this.F_SIGN << 7);\r\n\r\n      this.REG_PC_NEW = this.REG_PC;\r\n      this.F_INTERRUPT_NEW = this.F_INTERRUPT;\r\n      switch (this.irqType) {\r\n        case 0: {\r\n          // Normal IRQ:\r\n          if (this.F_INTERRUPT !== 0) {\r\n            // console.log(\"Interrupt was masked.\");\r\n            break;\r\n          }\r\n          this.doIrq(temp);\r\n          // console.log(\"Did normal IRQ. I=\"+this.F_INTERRUPT);\r\n          break;\r\n        }\r\n        case 1: {\r\n          // NMI:\r\n          this.doNonMaskableInterrupt(temp);\r\n          break;\r\n        }\r\n        case 2: {\r\n          // Reset:\r\n          this.doResetInterrupt();\r\n          break;\r\n        }\r\n      }\r\n\r\n      this.REG_PC = this.REG_PC_NEW;\r\n      this.F_INTERRUPT = this.F_INTERRUPT_NEW;\r\n      this.F_BRK = this.F_BRK_NEW;\r\n      this.irqRequested = false;\r\n    }\r\n\r\n    var opinf = this.opdata[this.nes.mmap.load(this.REG_PC + 1)];\r\n    var cycleCount = opinf >> 24;\r\n    var cycleAdd = 0;\r\n\r\n    // Find address mode:\r\n    var addrMode = (opinf >> 8) & 0xff;\r\n\r\n    // Increment PC by number of op bytes:\r\n    var opaddr = this.REG_PC;\r\n    this.REG_PC += (opinf >> 16) & 0xff;\r\n\r\n    var addr = 0;\r\n    switch (addrMode) {\r\n      case 0: {\r\n        // Zero Page mode. Use the address given after the opcode,\r\n        // but without high byte.\r\n        addr = this.load(opaddr + 2);\r\n        break;\r\n      }\r\n      case 1: {\r\n        // Relative mode.\r\n        addr = this.load(opaddr + 2);\r\n        if (addr < 0x80) {\r\n          addr += this.REG_PC;\r\n        } else {\r\n          addr += this.REG_PC - 256;\r\n        }\r\n        break;\r\n      }\r\n      case 2: {\r\n        // Ignore. Address is implied in instruction.\r\n        break;\r\n      }\r\n      case 3: {\r\n        // Absolute mode. Use the two bytes following the opcode as\r\n        // an address.\r\n        addr = this.load16bit(opaddr + 2);\r\n        break;\r\n      }\r\n      case 4: {\r\n        // Accumulator mode. The address is in the accumulator\r\n        // register.\r\n        addr = this.REG_ACC;\r\n        break;\r\n      }\r\n      case 5: {\r\n        // Immediate mode. The value is given after the opcode.\r\n        addr = this.REG_PC;\r\n        break;\r\n      }\r\n      case 6: {\r\n        // Zero Page Indexed mode, X as index. Use the address given\r\n        // after the opcode, then add the\r\n        // X register to it to get the final address.\r\n        addr = (this.load(opaddr + 2) + this.REG_X) & 0xff;\r\n        break;\r\n      }\r\n      case 7: {\r\n        // Zero Page Indexed mode, Y as index. Use the address given\r\n        // after the opcode, then add the\r\n        // Y register to it to get the final address.\r\n        addr = (this.load(opaddr + 2) + this.REG_Y) & 0xff;\r\n        break;\r\n      }\r\n      case 8: {\r\n        // Absolute Indexed Mode, X as index. Same as zero page\r\n        // indexed, but with the high byte.\r\n        addr = this.load16bit(opaddr + 2);\r\n        if ((addr & 0xff00) !== ((addr + this.REG_X) & 0xff00)) {\r\n          cycleAdd = 1;\r\n        }\r\n        addr += this.REG_X;\r\n        break;\r\n      }\r\n      case 9: {\r\n        // Absolute Indexed Mode, Y as index. Same as zero page\r\n        // indexed, but with the high byte.\r\n        addr = this.load16bit(opaddr + 2);\r\n        if ((addr & 0xff00) !== ((addr + this.REG_Y) & 0xff00)) {\r\n          cycleAdd = 1;\r\n        }\r\n        addr += this.REG_Y;\r\n        break;\r\n      }\r\n      case 10: {\r\n        // Pre-indexed Indirect mode. Find the 16-bit address\r\n        // starting at the given location plus\r\n        // the current X register. The value is the contents of that\r\n        // address.\r\n        addr = this.load(opaddr + 2);\r\n        if ((addr & 0xff00) !== ((addr + this.REG_X) & 0xff00)) {\r\n          cycleAdd = 1;\r\n        }\r\n        addr += this.REG_X;\r\n        addr &= 0xff;\r\n        addr = this.load16bit(addr);\r\n        break;\r\n      }\r\n      case 11: {\r\n        // Post-indexed Indirect mode. Find the 16-bit address\r\n        // contained in the given location\r\n        // (and the one following). Add to that address the contents\r\n        // of the Y register. Fetch the value\r\n        // stored at that adress.\r\n        addr = this.load16bit(this.load(opaddr + 2));\r\n        if ((addr & 0xff00) !== ((addr + this.REG_Y) & 0xff00)) {\r\n          cycleAdd = 1;\r\n        }\r\n        addr += this.REG_Y;\r\n        break;\r\n      }\r\n      case 12: {\r\n        // Indirect Absolute mode. Find the 16-bit address contained\r\n        // at the given location.\r\n        addr = this.load16bit(opaddr + 2); // Find op\r\n        if (addr < 0x1fff) {\r\n          addr =\r\n            this.mem[addr] +\r\n            (this.mem[(addr & 0xff00) | (((addr & 0xff) + 1) & 0xff)] << 8); // Read from address given in op\r\n        } else {\r\n          addr =\r\n            this.nes.mmap.load(addr) +\r\n            (this.nes.mmap.load(\r\n              (addr & 0xff00) | (((addr & 0xff) + 1) & 0xff)\r\n            ) <<\r\n              8);\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    // Wrap around for addresses above 0xFFFF:\r\n    addr &= 0xffff;\r\n\r\n    // ----------------------------------------------------------------------------------------------------\r\n    // Decode & execute instruction:\r\n    // ----------------------------------------------------------------------------------------------------\r\n\r\n    // This should be compiled to a jump table.\r\n    switch (opinf & 0xff) {\r\n      case 0: {\r\n        // *******\r\n        // * ADC *\r\n        // *******\r\n\r\n        // Add with carry.\r\n        temp = this.REG_ACC + this.load(addr) + this.F_CARRY;\r\n\r\n        if (\r\n          ((this.REG_ACC ^ this.load(addr)) & 0x80) === 0 &&\r\n          ((this.REG_ACC ^ temp) & 0x80) !== 0\r\n        ) {\r\n          this.F_OVERFLOW = 1;\r\n        } else {\r\n          this.F_OVERFLOW = 0;\r\n        }\r\n        this.F_CARRY = temp > 255 ? 1 : 0;\r\n        this.F_SIGN = (temp >> 7) & 1;\r\n        this.F_ZERO = temp & 0xff;\r\n        this.REG_ACC = temp & 255;\r\n        cycleCount += cycleAdd;\r\n        break;\r\n      }\r\n      case 1: {\r\n        // *******\r\n        // * AND *\r\n        // *******\r\n\r\n        // AND memory with accumulator.\r\n        this.REG_ACC = this.REG_ACC & this.load(addr);\r\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\r\n        this.F_ZERO = this.REG_ACC;\r\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\r\n        break;\r\n      }\r\n      case 2: {\r\n        // *******\r\n        // * ASL *\r\n        // *******\r\n\r\n        // Shift left one bit\r\n        if (addrMode === 4) {\r\n          // ADDR_ACC = 4\r\n\r\n          this.F_CARRY = (this.REG_ACC >> 7) & 1;\r\n          this.REG_ACC = (this.REG_ACC << 1) & 255;\r\n          this.F_SIGN = (this.REG_ACC >> 7) & 1;\r\n          this.F_ZERO = this.REG_ACC;\r\n        } else {\r\n          temp = this.load(addr);\r\n          this.F_CARRY = (temp >> 7) & 1;\r\n          temp = (temp << 1) & 255;\r\n          this.F_SIGN = (temp >> 7) & 1;\r\n          this.F_ZERO = temp;\r\n          this.write(addr, temp);\r\n        }\r\n        break;\r\n      }\r\n      case 3: {\r\n        // *******\r\n        // * BCC *\r\n        // *******\r\n\r\n        // Branch on carry clear\r\n        if (this.F_CARRY === 0) {\r\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\r\n          this.REG_PC = addr;\r\n        }\r\n        break;\r\n      }\r\n      case 4: {\r\n        // *******\r\n        // * BCS *\r\n        // *******\r\n\r\n        // Branch on carry set\r\n        if (this.F_CARRY === 1) {\r\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\r\n          this.REG_PC = addr;\r\n        }\r\n        break;\r\n      }\r\n      case 5: {\r\n        // *******\r\n        // * BEQ *\r\n        // *******\r\n\r\n        // Branch on zero\r\n        if (this.F_ZERO === 0) {\r\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\r\n          this.REG_PC = addr;\r\n        }\r\n        break;\r\n      }\r\n      case 6: {\r\n        // *******\r\n        // * BIT *\r\n        // *******\r\n\r\n        temp = this.load(addr);\r\n        this.F_SIGN = (temp >> 7) & 1;\r\n        this.F_OVERFLOW = (temp >> 6) & 1;\r\n        temp &= this.REG_ACC;\r\n        this.F_ZERO = temp;\r\n        break;\r\n      }\r\n      case 7: {\r\n        // *******\r\n        // * BMI *\r\n        // *******\r\n\r\n        // Branch on negative result\r\n        if (this.F_SIGN === 1) {\r\n          cycleCount++;\r\n          this.REG_PC = addr;\r\n        }\r\n        break;\r\n      }\r\n      case 8: {\r\n        // *******\r\n        // * BNE *\r\n        // *******\r\n\r\n        // Branch on not zero\r\n        if (this.F_ZERO !== 0) {\r\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\r\n          this.REG_PC = addr;\r\n        }\r\n        break;\r\n      }\r\n      case 9: {\r\n        // *******\r\n        // * BPL *\r\n        // *******\r\n\r\n        // Branch on positive result\r\n        if (this.F_SIGN === 0) {\r\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\r\n          this.REG_PC = addr;\r\n        }\r\n        break;\r\n      }\r\n      case 10: {\r\n        // *******\r\n        // * BRK *\r\n        // *******\r\n\r\n        this.REG_PC += 2;\r\n        this.push((this.REG_PC >> 8) & 255);\r\n        this.push(this.REG_PC & 255);\r\n        this.F_BRK = 1;\r\n\r\n        this.push(\r\n          this.F_CARRY |\r\n            ((this.F_ZERO === 0 ? 1 : 0) << 1) |\r\n            (this.F_INTERRUPT << 2) |\r\n            (this.F_DECIMAL << 3) |\r\n            (this.F_BRK << 4) |\r\n            (this.F_NOTUSED << 5) |\r\n            (this.F_OVERFLOW << 6) |\r\n            (this.F_SIGN << 7)\r\n        );\r\n\r\n        this.F_INTERRUPT = 1;\r\n        //this.REG_PC = load(0xFFFE) | (load(0xFFFF) << 8);\r\n        this.REG_PC = this.load16bit(0xfffe);\r\n        this.REG_PC--;\r\n        break;\r\n      }\r\n      case 11: {\r\n        // *******\r\n        // * BVC *\r\n        // *******\r\n\r\n        // Branch on overflow clear\r\n        if (this.F_OVERFLOW === 0) {\r\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\r\n          this.REG_PC = addr;\r\n        }\r\n        break;\r\n      }\r\n      case 12: {\r\n        // *******\r\n        // * BVS *\r\n        // *******\r\n\r\n        // Branch on overflow set\r\n        if (this.F_OVERFLOW === 1) {\r\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\r\n          this.REG_PC = addr;\r\n        }\r\n        break;\r\n      }\r\n      case 13: {\r\n        // *******\r\n        // * CLC *\r\n        // *******\r\n\r\n        // Clear carry flag\r\n        this.F_CARRY = 0;\r\n        break;\r\n      }\r\n      case 14: {\r\n        // *******\r\n        // * CLD *\r\n        // *******\r\n\r\n        // Clear decimal flag\r\n        this.F_DECIMAL = 0;\r\n        break;\r\n      }\r\n      case 15: {\r\n        // *******\r\n        // * CLI *\r\n        // *******\r\n\r\n        // Clear interrupt flag\r\n        this.F_INTERRUPT = 0;\r\n        break;\r\n      }\r\n      case 16: {\r\n        // *******\r\n        // * CLV *\r\n        // *******\r\n\r\n        // Clear overflow flag\r\n        this.F_OVERFLOW = 0;\r\n        break;\r\n      }\r\n      case 17: {\r\n        // *******\r\n        // * CMP *\r\n        // *******\r\n\r\n        // Compare memory and accumulator:\r\n        temp = this.REG_ACC - this.load(addr);\r\n        this.F_CARRY = temp >= 0 ? 1 : 0;\r\n        this.F_SIGN = (temp >> 7) & 1;\r\n        this.F_ZERO = temp & 0xff;\r\n        cycleCount += cycleAdd;\r\n        break;\r\n      }\r\n      case 18: {\r\n        // *******\r\n        // * CPX *\r\n        // *******\r\n\r\n        // Compare memory and index X:\r\n        temp = this.REG_X - this.load(addr);\r\n        this.F_CARRY = temp >= 0 ? 1 : 0;\r\n        this.F_SIGN = (temp >> 7) & 1;\r\n        this.F_ZERO = temp & 0xff;\r\n        break;\r\n      }\r\n      case 19: {\r\n        // *******\r\n        // * CPY *\r\n        // *******\r\n\r\n        // Compare memory and index Y:\r\n        temp = this.REG_Y - this.load(addr);\r\n        this.F_CARRY = temp >= 0 ? 1 : 0;\r\n        this.F_SIGN = (temp >> 7) & 1;\r\n        this.F_ZERO = temp & 0xff;\r\n        break;\r\n      }\r\n      case 20: {\r\n        // *******\r\n        // * DEC *\r\n        // *******\r\n\r\n        // Decrement memory by one:\r\n        temp = (this.load(addr) - 1) & 0xff;\r\n        this.F_SIGN = (temp >> 7) & 1;\r\n        this.F_ZERO = temp;\r\n        this.write(addr, temp);\r\n        break;\r\n      }\r\n      case 21: {\r\n        // *******\r\n        // * DEX *\r\n        // *******\r\n\r\n        // Decrement index X by one:\r\n        this.REG_X = (this.REG_X - 1) & 0xff;\r\n        this.F_SIGN = (this.REG_X >> 7) & 1;\r\n        this.F_ZERO = this.REG_X;\r\n        break;\r\n      }\r\n      case 22: {\r\n        // *******\r\n        // * DEY *\r\n        // *******\r\n\r\n        // Decrement index Y by one:\r\n        this.REG_Y = (this.REG_Y - 1) & 0xff;\r\n        this.F_SIGN = (this.REG_Y >> 7) & 1;\r\n        this.F_ZERO = this.REG_Y;\r\n        break;\r\n      }\r\n      case 23: {\r\n        // *******\r\n        // * EOR *\r\n        // *******\r\n\r\n        // XOR Memory with accumulator, store in accumulator:\r\n        this.REG_ACC = (this.load(addr) ^ this.REG_ACC) & 0xff;\r\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\r\n        this.F_ZERO = this.REG_ACC;\r\n        cycleCount += cycleAdd;\r\n        break;\r\n      }\r\n      case 24: {\r\n        // *******\r\n        // * INC *\r\n        // *******\r\n\r\n        // Increment memory by one:\r\n        temp = (this.load(addr) + 1) & 0xff;\r\n        this.F_SIGN = (temp >> 7) & 1;\r\n        this.F_ZERO = temp;\r\n        this.write(addr, temp & 0xff);\r\n        break;\r\n      }\r\n      case 25: {\r\n        // *******\r\n        // * INX *\r\n        // *******\r\n\r\n        // Increment index X by one:\r\n        this.REG_X = (this.REG_X + 1) & 0xff;\r\n        this.F_SIGN = (this.REG_X >> 7) & 1;\r\n        this.F_ZERO = this.REG_X;\r\n        break;\r\n      }\r\n      case 26: {\r\n        // *******\r\n        // * INY *\r\n        // *******\r\n\r\n        // Increment index Y by one:\r\n        this.REG_Y++;\r\n        this.REG_Y &= 0xff;\r\n        this.F_SIGN = (this.REG_Y >> 7) & 1;\r\n        this.F_ZERO = this.REG_Y;\r\n        break;\r\n      }\r\n      case 27: {\r\n        // *******\r\n        // * JMP *\r\n        // *******\r\n\r\n        // Jump to new location:\r\n        this.REG_PC = addr - 1;\r\n        break;\r\n      }\r\n      case 28: {\r\n        // *******\r\n        // * JSR *\r\n        // *******\r\n\r\n        // Jump to new location, saving return address.\r\n        // Push return address on stack:\r\n        this.push((this.REG_PC >> 8) & 255);\r\n        this.push(this.REG_PC & 255);\r\n        this.REG_PC = addr - 1;\r\n        break;\r\n      }\r\n      case 29: {\r\n        // *******\r\n        // * LDA *\r\n        // *******\r\n\r\n        // Load accumulator with memory:\r\n        this.REG_ACC = this.load(addr);\r\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\r\n        this.F_ZERO = this.REG_ACC;\r\n        cycleCount += cycleAdd;\r\n        break;\r\n      }\r\n      case 30: {\r\n        // *******\r\n        // * LDX *\r\n        // *******\r\n\r\n        // Load index X with memory:\r\n        this.REG_X = this.load(addr);\r\n        this.F_SIGN = (this.REG_X >> 7) & 1;\r\n        this.F_ZERO = this.REG_X;\r\n        cycleCount += cycleAdd;\r\n        break;\r\n      }\r\n      case 31: {\r\n        // *******\r\n        // * LDY *\r\n        // *******\r\n\r\n        // Load index Y with memory:\r\n        this.REG_Y = this.load(addr);\r\n        this.F_SIGN = (this.REG_Y >> 7) & 1;\r\n        this.F_ZERO = this.REG_Y;\r\n        cycleCount += cycleAdd;\r\n        break;\r\n      }\r\n      case 32: {\r\n        // *******\r\n        // * LSR *\r\n        // *******\r\n\r\n        // Shift right one bit:\r\n        if (addrMode === 4) {\r\n          // ADDR_ACC\r\n\r\n          temp = this.REG_ACC & 0xff;\r\n          this.F_CARRY = temp & 1;\r\n          temp >>= 1;\r\n          this.REG_ACC = temp;\r\n        } else {\r\n          temp = this.load(addr) & 0xff;\r\n          this.F_CARRY = temp & 1;\r\n          temp >>= 1;\r\n          this.write(addr, temp);\r\n        }\r\n        this.F_SIGN = 0;\r\n        this.F_ZERO = temp;\r\n        break;\r\n      }\r\n      case 33: {\r\n        // *******\r\n        // * NOP *\r\n        // *******\r\n\r\n        // No OPeration.\r\n        // Ignore.\r\n        break;\r\n      }\r\n      case 34: {\r\n        // *******\r\n        // * ORA *\r\n        // *******\r\n\r\n        // OR memory with accumulator, store in accumulator.\r\n        temp = (this.load(addr) | this.REG_ACC) & 255;\r\n        this.F_SIGN = (temp >> 7) & 1;\r\n        this.F_ZERO = temp;\r\n        this.REG_ACC = temp;\r\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\r\n        break;\r\n      }\r\n      case 35: {\r\n        // *******\r\n        // * PHA *\r\n        // *******\r\n\r\n        // Push accumulator on stack\r\n        this.push(this.REG_ACC);\r\n        break;\r\n      }\r\n      case 36: {\r\n        // *******\r\n        // * PHP *\r\n        // *******\r\n\r\n        // Push processor status on stack\r\n        this.F_BRK = 1;\r\n        this.push(\r\n          this.F_CARRY |\r\n            ((this.F_ZERO === 0 ? 1 : 0) << 1) |\r\n            (this.F_INTERRUPT << 2) |\r\n            (this.F_DECIMAL << 3) |\r\n            (this.F_BRK << 4) |\r\n            (this.F_NOTUSED << 5) |\r\n            (this.F_OVERFLOW << 6) |\r\n            (this.F_SIGN << 7)\r\n        );\r\n        break;\r\n      }\r\n      case 37: {\r\n        // *******\r\n        // * PLA *\r\n        // *******\r\n\r\n        // Pull accumulator from stack\r\n        this.REG_ACC = this.pull();\r\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\r\n        this.F_ZERO = this.REG_ACC;\r\n        break;\r\n      }\r\n      case 38: {\r\n        // *******\r\n        // * PLP *\r\n        // *******\r\n\r\n        // Pull processor status from stack\r\n        temp = this.pull();\r\n        this.F_CARRY = temp & 1;\r\n        this.F_ZERO = ((temp >> 1) & 1) === 1 ? 0 : 1;\r\n        this.F_INTERRUPT = (temp >> 2) & 1;\r\n        this.F_DECIMAL = (temp >> 3) & 1;\r\n        this.F_BRK = (temp >> 4) & 1;\r\n        this.F_NOTUSED = (temp >> 5) & 1;\r\n        this.F_OVERFLOW = (temp >> 6) & 1;\r\n        this.F_SIGN = (temp >> 7) & 1;\r\n\r\n        this.F_NOTUSED = 1;\r\n        break;\r\n      }\r\n      case 39: {\r\n        // *******\r\n        // * ROL *\r\n        // *******\r\n\r\n        // Rotate one bit left\r\n        if (addrMode === 4) {\r\n          // ADDR_ACC = 4\r\n\r\n          temp = this.REG_ACC;\r\n          add = this.F_CARRY;\r\n          this.F_CARRY = (temp >> 7) & 1;\r\n          temp = ((temp << 1) & 0xff) + add;\r\n          this.REG_ACC = temp;\r\n        } else {\r\n          temp = this.load(addr);\r\n          add = this.F_CARRY;\r\n          this.F_CARRY = (temp >> 7) & 1;\r\n          temp = ((temp << 1) & 0xff) + add;\r\n          this.write(addr, temp);\r\n        }\r\n        this.F_SIGN = (temp >> 7) & 1;\r\n        this.F_ZERO = temp;\r\n        break;\r\n      }\r\n      case 40: {\r\n        // *******\r\n        // * ROR *\r\n        // *******\r\n\r\n        // Rotate one bit right\r\n        if (addrMode === 4) {\r\n          // ADDR_ACC = 4\r\n\r\n          add = this.F_CARRY << 7;\r\n          this.F_CARRY = this.REG_ACC & 1;\r\n          temp = (this.REG_ACC >> 1) + add;\r\n          this.REG_ACC = temp;\r\n        } else {\r\n          temp = this.load(addr);\r\n          add = this.F_CARRY << 7;\r\n          this.F_CARRY = temp & 1;\r\n          temp = (temp >> 1) + add;\r\n          this.write(addr, temp);\r\n        }\r\n        this.F_SIGN = (temp >> 7) & 1;\r\n        this.F_ZERO = temp;\r\n        break;\r\n      }\r\n      case 41: {\r\n        // *******\r\n        // * RTI *\r\n        // *******\r\n\r\n        // Return from interrupt. Pull status and PC from stack.\r\n\r\n        temp = this.pull();\r\n        this.F_CARRY = temp & 1;\r\n        this.F_ZERO = ((temp >> 1) & 1) === 0 ? 1 : 0;\r\n        this.F_INTERRUPT = (temp >> 2) & 1;\r\n        this.F_DECIMAL = (temp >> 3) & 1;\r\n        this.F_BRK = (temp >> 4) & 1;\r\n        this.F_NOTUSED = (temp >> 5) & 1;\r\n        this.F_OVERFLOW = (temp >> 6) & 1;\r\n        this.F_SIGN = (temp >> 7) & 1;\r\n\r\n        this.REG_PC = this.pull();\r\n        this.REG_PC += this.pull() << 8;\r\n        if (this.REG_PC === 0xffff) {\r\n          return;\r\n        }\r\n        this.REG_PC--;\r\n        this.F_NOTUSED = 1;\r\n        break;\r\n      }\r\n      case 42: {\r\n        // *******\r\n        // * RTS *\r\n        // *******\r\n\r\n        // Return from subroutine. Pull PC from stack.\r\n\r\n        this.REG_PC = this.pull();\r\n        this.REG_PC += this.pull() << 8;\r\n\r\n        if (this.REG_PC === 0xffff) {\r\n          return; // return from NSF play routine:\r\n        }\r\n        break;\r\n      }\r\n      case 43: {\r\n        // *******\r\n        // * SBC *\r\n        // *******\r\n\r\n        temp = this.REG_ACC - this.load(addr) - (1 - this.F_CARRY);\r\n        this.F_SIGN = (temp >> 7) & 1;\r\n        this.F_ZERO = temp & 0xff;\r\n        if (\r\n          ((this.REG_ACC ^ temp) & 0x80) !== 0 &&\r\n          ((this.REG_ACC ^ this.load(addr)) & 0x80) !== 0\r\n        ) {\r\n          this.F_OVERFLOW = 1;\r\n        } else {\r\n          this.F_OVERFLOW = 0;\r\n        }\r\n        this.F_CARRY = temp < 0 ? 0 : 1;\r\n        this.REG_ACC = temp & 0xff;\r\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\r\n        break;\r\n      }\r\n      case 44: {\r\n        // *******\r\n        // * SEC *\r\n        // *******\r\n\r\n        // Set carry flag\r\n        this.F_CARRY = 1;\r\n        break;\r\n      }\r\n      case 45: {\r\n        // *******\r\n        // * SED *\r\n        // *******\r\n\r\n        // Set decimal mode\r\n        this.F_DECIMAL = 1;\r\n        break;\r\n      }\r\n      case 46: {\r\n        // *******\r\n        // * SEI *\r\n        // *******\r\n\r\n        // Set interrupt disable status\r\n        this.F_INTERRUPT = 1;\r\n        break;\r\n      }\r\n      case 47: {\r\n        // *******\r\n        // * STA *\r\n        // *******\r\n\r\n        // Store accumulator in memory\r\n        this.write(addr, this.REG_ACC);\r\n        break;\r\n      }\r\n      case 48: {\r\n        // *******\r\n        // * STX *\r\n        // *******\r\n\r\n        // Store index X in memory\r\n        this.write(addr, this.REG_X);\r\n        break;\r\n      }\r\n      case 49: {\r\n        // *******\r\n        // * STY *\r\n        // *******\r\n\r\n        // Store index Y in memory:\r\n        this.write(addr, this.REG_Y);\r\n        break;\r\n      }\r\n      case 50: {\r\n        // *******\r\n        // * TAX *\r\n        // *******\r\n\r\n        // Transfer accumulator to index X:\r\n        this.REG_X = this.REG_ACC;\r\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\r\n        this.F_ZERO = this.REG_ACC;\r\n        break;\r\n      }\r\n      case 51: {\r\n        // *******\r\n        // * TAY *\r\n        // *******\r\n\r\n        // Transfer accumulator to index Y:\r\n        this.REG_Y = this.REG_ACC;\r\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\r\n        this.F_ZERO = this.REG_ACC;\r\n        break;\r\n      }\r\n      case 52: {\r\n        // *******\r\n        // * TSX *\r\n        // *******\r\n\r\n        // Transfer stack pointer to index X:\r\n        this.REG_X = this.REG_SP - 0x0100;\r\n        this.F_SIGN = (this.REG_SP >> 7) & 1;\r\n        this.F_ZERO = this.REG_X;\r\n        break;\r\n      }\r\n      case 53: {\r\n        // *******\r\n        // * TXA *\r\n        // *******\r\n\r\n        // Transfer index X to accumulator:\r\n        this.REG_ACC = this.REG_X;\r\n        this.F_SIGN = (this.REG_X >> 7) & 1;\r\n        this.F_ZERO = this.REG_X;\r\n        break;\r\n      }\r\n      case 54: {\r\n        // *******\r\n        // * TXS *\r\n        // *******\r\n\r\n        // Transfer index X to stack pointer:\r\n        this.REG_SP = this.REG_X + 0x0100;\r\n        this.stackWrap();\r\n        break;\r\n      }\r\n      case 55: {\r\n        // *******\r\n        // * TYA *\r\n        // *******\r\n\r\n        // Transfer index Y to accumulator:\r\n        this.REG_ACC = this.REG_Y;\r\n        this.F_SIGN = (this.REG_Y >> 7) & 1;\r\n        this.F_ZERO = this.REG_Y;\r\n        break;\r\n      }\r\n      case 56: {\r\n        // *******\r\n        // * ALR *\r\n        // *******\r\n\r\n        // Shift right one bit after ANDing:\r\n        temp = this.REG_ACC & this.load(addr);\r\n        this.F_CARRY = temp & 1;\r\n        this.REG_ACC = this.F_ZERO = temp >> 1;\r\n        this.F_SIGN = 0;\r\n        break;\r\n      }\r\n      case 57: {\r\n        // *******\r\n        // * ANC *\r\n        // *******\r\n\r\n        // AND accumulator, setting carry to bit 7 result.\r\n        this.REG_ACC = this.F_ZERO = this.REG_ACC & this.load(addr);\r\n        this.F_CARRY = this.F_SIGN = (this.REG_ACC >> 7) & 1;\r\n        break;\r\n      }\r\n      case 58: {\r\n        // *******\r\n        // * ARR *\r\n        // *******\r\n\r\n        // Rotate right one bit after ANDing:\r\n        temp = this.REG_ACC & this.load(addr);\r\n        this.REG_ACC = this.F_ZERO = (temp >> 1) + (this.F_CARRY << 7);\r\n        this.F_SIGN = this.F_CARRY;\r\n        this.F_CARRY = (temp >> 7) & 1;\r\n        this.F_OVERFLOW = ((temp >> 7) ^ (temp >> 6)) & 1;\r\n        break;\r\n      }\r\n      case 59: {\r\n        // *******\r\n        // * AXS *\r\n        // *******\r\n\r\n        // Set X to (X AND A) - value.\r\n        temp = (this.REG_X & this.REG_ACC) - this.load(addr);\r\n        this.F_SIGN = (temp >> 7) & 1;\r\n        this.F_ZERO = temp & 0xff;\r\n        if (\r\n          ((this.REG_X ^ temp) & 0x80) !== 0 &&\r\n          ((this.REG_X ^ this.load(addr)) & 0x80) !== 0\r\n        ) {\r\n          this.F_OVERFLOW = 1;\r\n        } else {\r\n          this.F_OVERFLOW = 0;\r\n        }\r\n        this.F_CARRY = temp < 0 ? 0 : 1;\r\n        this.REG_X = temp & 0xff;\r\n        break;\r\n      }\r\n      case 60: {\r\n        // *******\r\n        // * LAX *\r\n        // *******\r\n\r\n        // Load A and X with memory:\r\n        this.REG_ACC = this.REG_X = this.F_ZERO = this.load(addr);\r\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\r\n        cycleCount += cycleAdd;\r\n        break;\r\n      }\r\n      case 61: {\r\n        // *******\r\n        // * SAX *\r\n        // *******\r\n\r\n        // Store A AND X in memory:\r\n        this.write(addr, this.REG_ACC & this.REG_X);\r\n        break;\r\n      }\r\n      case 62: {\r\n        // *******\r\n        // * DCP *\r\n        // *******\r\n\r\n        // Decrement memory by one:\r\n        temp = (this.load(addr) - 1) & 0xff;\r\n        this.write(addr, temp);\r\n\r\n        // Then compare with the accumulator:\r\n        temp = this.REG_ACC - temp;\r\n        this.F_CARRY = temp >= 0 ? 1 : 0;\r\n        this.F_SIGN = (temp >> 7) & 1;\r\n        this.F_ZERO = temp & 0xff;\r\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\r\n        break;\r\n      }\r\n      case 63: {\r\n        // *******\r\n        // * ISC *\r\n        // *******\r\n\r\n        // Increment memory by one:\r\n        temp = (this.load(addr) + 1) & 0xff;\r\n        this.write(addr, temp);\r\n\r\n        // Then subtract from the accumulator:\r\n        temp = this.REG_ACC - temp - (1 - this.F_CARRY);\r\n        this.F_SIGN = (temp >> 7) & 1;\r\n        this.F_ZERO = temp & 0xff;\r\n        if (\r\n          ((this.REG_ACC ^ temp) & 0x80) !== 0 &&\r\n          ((this.REG_ACC ^ this.load(addr)) & 0x80) !== 0\r\n        ) {\r\n          this.F_OVERFLOW = 1;\r\n        } else {\r\n          this.F_OVERFLOW = 0;\r\n        }\r\n        this.F_CARRY = temp < 0 ? 0 : 1;\r\n        this.REG_ACC = temp & 0xff;\r\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\r\n        break;\r\n      }\r\n      case 64: {\r\n        // *******\r\n        // * RLA *\r\n        // *******\r\n\r\n        // Rotate one bit left\r\n        temp = this.load(addr);\r\n        add = this.F_CARRY;\r\n        this.F_CARRY = (temp >> 7) & 1;\r\n        temp = ((temp << 1) & 0xff) + add;\r\n        this.write(addr, temp);\r\n\r\n        // Then AND with the accumulator.\r\n        this.REG_ACC = this.REG_ACC & temp;\r\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\r\n        this.F_ZERO = this.REG_ACC;\r\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\r\n        break;\r\n      }\r\n      case 65: {\r\n        // *******\r\n        // * RRA *\r\n        // *******\r\n\r\n        // Rotate one bit right\r\n        temp = this.load(addr);\r\n        add = this.F_CARRY << 7;\r\n        this.F_CARRY = temp & 1;\r\n        temp = (temp >> 1) + add;\r\n        this.write(addr, temp);\r\n\r\n        // Then add to the accumulator\r\n        temp = this.REG_ACC + this.load(addr) + this.F_CARRY;\r\n\r\n        if (\r\n          ((this.REG_ACC ^ this.load(addr)) & 0x80) === 0 &&\r\n          ((this.REG_ACC ^ temp) & 0x80) !== 0\r\n        ) {\r\n          this.F_OVERFLOW = 1;\r\n        } else {\r\n          this.F_OVERFLOW = 0;\r\n        }\r\n        this.F_CARRY = temp > 255 ? 1 : 0;\r\n        this.F_SIGN = (temp >> 7) & 1;\r\n        this.F_ZERO = temp & 0xff;\r\n        this.REG_ACC = temp & 255;\r\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\r\n        break;\r\n      }\r\n      case 66: {\r\n        // *******\r\n        // * SLO *\r\n        // *******\r\n\r\n        // Shift one bit left\r\n        temp = this.load(addr);\r\n        this.F_CARRY = (temp >> 7) & 1;\r\n        temp = (temp << 1) & 255;\r\n        this.write(addr, temp);\r\n\r\n        // Then OR with the accumulator.\r\n        this.REG_ACC = this.REG_ACC | temp;\r\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\r\n        this.F_ZERO = this.REG_ACC;\r\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\r\n        break;\r\n      }\r\n      case 67: {\r\n        // *******\r\n        // * SRE *\r\n        // *******\r\n\r\n        // Shift one bit right\r\n        temp = this.load(addr) & 0xff;\r\n        this.F_CARRY = temp & 1;\r\n        temp >>= 1;\r\n        this.write(addr, temp);\r\n\r\n        // Then XOR with the accumulator.\r\n        this.REG_ACC = this.REG_ACC ^ temp;\r\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\r\n        this.F_ZERO = this.REG_ACC;\r\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\r\n        break;\r\n      }\r\n      case 68: {\r\n        // *******\r\n        // * SKB *\r\n        // *******\r\n\r\n        // Do nothing\r\n        break;\r\n      }\r\n      case 69: {\r\n        // *******\r\n        // * IGN *\r\n        // *******\r\n\r\n        // Do nothing but load.\r\n        // TODO: Properly implement the double-reads.\r\n        this.load(addr);\r\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\r\n        break;\r\n      }\r\n\r\n      default: {\r\n        // *******\r\n        // * ??? *\r\n        // *******\r\n\t\tconsole.error(\"Game crashed, invalid opcode at address $\" + opaddr.toString(16));\r\n        break;\r\n      }\r\n    } // end of switch\r\n\r\n    return cycleCount;\r\n  },\r\n\r\n  load: function (addr) {\r\n    if (addr < 0x2000) {\r\n      return this.mem[addr & 0x7ff];\r\n    } else {\r\n      return this.nes.mmap.load(addr);\r\n    }\r\n  },\r\n\r\n  load16bit: function (addr) {\r\n    if (addr < 0x1fff) {\r\n      return this.mem[addr & 0x7ff] | (this.mem[(addr + 1) & 0x7ff] << 8);\r\n    } else {\r\n      return this.nes.mmap.load(addr) | (this.nes.mmap.load(addr + 1) << 8);\r\n    }\r\n  },\r\n\r\n  write: function (addr, val) {\r\n    if (addr < 0x2000) {\r\n      this.mem[addr & 0x7ff] = val;\r\n    } else {\r\n      this.nes.mmap.write(addr, val);\r\n    }\r\n  },\r\n\r\n  requestIrq: function (type) {\r\n    if (this.irqRequested) {\r\n      if (type === this.IRQ_NORMAL) {\r\n        return;\r\n      }\r\n      // console.log(\"too fast irqs. type=\"+type);\r\n    }\r\n    this.irqRequested = true;\r\n    this.irqType = type;\r\n  },\r\n\r\n  push: function (value) {\r\n    this.nes.mmap.write(this.REG_SP, value);\r\n    this.REG_SP--;\r\n    this.REG_SP = 0x0100 | (this.REG_SP & 0xff);\r\n  },\r\n\r\n  stackWrap: function () {\r\n    this.REG_SP = 0x0100 | (this.REG_SP & 0xff);\r\n  },\r\n\r\n  pull: function () {\r\n    this.REG_SP++;\r\n    this.REG_SP = 0x0100 | (this.REG_SP & 0xff);\r\n    return this.nes.mmap.load(this.REG_SP);\r\n  },\r\n\r\n  pageCrossed: function (addr1, addr2) {\r\n    return (addr1 & 0xff00) !== (addr2 & 0xff00);\r\n  },\r\n\r\n  haltCycles: function (cycles) {\r\n    this.cyclesToHalt += cycles;\r\n  },\r\n\r\n  doNonMaskableInterrupt: function (status) {\r\n    if ((this.nes.mmap.load(0x2000) & 128) !== 0) {\r\n      // Check whether VBlank Interrupts are enabled\r\n\r\n      this.REG_PC_NEW++;\r\n      this.push((this.REG_PC_NEW >> 8) & 0xff);\r\n      this.push(this.REG_PC_NEW & 0xff);\r\n      //this.F_INTERRUPT_NEW = 1;\r\n      this.push(status);\r\n\r\n      this.REG_PC_NEW =\r\n        this.nes.mmap.load(0xfffa) | (this.nes.mmap.load(0xfffb) << 8);\r\n      this.REG_PC_NEW--;\r\n    }\r\n  },\r\n\r\n  doResetInterrupt: function () {\r\n    this.REG_PC_NEW =\r\n      this.nes.mmap.load(0xfffc) | (this.nes.mmap.load(0xfffd) << 8);\r\n    this.REG_PC_NEW--;\r\n  },\r\n\r\n  doIrq: function (status) {\r\n    this.REG_PC_NEW++;\r\n    this.push((this.REG_PC_NEW >> 8) & 0xff);\r\n    this.push(this.REG_PC_NEW & 0xff);\r\n    this.push(status);\r\n    this.F_INTERRUPT_NEW = 1;\r\n    this.F_BRK_NEW = 0;\r\n\r\n    this.REG_PC_NEW =\r\n      this.nes.mmap.load(0xfffe) | (this.nes.mmap.load(0xffff) << 8);\r\n    this.REG_PC_NEW--;\r\n  },\r\n\r\n  getStatus: function () {\r\n    return (\r\n      this.F_CARRY |\r\n      (this.F_ZERO << 1) |\r\n      (this.F_INTERRUPT << 2) |\r\n      (this.F_DECIMAL << 3) |\r\n      (this.F_BRK << 4) |\r\n      (this.F_NOTUSED << 5) |\r\n      (this.F_OVERFLOW << 6) |\r\n      (this.F_SIGN << 7)\r\n    );\r\n  },\r\n\r\n  setStatus: function (st) {\r\n    this.F_CARRY = st & 1;\r\n    this.F_ZERO = (st >> 1) & 1;\r\n    this.F_INTERRUPT = (st >> 2) & 1;\r\n    this.F_DECIMAL = (st >> 3) & 1;\r\n    this.F_BRK = (st >> 4) & 1;\r\n    this.F_NOTUSED = (st >> 5) & 1;\r\n    this.F_OVERFLOW = (st >> 6) & 1;\r\n    this.F_SIGN = (st >> 7) & 1;\r\n  },\r\n\r\n  JSON_PROPERTIES: [\r\n    \"mem\",\r\n    \"cyclesToHalt\",\r\n    \"irqRequested\",\r\n    \"irqType\",\r\n    // Registers\r\n    \"REG_ACC\",\r\n    \"REG_X\",\r\n    \"REG_Y\",\r\n    \"REG_SP\",\r\n    \"REG_PC\",\r\n    \"REG_PC_NEW\",\r\n    \"REG_STATUS\",\r\n    // Status\r\n    \"F_CARRY\",\r\n    \"F_DECIMAL\",\r\n    \"F_INTERRUPT\",\r\n    \"F_INTERRUPT_NEW\",\r\n    \"F_OVERFLOW\",\r\n    \"F_SIGN\",\r\n    \"F_ZERO\",\r\n    \"F_NOTUSED\",\r\n    \"F_NOTUSED_NEW\",\r\n    \"F_BRK\",\r\n    \"F_BRK_NEW\",\r\n  ],\r\n\r\n  toJSON: function () {\r\n    return utils.toJSON(this);\r\n  },\r\n\r\n  fromJSON: function (s) {\r\n    utils.fromJSON(this, s);\r\n  },\r\n};\r\n\r\n// Generates and provides an array of details about instructions\r\nvar OpData = function () {\r\n  this.opdata = new Array(256);\r\n\r\n  // Set all to invalid instruction (to detect crashes):\r\n  for (var i = 0; i < 256; i++) this.opdata[i] = 0xff;\r\n\r\n  // Now fill in all valid opcodes:\r\n\r\n  // ADC:\r\n  this.setOp(this.INS_ADC, 0x69, this.ADDR_IMM, 2, 2);\r\n  this.setOp(this.INS_ADC, 0x65, this.ADDR_ZP, 2, 3);\r\n  this.setOp(this.INS_ADC, 0x75, this.ADDR_ZPX, 2, 4);\r\n  this.setOp(this.INS_ADC, 0x6d, this.ADDR_ABS, 3, 4);\r\n  this.setOp(this.INS_ADC, 0x7d, this.ADDR_ABSX, 3, 4);\r\n  this.setOp(this.INS_ADC, 0x79, this.ADDR_ABSY, 3, 4);\r\n  this.setOp(this.INS_ADC, 0x61, this.ADDR_PREIDXIND, 2, 6);\r\n  this.setOp(this.INS_ADC, 0x71, this.ADDR_POSTIDXIND, 2, 5);\r\n\r\n  // AND:\r\n  this.setOp(this.INS_AND, 0x29, this.ADDR_IMM, 2, 2);\r\n  this.setOp(this.INS_AND, 0x25, this.ADDR_ZP, 2, 3);\r\n  this.setOp(this.INS_AND, 0x35, this.ADDR_ZPX, 2, 4);\r\n  this.setOp(this.INS_AND, 0x2d, this.ADDR_ABS, 3, 4);\r\n  this.setOp(this.INS_AND, 0x3d, this.ADDR_ABSX, 3, 4);\r\n  this.setOp(this.INS_AND, 0x39, this.ADDR_ABSY, 3, 4);\r\n  this.setOp(this.INS_AND, 0x21, this.ADDR_PREIDXIND, 2, 6);\r\n  this.setOp(this.INS_AND, 0x31, this.ADDR_POSTIDXIND, 2, 5);\r\n\r\n  // ASL:\r\n  this.setOp(this.INS_ASL, 0x0a, this.ADDR_ACC, 1, 2);\r\n  this.setOp(this.INS_ASL, 0x06, this.ADDR_ZP, 2, 5);\r\n  this.setOp(this.INS_ASL, 0x16, this.ADDR_ZPX, 2, 6);\r\n  this.setOp(this.INS_ASL, 0x0e, this.ADDR_ABS, 3, 6);\r\n  this.setOp(this.INS_ASL, 0x1e, this.ADDR_ABSX, 3, 7);\r\n\r\n  // BCC:\r\n  this.setOp(this.INS_BCC, 0x90, this.ADDR_REL, 2, 2);\r\n\r\n  // BCS:\r\n  this.setOp(this.INS_BCS, 0xb0, this.ADDR_REL, 2, 2);\r\n\r\n  // BEQ:\r\n  this.setOp(this.INS_BEQ, 0xf0, this.ADDR_REL, 2, 2);\r\n\r\n  // BIT:\r\n  this.setOp(this.INS_BIT, 0x24, this.ADDR_ZP, 2, 3);\r\n  this.setOp(this.INS_BIT, 0x2c, this.ADDR_ABS, 3, 4);\r\n\r\n  // BMI:\r\n  this.setOp(this.INS_BMI, 0x30, this.ADDR_REL, 2, 2);\r\n\r\n  // BNE:\r\n  this.setOp(this.INS_BNE, 0xd0, this.ADDR_REL, 2, 2);\r\n\r\n  // BPL:\r\n  this.setOp(this.INS_BPL, 0x10, this.ADDR_REL, 2, 2);\r\n\r\n  // BRK:\r\n  this.setOp(this.INS_BRK, 0x00, this.ADDR_IMP, 1, 7);\r\n\r\n  // BVC:\r\n  this.setOp(this.INS_BVC, 0x50, this.ADDR_REL, 2, 2);\r\n\r\n  // BVS:\r\n  this.setOp(this.INS_BVS, 0x70, this.ADDR_REL, 2, 2);\r\n\r\n  // CLC:\r\n  this.setOp(this.INS_CLC, 0x18, this.ADDR_IMP, 1, 2);\r\n\r\n  // CLD:\r\n  this.setOp(this.INS_CLD, 0xd8, this.ADDR_IMP, 1, 2);\r\n\r\n  // CLI:\r\n  this.setOp(this.INS_CLI, 0x58, this.ADDR_IMP, 1, 2);\r\n\r\n  // CLV:\r\n  this.setOp(this.INS_CLV, 0xb8, this.ADDR_IMP, 1, 2);\r\n\r\n  // CMP:\r\n  this.setOp(this.INS_CMP, 0xc9, this.ADDR_IMM, 2, 2);\r\n  this.setOp(this.INS_CMP, 0xc5, this.ADDR_ZP, 2, 3);\r\n  this.setOp(this.INS_CMP, 0xd5, this.ADDR_ZPX, 2, 4);\r\n  this.setOp(this.INS_CMP, 0xcd, this.ADDR_ABS, 3, 4);\r\n  this.setOp(this.INS_CMP, 0xdd, this.ADDR_ABSX, 3, 4);\r\n  this.setOp(this.INS_CMP, 0xd9, this.ADDR_ABSY, 3, 4);\r\n  this.setOp(this.INS_CMP, 0xc1, this.ADDR_PREIDXIND, 2, 6);\r\n  this.setOp(this.INS_CMP, 0xd1, this.ADDR_POSTIDXIND, 2, 5);\r\n\r\n  // CPX:\r\n  this.setOp(this.INS_CPX, 0xe0, this.ADDR_IMM, 2, 2);\r\n  this.setOp(this.INS_CPX, 0xe4, this.ADDR_ZP, 2, 3);\r\n  this.setOp(this.INS_CPX, 0xec, this.ADDR_ABS, 3, 4);\r\n\r\n  // CPY:\r\n  this.setOp(this.INS_CPY, 0xc0, this.ADDR_IMM, 2, 2);\r\n  this.setOp(this.INS_CPY, 0xc4, this.ADDR_ZP, 2, 3);\r\n  this.setOp(this.INS_CPY, 0xcc, this.ADDR_ABS, 3, 4);\r\n\r\n  // DEC:\r\n  this.setOp(this.INS_DEC, 0xc6, this.ADDR_ZP, 2, 5);\r\n  this.setOp(this.INS_DEC, 0xd6, this.ADDR_ZPX, 2, 6);\r\n  this.setOp(this.INS_DEC, 0xce, this.ADDR_ABS, 3, 6);\r\n  this.setOp(this.INS_DEC, 0xde, this.ADDR_ABSX, 3, 7);\r\n\r\n  // DEX:\r\n  this.setOp(this.INS_DEX, 0xca, this.ADDR_IMP, 1, 2);\r\n\r\n  // DEY:\r\n  this.setOp(this.INS_DEY, 0x88, this.ADDR_IMP, 1, 2);\r\n\r\n  // EOR:\r\n  this.setOp(this.INS_EOR, 0x49, this.ADDR_IMM, 2, 2);\r\n  this.setOp(this.INS_EOR, 0x45, this.ADDR_ZP, 2, 3);\r\n  this.setOp(this.INS_EOR, 0x55, this.ADDR_ZPX, 2, 4);\r\n  this.setOp(this.INS_EOR, 0x4d, this.ADDR_ABS, 3, 4);\r\n  this.setOp(this.INS_EOR, 0x5d, this.ADDR_ABSX, 3, 4);\r\n  this.setOp(this.INS_EOR, 0x59, this.ADDR_ABSY, 3, 4);\r\n  this.setOp(this.INS_EOR, 0x41, this.ADDR_PREIDXIND, 2, 6);\r\n  this.setOp(this.INS_EOR, 0x51, this.ADDR_POSTIDXIND, 2, 5);\r\n\r\n  // INC:\r\n  this.setOp(this.INS_INC, 0xe6, this.ADDR_ZP, 2, 5);\r\n  this.setOp(this.INS_INC, 0xf6, this.ADDR_ZPX, 2, 6);\r\n  this.setOp(this.INS_INC, 0xee, this.ADDR_ABS, 3, 6);\r\n  this.setOp(this.INS_INC, 0xfe, this.ADDR_ABSX, 3, 7);\r\n\r\n  // INX:\r\n  this.setOp(this.INS_INX, 0xe8, this.ADDR_IMP, 1, 2);\r\n\r\n  // INY:\r\n  this.setOp(this.INS_INY, 0xc8, this.ADDR_IMP, 1, 2);\r\n\r\n  // JMP:\r\n  this.setOp(this.INS_JMP, 0x4c, this.ADDR_ABS, 3, 3);\r\n  this.setOp(this.INS_JMP, 0x6c, this.ADDR_INDABS, 3, 5);\r\n\r\n  // JSR:\r\n  this.setOp(this.INS_JSR, 0x20, this.ADDR_ABS, 3, 6);\r\n\r\n  // LDA:\r\n  this.setOp(this.INS_LDA, 0xa9, this.ADDR_IMM, 2, 2);\r\n  this.setOp(this.INS_LDA, 0xa5, this.ADDR_ZP, 2, 3);\r\n  this.setOp(this.INS_LDA, 0xb5, this.ADDR_ZPX, 2, 4);\r\n  this.setOp(this.INS_LDA, 0xad, this.ADDR_ABS, 3, 4);\r\n  this.setOp(this.INS_LDA, 0xbd, this.ADDR_ABSX, 3, 4);\r\n  this.setOp(this.INS_LDA, 0xb9, this.ADDR_ABSY, 3, 4);\r\n  this.setOp(this.INS_LDA, 0xa1, this.ADDR_PREIDXIND, 2, 6);\r\n  this.setOp(this.INS_LDA, 0xb1, this.ADDR_POSTIDXIND, 2, 5);\r\n\r\n  // LDX:\r\n  this.setOp(this.INS_LDX, 0xa2, this.ADDR_IMM, 2, 2);\r\n  this.setOp(this.INS_LDX, 0xa6, this.ADDR_ZP, 2, 3);\r\n  this.setOp(this.INS_LDX, 0xb6, this.ADDR_ZPY, 2, 4);\r\n  this.setOp(this.INS_LDX, 0xae, this.ADDR_ABS, 3, 4);\r\n  this.setOp(this.INS_LDX, 0xbe, this.ADDR_ABSY, 3, 4);\r\n\r\n  // LDY:\r\n  this.setOp(this.INS_LDY, 0xa0, this.ADDR_IMM, 2, 2);\r\n  this.setOp(this.INS_LDY, 0xa4, this.ADDR_ZP, 2, 3);\r\n  this.setOp(this.INS_LDY, 0xb4, this.ADDR_ZPX, 2, 4);\r\n  this.setOp(this.INS_LDY, 0xac, this.ADDR_ABS, 3, 4);\r\n  this.setOp(this.INS_LDY, 0xbc, this.ADDR_ABSX, 3, 4);\r\n\r\n  // LSR:\r\n  this.setOp(this.INS_LSR, 0x4a, this.ADDR_ACC, 1, 2);\r\n  this.setOp(this.INS_LSR, 0x46, this.ADDR_ZP, 2, 5);\r\n  this.setOp(this.INS_LSR, 0x56, this.ADDR_ZPX, 2, 6);\r\n  this.setOp(this.INS_LSR, 0x4e, this.ADDR_ABS, 3, 6);\r\n  this.setOp(this.INS_LSR, 0x5e, this.ADDR_ABSX, 3, 7);\r\n\r\n  // NOP:\r\n  this.setOp(this.INS_NOP, 0x1a, this.ADDR_IMP, 1, 2);\r\n  this.setOp(this.INS_NOP, 0x3a, this.ADDR_IMP, 1, 2);\r\n  this.setOp(this.INS_NOP, 0x5a, this.ADDR_IMP, 1, 2);\r\n  this.setOp(this.INS_NOP, 0x7a, this.ADDR_IMP, 1, 2);\r\n  this.setOp(this.INS_NOP, 0xda, this.ADDR_IMP, 1, 2);\r\n  this.setOp(this.INS_NOP, 0xea, this.ADDR_IMP, 1, 2);\r\n  this.setOp(this.INS_NOP, 0xfa, this.ADDR_IMP, 1, 2);\r\n\r\n  // ORA:\r\n  this.setOp(this.INS_ORA, 0x09, this.ADDR_IMM, 2, 2);\r\n  this.setOp(this.INS_ORA, 0x05, this.ADDR_ZP, 2, 3);\r\n  this.setOp(this.INS_ORA, 0x15, this.ADDR_ZPX, 2, 4);\r\n  this.setOp(this.INS_ORA, 0x0d, this.ADDR_ABS, 3, 4);\r\n  this.setOp(this.INS_ORA, 0x1d, this.ADDR_ABSX, 3, 4);\r\n  this.setOp(this.INS_ORA, 0x19, this.ADDR_ABSY, 3, 4);\r\n  this.setOp(this.INS_ORA, 0x01, this.ADDR_PREIDXIND, 2, 6);\r\n  this.setOp(this.INS_ORA, 0x11, this.ADDR_POSTIDXIND, 2, 5);\r\n\r\n  // PHA:\r\n  this.setOp(this.INS_PHA, 0x48, this.ADDR_IMP, 1, 3);\r\n\r\n  // PHP:\r\n  this.setOp(this.INS_PHP, 0x08, this.ADDR_IMP, 1, 3);\r\n\r\n  // PLA:\r\n  this.setOp(this.INS_PLA, 0x68, this.ADDR_IMP, 1, 4);\r\n\r\n  // PLP:\r\n  this.setOp(this.INS_PLP, 0x28, this.ADDR_IMP, 1, 4);\r\n\r\n  // ROL:\r\n  this.setOp(this.INS_ROL, 0x2a, this.ADDR_ACC, 1, 2);\r\n  this.setOp(this.INS_ROL, 0x26, this.ADDR_ZP, 2, 5);\r\n  this.setOp(this.INS_ROL, 0x36, this.ADDR_ZPX, 2, 6);\r\n  this.setOp(this.INS_ROL, 0x2e, this.ADDR_ABS, 3, 6);\r\n  this.setOp(this.INS_ROL, 0x3e, this.ADDR_ABSX, 3, 7);\r\n\r\n  // ROR:\r\n  this.setOp(this.INS_ROR, 0x6a, this.ADDR_ACC, 1, 2);\r\n  this.setOp(this.INS_ROR, 0x66, this.ADDR_ZP, 2, 5);\r\n  this.setOp(this.INS_ROR, 0x76, this.ADDR_ZPX, 2, 6);\r\n  this.setOp(this.INS_ROR, 0x6e, this.ADDR_ABS, 3, 6);\r\n  this.setOp(this.INS_ROR, 0x7e, this.ADDR_ABSX, 3, 7);\r\n\r\n  // RTI:\r\n  this.setOp(this.INS_RTI, 0x40, this.ADDR_IMP, 1, 6);\r\n\r\n  // RTS:\r\n  this.setOp(this.INS_RTS, 0x60, this.ADDR_IMP, 1, 6);\r\n\r\n  // SBC:\r\n  this.setOp(this.INS_SBC, 0xe9, this.ADDR_IMM, 2, 2);\r\n  this.setOp(this.INS_SBC, 0xe5, this.ADDR_ZP, 2, 3);\r\n  this.setOp(this.INS_SBC, 0xf5, this.ADDR_ZPX, 2, 4);\r\n  this.setOp(this.INS_SBC, 0xed, this.ADDR_ABS, 3, 4);\r\n  this.setOp(this.INS_SBC, 0xfd, this.ADDR_ABSX, 3, 4);\r\n  this.setOp(this.INS_SBC, 0xf9, this.ADDR_ABSY, 3, 4);\r\n  this.setOp(this.INS_SBC, 0xe1, this.ADDR_PREIDXIND, 2, 6);\r\n  this.setOp(this.INS_SBC, 0xf1, this.ADDR_POSTIDXIND, 2, 5);\r\n\r\n  // SEC:\r\n  this.setOp(this.INS_SEC, 0x38, this.ADDR_IMP, 1, 2);\r\n\r\n  // SED:\r\n  this.setOp(this.INS_SED, 0xf8, this.ADDR_IMP, 1, 2);\r\n\r\n  // SEI:\r\n  this.setOp(this.INS_SEI, 0x78, this.ADDR_IMP, 1, 2);\r\n\r\n  // STA:\r\n  this.setOp(this.INS_STA, 0x85, this.ADDR_ZP, 2, 3);\r\n  this.setOp(this.INS_STA, 0x95, this.ADDR_ZPX, 2, 4);\r\n  this.setOp(this.INS_STA, 0x8d, this.ADDR_ABS, 3, 4);\r\n  this.setOp(this.INS_STA, 0x9d, this.ADDR_ABSX, 3, 5);\r\n  this.setOp(this.INS_STA, 0x99, this.ADDR_ABSY, 3, 5);\r\n  this.setOp(this.INS_STA, 0x81, this.ADDR_PREIDXIND, 2, 6);\r\n  this.setOp(this.INS_STA, 0x91, this.ADDR_POSTIDXIND, 2, 6);\r\n\r\n  // STX:\r\n  this.setOp(this.INS_STX, 0x86, this.ADDR_ZP, 2, 3);\r\n  this.setOp(this.INS_STX, 0x96, this.ADDR_ZPY, 2, 4);\r\n  this.setOp(this.INS_STX, 0x8e, this.ADDR_ABS, 3, 4);\r\n\r\n  // STY:\r\n  this.setOp(this.INS_STY, 0x84, this.ADDR_ZP, 2, 3);\r\n  this.setOp(this.INS_STY, 0x94, this.ADDR_ZPX, 2, 4);\r\n  this.setOp(this.INS_STY, 0x8c, this.ADDR_ABS, 3, 4);\r\n\r\n  // TAX:\r\n  this.setOp(this.INS_TAX, 0xaa, this.ADDR_IMP, 1, 2);\r\n\r\n  // TAY:\r\n  this.setOp(this.INS_TAY, 0xa8, this.ADDR_IMP, 1, 2);\r\n\r\n  // TSX:\r\n  this.setOp(this.INS_TSX, 0xba, this.ADDR_IMP, 1, 2);\r\n\r\n  // TXA:\r\n  this.setOp(this.INS_TXA, 0x8a, this.ADDR_IMP, 1, 2);\r\n\r\n  // TXS:\r\n  this.setOp(this.INS_TXS, 0x9a, this.ADDR_IMP, 1, 2);\r\n\r\n  // TYA:\r\n  this.setOp(this.INS_TYA, 0x98, this.ADDR_IMP, 1, 2);\r\n\r\n  // ALR:\r\n  this.setOp(this.INS_ALR, 0x4b, this.ADDR_IMM, 2, 2);\r\n\r\n  // ANC:\r\n  this.setOp(this.INS_ANC, 0x0b, this.ADDR_IMM, 2, 2);\r\n  this.setOp(this.INS_ANC, 0x2b, this.ADDR_IMM, 2, 2);\r\n\r\n  // ARR:\r\n  this.setOp(this.INS_ARR, 0x6b, this.ADDR_IMM, 2, 2);\r\n\r\n  // AXS:\r\n  this.setOp(this.INS_AXS, 0xcb, this.ADDR_IMM, 2, 2);\r\n\r\n  // LAX:\r\n  this.setOp(this.INS_LAX, 0xa3, this.ADDR_PREIDXIND, 2, 6);\r\n  this.setOp(this.INS_LAX, 0xa7, this.ADDR_ZP, 2, 3);\r\n  this.setOp(this.INS_LAX, 0xaf, this.ADDR_ABS, 3, 4);\r\n  this.setOp(this.INS_LAX, 0xb3, this.ADDR_POSTIDXIND, 2, 5);\r\n  this.setOp(this.INS_LAX, 0xb7, this.ADDR_ZPY, 2, 4);\r\n  this.setOp(this.INS_LAX, 0xbf, this.ADDR_ABSY, 3, 4);\r\n\r\n  // SAX:\r\n  this.setOp(this.INS_SAX, 0x83, this.ADDR_PREIDXIND, 2, 6);\r\n  this.setOp(this.INS_SAX, 0x87, this.ADDR_ZP, 2, 3);\r\n  this.setOp(this.INS_SAX, 0x8f, this.ADDR_ABS, 3, 4);\r\n  this.setOp(this.INS_SAX, 0x97, this.ADDR_ZPY, 2, 4);\r\n\r\n  // DCP:\r\n  this.setOp(this.INS_DCP, 0xc3, this.ADDR_PREIDXIND, 2, 8);\r\n  this.setOp(this.INS_DCP, 0xc7, this.ADDR_ZP, 2, 5);\r\n  this.setOp(this.INS_DCP, 0xcf, this.ADDR_ABS, 3, 6);\r\n  this.setOp(this.INS_DCP, 0xd3, this.ADDR_POSTIDXIND, 2, 8);\r\n  this.setOp(this.INS_DCP, 0xd7, this.ADDR_ZPX, 2, 6);\r\n  this.setOp(this.INS_DCP, 0xdb, this.ADDR_ABSY, 3, 7);\r\n  this.setOp(this.INS_DCP, 0xdf, this.ADDR_ABSX, 3, 7);\r\n\r\n  // ISC:\r\n  this.setOp(this.INS_ISC, 0xe3, this.ADDR_PREIDXIND, 2, 8);\r\n  this.setOp(this.INS_ISC, 0xe7, this.ADDR_ZP, 2, 5);\r\n  this.setOp(this.INS_ISC, 0xef, this.ADDR_ABS, 3, 6);\r\n  this.setOp(this.INS_ISC, 0xf3, this.ADDR_POSTIDXIND, 2, 8);\r\n  this.setOp(this.INS_ISC, 0xf7, this.ADDR_ZPX, 2, 6);\r\n  this.setOp(this.INS_ISC, 0xfb, this.ADDR_ABSY, 3, 7);\r\n  this.setOp(this.INS_ISC, 0xff, this.ADDR_ABSX, 3, 7);\r\n\r\n  // RLA:\r\n  this.setOp(this.INS_RLA, 0x23, this.ADDR_PREIDXIND, 2, 8);\r\n  this.setOp(this.INS_RLA, 0x27, this.ADDR_ZP, 2, 5);\r\n  this.setOp(this.INS_RLA, 0x2f, this.ADDR_ABS, 3, 6);\r\n  this.setOp(this.INS_RLA, 0x33, this.ADDR_POSTIDXIND, 2, 8);\r\n  this.setOp(this.INS_RLA, 0x37, this.ADDR_ZPX, 2, 6);\r\n  this.setOp(this.INS_RLA, 0x3b, this.ADDR_ABSY, 3, 7);\r\n  this.setOp(this.INS_RLA, 0x3f, this.ADDR_ABSX, 3, 7);\r\n\r\n  // RRA:\r\n  this.setOp(this.INS_RRA, 0x63, this.ADDR_PREIDXIND, 2, 8);\r\n  this.setOp(this.INS_RRA, 0x67, this.ADDR_ZP, 2, 5);\r\n  this.setOp(this.INS_RRA, 0x6f, this.ADDR_ABS, 3, 6);\r\n  this.setOp(this.INS_RRA, 0x73, this.ADDR_POSTIDXIND, 2, 8);\r\n  this.setOp(this.INS_RRA, 0x77, this.ADDR_ZPX, 2, 6);\r\n  this.setOp(this.INS_RRA, 0x7b, this.ADDR_ABSY, 3, 7);\r\n  this.setOp(this.INS_RRA, 0x7f, this.ADDR_ABSX, 3, 7);\r\n\r\n  // SLO:\r\n  this.setOp(this.INS_SLO, 0x03, this.ADDR_PREIDXIND, 2, 8);\r\n  this.setOp(this.INS_SLO, 0x07, this.ADDR_ZP, 2, 5);\r\n  this.setOp(this.INS_SLO, 0x0f, this.ADDR_ABS, 3, 6);\r\n  this.setOp(this.INS_SLO, 0x13, this.ADDR_POSTIDXIND, 2, 8);\r\n  this.setOp(this.INS_SLO, 0x17, this.ADDR_ZPX, 2, 6);\r\n  this.setOp(this.INS_SLO, 0x1b, this.ADDR_ABSY, 3, 7);\r\n  this.setOp(this.INS_SLO, 0x1f, this.ADDR_ABSX, 3, 7);\r\n\r\n  // SRE:\r\n  this.setOp(this.INS_SRE, 0x43, this.ADDR_PREIDXIND, 2, 8);\r\n  this.setOp(this.INS_SRE, 0x47, this.ADDR_ZP, 2, 5);\r\n  this.setOp(this.INS_SRE, 0x4f, this.ADDR_ABS, 3, 6);\r\n  this.setOp(this.INS_SRE, 0x53, this.ADDR_POSTIDXIND, 2, 8);\r\n  this.setOp(this.INS_SRE, 0x57, this.ADDR_ZPX, 2, 6);\r\n  this.setOp(this.INS_SRE, 0x5b, this.ADDR_ABSY, 3, 7);\r\n  this.setOp(this.INS_SRE, 0x5f, this.ADDR_ABSX, 3, 7);\r\n\r\n  // SKB:\r\n  this.setOp(this.INS_SKB, 0x80, this.ADDR_IMM, 2, 2);\r\n  this.setOp(this.INS_SKB, 0x82, this.ADDR_IMM, 2, 2);\r\n  this.setOp(this.INS_SKB, 0x89, this.ADDR_IMM, 2, 2);\r\n  this.setOp(this.INS_SKB, 0xc2, this.ADDR_IMM, 2, 2);\r\n  this.setOp(this.INS_SKB, 0xe2, this.ADDR_IMM, 2, 2);\r\n\r\n  // SKB:\r\n  this.setOp(this.INS_IGN, 0x0c, this.ADDR_ABS, 3, 4);\r\n  this.setOp(this.INS_IGN, 0x1c, this.ADDR_ABSX, 3, 4);\r\n  this.setOp(this.INS_IGN, 0x3c, this.ADDR_ABSX, 3, 4);\r\n  this.setOp(this.INS_IGN, 0x5c, this.ADDR_ABSX, 3, 4);\r\n  this.setOp(this.INS_IGN, 0x7c, this.ADDR_ABSX, 3, 4);\r\n  this.setOp(this.INS_IGN, 0xdc, this.ADDR_ABSX, 3, 4);\r\n  this.setOp(this.INS_IGN, 0xfc, this.ADDR_ABSX, 3, 4);\r\n  this.setOp(this.INS_IGN, 0x04, this.ADDR_ZP, 2, 3);\r\n  this.setOp(this.INS_IGN, 0x44, this.ADDR_ZP, 2, 3);\r\n  this.setOp(this.INS_IGN, 0x64, this.ADDR_ZP, 2, 3);\r\n  this.setOp(this.INS_IGN, 0x14, this.ADDR_ZPX, 2, 4);\r\n  this.setOp(this.INS_IGN, 0x34, this.ADDR_ZPX, 2, 4);\r\n  this.setOp(this.INS_IGN, 0x54, this.ADDR_ZPX, 2, 4);\r\n  this.setOp(this.INS_IGN, 0x74, this.ADDR_ZPX, 2, 4);\r\n  this.setOp(this.INS_IGN, 0xd4, this.ADDR_ZPX, 2, 4);\r\n  this.setOp(this.INS_IGN, 0xf4, this.ADDR_ZPX, 2, 4);\r\n\r\n  // prettier-ignore\r\n  this.cycTable = new Array(\r\n    /*0x00*/ 7,6,2,8,3,3,5,5,3,2,2,2,4,4,6,6,\r\n    /*0x10*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\r\n    /*0x20*/ 6,6,2,8,3,3,5,5,4,2,2,2,4,4,6,6,\r\n    /*0x30*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\r\n    /*0x40*/ 6,6,2,8,3,3,5,5,3,2,2,2,3,4,6,6,\r\n    /*0x50*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\r\n    /*0x60*/ 6,6,2,8,3,3,5,5,4,2,2,2,5,4,6,6,\r\n    /*0x70*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\r\n    /*0x80*/ 2,6,2,6,3,3,3,3,2,2,2,2,4,4,4,4,\r\n    /*0x90*/ 2,6,2,6,4,4,4,4,2,5,2,5,5,5,5,5,\r\n    /*0xA0*/ 2,6,2,6,3,3,3,3,2,2,2,2,4,4,4,4,\r\n    /*0xB0*/ 2,5,2,5,4,4,4,4,2,4,2,4,4,4,4,4,\r\n    /*0xC0*/ 2,6,2,8,3,3,5,5,2,2,2,2,4,4,6,6,\r\n    /*0xD0*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\r\n    /*0xE0*/ 2,6,3,8,3,3,5,5,2,2,2,2,4,4,6,6,\r\n    /*0xF0*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7\r\n  );\r\n\r\n  this.instname = new Array(70);\r\n\r\n  // Instruction Names:\r\n  this.instname[0] = \"ADC\";\r\n  this.instname[1] = \"AND\";\r\n  this.instname[2] = \"ASL\";\r\n  this.instname[3] = \"BCC\";\r\n  this.instname[4] = \"BCS\";\r\n  this.instname[5] = \"BEQ\";\r\n  this.instname[6] = \"BIT\";\r\n  this.instname[7] = \"BMI\";\r\n  this.instname[8] = \"BNE\";\r\n  this.instname[9] = \"BPL\";\r\n  this.instname[10] = \"BRK\";\r\n  this.instname[11] = \"BVC\";\r\n  this.instname[12] = \"BVS\";\r\n  this.instname[13] = \"CLC\";\r\n  this.instname[14] = \"CLD\";\r\n  this.instname[15] = \"CLI\";\r\n  this.instname[16] = \"CLV\";\r\n  this.instname[17] = \"CMP\";\r\n  this.instname[18] = \"CPX\";\r\n  this.instname[19] = \"CPY\";\r\n  this.instname[20] = \"DEC\";\r\n  this.instname[21] = \"DEX\";\r\n  this.instname[22] = \"DEY\";\r\n  this.instname[23] = \"EOR\";\r\n  this.instname[24] = \"INC\";\r\n  this.instname[25] = \"INX\";\r\n  this.instname[26] = \"INY\";\r\n  this.instname[27] = \"JMP\";\r\n  this.instname[28] = \"JSR\";\r\n  this.instname[29] = \"LDA\";\r\n  this.instname[30] = \"LDX\";\r\n  this.instname[31] = \"LDY\";\r\n  this.instname[32] = \"LSR\";\r\n  this.instname[33] = \"NOP\";\r\n  this.instname[34] = \"ORA\";\r\n  this.instname[35] = \"PHA\";\r\n  this.instname[36] = \"PHP\";\r\n  this.instname[37] = \"PLA\";\r\n  this.instname[38] = \"PLP\";\r\n  this.instname[39] = \"ROL\";\r\n  this.instname[40] = \"ROR\";\r\n  this.instname[41] = \"RTI\";\r\n  this.instname[42] = \"RTS\";\r\n  this.instname[43] = \"SBC\";\r\n  this.instname[44] = \"SEC\";\r\n  this.instname[45] = \"SED\";\r\n  this.instname[46] = \"SEI\";\r\n  this.instname[47] = \"STA\";\r\n  this.instname[48] = \"STX\";\r\n  this.instname[49] = \"STY\";\r\n  this.instname[50] = \"TAX\";\r\n  this.instname[51] = \"TAY\";\r\n  this.instname[52] = \"TSX\";\r\n  this.instname[53] = \"TXA\";\r\n  this.instname[54] = \"TXS\";\r\n  this.instname[55] = \"TYA\";\r\n  this.instname[56] = \"ALR\";\r\n  this.instname[57] = \"ANC\";\r\n  this.instname[58] = \"ARR\";\r\n  this.instname[59] = \"AXS\";\r\n  this.instname[60] = \"LAX\";\r\n  this.instname[61] = \"SAX\";\r\n  this.instname[62] = \"DCP\";\r\n  this.instname[63] = \"ISC\";\r\n  this.instname[64] = \"RLA\";\r\n  this.instname[65] = \"RRA\";\r\n  this.instname[66] = \"SLO\";\r\n  this.instname[67] = \"SRE\";\r\n  this.instname[68] = \"SKB\";\r\n  this.instname[69] = \"IGN\";\r\n\r\n  this.addrDesc = new Array(\r\n    \"Zero Page           \",\r\n    \"Relative            \",\r\n    \"Implied             \",\r\n    \"Absolute            \",\r\n    \"Accumulator         \",\r\n    \"Immediate           \",\r\n    \"Zero Page,X         \",\r\n    \"Zero Page,Y         \",\r\n    \"Absolute,X          \",\r\n    \"Absolute,Y          \",\r\n    \"Preindexed Indirect \",\r\n    \"Postindexed Indirect\",\r\n    \"Indirect Absolute   \"\r\n  );\r\n};\r\n\r\nOpData.prototype = {\r\n  INS_ADC: 0,\r\n  INS_AND: 1,\r\n  INS_ASL: 2,\r\n\r\n  INS_BCC: 3,\r\n  INS_BCS: 4,\r\n  INS_BEQ: 5,\r\n  INS_BIT: 6,\r\n  INS_BMI: 7,\r\n  INS_BNE: 8,\r\n  INS_BPL: 9,\r\n  INS_BRK: 10,\r\n  INS_BVC: 11,\r\n  INS_BVS: 12,\r\n\r\n  INS_CLC: 13,\r\n  INS_CLD: 14,\r\n  INS_CLI: 15,\r\n  INS_CLV: 16,\r\n  INS_CMP: 17,\r\n  INS_CPX: 18,\r\n  INS_CPY: 19,\r\n\r\n  INS_DEC: 20,\r\n  INS_DEX: 21,\r\n  INS_DEY: 22,\r\n\r\n  INS_EOR: 23,\r\n\r\n  INS_INC: 24,\r\n  INS_INX: 25,\r\n  INS_INY: 26,\r\n\r\n  INS_JMP: 27,\r\n  INS_JSR: 28,\r\n\r\n  INS_LDA: 29,\r\n  INS_LDX: 30,\r\n  INS_LDY: 31,\r\n  INS_LSR: 32,\r\n\r\n  INS_NOP: 33,\r\n\r\n  INS_ORA: 34,\r\n\r\n  INS_PHA: 35,\r\n  INS_PHP: 36,\r\n  INS_PLA: 37,\r\n  INS_PLP: 38,\r\n\r\n  INS_ROL: 39,\r\n  INS_ROR: 40,\r\n  INS_RTI: 41,\r\n  INS_RTS: 42,\r\n\r\n  INS_SBC: 43,\r\n  INS_SEC: 44,\r\n  INS_SED: 45,\r\n  INS_SEI: 46,\r\n  INS_STA: 47,\r\n  INS_STX: 48,\r\n  INS_STY: 49,\r\n\r\n  INS_TAX: 50,\r\n  INS_TAY: 51,\r\n  INS_TSX: 52,\r\n  INS_TXA: 53,\r\n  INS_TXS: 54,\r\n  INS_TYA: 55,\r\n\r\n  INS_ALR: 56,\r\n  INS_ANC: 57,\r\n  INS_ARR: 58,\r\n  INS_AXS: 59,\r\n  INS_LAX: 60,\r\n  INS_SAX: 61,\r\n  INS_DCP: 62,\r\n  INS_ISC: 63,\r\n  INS_RLA: 64,\r\n  INS_RRA: 65,\r\n  INS_SLO: 66,\r\n  INS_SRE: 67,\r\n  INS_SKB: 68,\r\n  INS_IGN: 69,\r\n\r\n  INS_DUMMY: 70, // dummy instruction used for 'halting' the processor some cycles\r\n\r\n  // -------------------------------- //\r\n\r\n  // Addressing modes:\r\n  ADDR_ZP: 0,\r\n  ADDR_REL: 1,\r\n  ADDR_IMP: 2,\r\n  ADDR_ABS: 3,\r\n  ADDR_ACC: 4,\r\n  ADDR_IMM: 5,\r\n  ADDR_ZPX: 6,\r\n  ADDR_ZPY: 7,\r\n  ADDR_ABSX: 8,\r\n  ADDR_ABSY: 9,\r\n  ADDR_PREIDXIND: 10,\r\n  ADDR_POSTIDXIND: 11,\r\n  ADDR_INDABS: 12,\r\n\r\n  setOp: function (inst, op, addr, size, cycles) {\r\n    this.opdata[op] =\r\n      (inst & 0xff) |\r\n      ((addr & 0xff) << 8) |\r\n      ((size & 0xff) << 16) |\r\n      ((cycles & 0xff) << 24);\r\n  },\r\n};\r\n\r\nmodule.exports = CPU;\r\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Tile = __webpack_require__(2);\r\nvar utils = __webpack_require__(0);\r\n\r\nvar PPU = function (nes) {\r\n  this.nes = nes;\r\n\r\n  // Keep Chrome happy\r\n  this.vramMem = null;\r\n  this.spriteMem = null;\r\n  this.vramAddress = null;\r\n  this.vramTmpAddress = null;\r\n  this.vramBufferedReadValue = null;\r\n  this.firstWrite = null;\r\n  this.sramAddress = null;\r\n  this.currentMirroring = null;\r\n  this.requestEndFrame = null;\r\n  this.nmiOk = null;\r\n  this.dummyCycleToggle = null;\r\n  this.validTileData = null;\r\n  this.nmiCounter = null;\r\n  this.scanlineAlreadyRendered = null;\r\n  this.f_nmiOnVblank = null;\r\n  this.f_spriteSize = null;\r\n  this.f_bgPatternTable = null;\r\n  this.f_spPatternTable = null;\r\n  this.f_addrInc = null;\r\n  this.f_nTblAddress = null;\r\n  this.f_color = null;\r\n  this.f_spVisibility = null;\r\n  this.f_bgVisibility = null;\r\n  this.f_spClipping = null;\r\n  this.f_bgClipping = null;\r\n  this.f_dispType = null;\r\n  this.cntFV = null;\r\n  this.cntV = null;\r\n  this.cntH = null;\r\n  this.cntVT = null;\r\n  this.cntHT = null;\r\n  this.regFV = null;\r\n  this.regV = null;\r\n  this.regH = null;\r\n  this.regVT = null;\r\n  this.regHT = null;\r\n  this.regFH = null;\r\n  this.regS = null;\r\n  this.curNt = null;\r\n  this.attrib = null;\r\n  this.buffer = null;\r\n  this.bgbuffer = null;\r\n  this.pixrendered = null;\r\n\r\n  this.validTileData = null;\r\n  this.scantile = null;\r\n  this.scanline = null;\r\n  this.lastRenderedScanline = null;\r\n  this.curX = null;\r\n  this.sprX = null;\r\n  this.sprY = null;\r\n  this.sprTile = null;\r\n  this.sprCol = null;\r\n  this.vertFlip = null;\r\n  this.horiFlip = null;\r\n  this.bgPriority = null;\r\n  this.spr0HitX = null;\r\n  this.spr0HitY = null;\r\n  this.hitSpr0 = null;\r\n  this.sprPalette = null;\r\n  this.imgPalette = null;\r\n  this.ptTile = null;\r\n  this.ntable1 = null;\r\n  this.currentMirroring = null;\r\n  this.nameTable = null;\r\n  this.vramMirrorTable = null;\r\n  this.palTable = null;\r\n\r\n  // Rendering Options:\r\n  this.showSpr0Hit = false;\r\n  this.clipToTvSize = true;\r\n\r\n  this.reset();\r\n};\r\n\r\nPPU.prototype = {\r\n  // Status flags:\r\n  STATUS_VRAMWRITE: 4,\r\n  STATUS_SLSPRITECOUNT: 5,\r\n  STATUS_SPRITE0HIT: 6,\r\n  STATUS_VBLANK: 7,\r\n\r\n  reset: function () {\r\n    var i;\r\n\r\n    // Memory\r\n    this.vramMem = new Array(0x8000);\r\n    this.spriteMem = new Array(0x100);\r\n    for (i = 0; i < this.vramMem.length; i++) {\r\n      this.vramMem[i] = 0;\r\n    }\r\n    for (i = 0; i < this.spriteMem.length; i++) {\r\n      this.spriteMem[i] = 0;\r\n    }\r\n\r\n    // VRAM I/O:\r\n    this.vramAddress = null;\r\n    this.vramTmpAddress = null;\r\n    this.vramBufferedReadValue = 0;\r\n    this.firstWrite = true; // VRAM/Scroll Hi/Lo latch\r\n\r\n    // SPR-RAM I/O:\r\n    this.sramAddress = 0; // 8-bit only.\r\n\r\n    this.currentMirroring = -1;\r\n    this.requestEndFrame = false;\r\n    this.nmiOk = false;\r\n    this.dummyCycleToggle = false;\r\n    this.validTileData = false;\r\n    this.nmiCounter = 0;\r\n    this.scanlineAlreadyRendered = null;\r\n\r\n    // Control Flags Register 1:\r\n    this.f_nmiOnVblank = 0; // NMI on VBlank. 0=disable, 1=enable\r\n    this.f_spriteSize = 0; // Sprite size. 0=8x8, 1=8x16\r\n    this.f_bgPatternTable = 0; // Background Pattern Table address. 0=0x0000,1=0x1000\r\n    this.f_spPatternTable = 0; // Sprite Pattern Table address. 0=0x0000,1=0x1000\r\n    this.f_addrInc = 0; // PPU Address Increment. 0=1,1=32\r\n    this.f_nTblAddress = 0; // Name Table Address. 0=0x2000,1=0x2400,2=0x2800,3=0x2C00\r\n\r\n    // Control Flags Register 2:\r\n    this.f_color = 0; // Background color. 0=black, 1=blue, 2=green, 4=red\r\n    this.f_spVisibility = 0; // Sprite visibility. 0=not displayed,1=displayed\r\n    this.f_bgVisibility = 0; // Background visibility. 0=Not Displayed,1=displayed\r\n    this.f_spClipping = 0; // Sprite clipping. 0=Sprites invisible in left 8-pixel column,1=No clipping\r\n    this.f_bgClipping = 0; // Background clipping. 0=BG invisible in left 8-pixel column, 1=No clipping\r\n    this.f_dispType = 0; // Display type. 0=color, 1=monochrome\r\n\r\n    // Counters:\r\n    this.cntFV = 0;\r\n    this.cntV = 0;\r\n    this.cntH = 0;\r\n    this.cntVT = 0;\r\n    this.cntHT = 0;\r\n\r\n    // Registers:\r\n    this.regFV = 0;\r\n    this.regV = 0;\r\n    this.regH = 0;\r\n    this.regVT = 0;\r\n    this.regHT = 0;\r\n    this.regFH = 0;\r\n    this.regS = 0;\r\n\r\n    // These are temporary variables used in rendering and sound procedures.\r\n    // Their states outside of those procedures can be ignored.\r\n    // TODO: the use of this is a bit weird, investigate\r\n    this.curNt = null;\r\n\r\n    // Variables used when rendering:\r\n    this.attrib = new Array(32);\r\n    this.buffer = new Array(256 * 240);\r\n    this.bgbuffer = new Array(256 * 240);\r\n    this.pixrendered = new Array(256 * 240);\r\n\r\n    this.validTileData = null;\r\n\r\n    this.scantile = new Array(32);\r\n\r\n    // Initialize misc vars:\r\n    this.scanline = 0;\r\n    this.lastRenderedScanline = -1;\r\n    this.curX = 0;\r\n\r\n    // Sprite data:\r\n    this.sprX = new Array(64); // X coordinate\r\n    this.sprY = new Array(64); // Y coordinate\r\n    this.sprTile = new Array(64); // Tile Index (into pattern table)\r\n    this.sprCol = new Array(64); // Upper two bits of color\r\n    this.vertFlip = new Array(64); // Vertical Flip\r\n    this.horiFlip = new Array(64); // Horizontal Flip\r\n    this.bgPriority = new Array(64); // Background priority\r\n    this.spr0HitX = 0; // Sprite #0 hit X coordinate\r\n    this.spr0HitY = 0; // Sprite #0 hit Y coordinate\r\n    this.hitSpr0 = false;\r\n\r\n    // Palette data:\r\n    this.sprPalette = new Array(16);\r\n    this.imgPalette = new Array(16);\r\n\r\n    // Create pattern table tile buffers:\r\n    this.ptTile = new Array(512);\r\n    for (i = 0; i < 512; i++) {\r\n      this.ptTile[i] = new Tile();\r\n    }\r\n\r\n    // Create nametable buffers:\r\n    // Name table data:\r\n    this.ntable1 = new Array(4);\r\n    this.currentMirroring = -1;\r\n    this.nameTable = new Array(4);\r\n    for (i = 0; i < 4; i++) {\r\n      this.nameTable[i] = new NameTable(32, 32, \"Nt\" + i);\r\n    }\r\n\r\n    // Initialize mirroring lookup table:\r\n    this.vramMirrorTable = new Array(0x8000);\r\n    for (i = 0; i < 0x8000; i++) {\r\n      this.vramMirrorTable[i] = i;\r\n    }\r\n\r\n    this.palTable = new PaletteTable();\r\n    this.palTable.loadNTSCPalette();\r\n    //this.palTable.loadDefaultPalette();\r\n\r\n    this.updateControlReg1(0);\r\n    this.updateControlReg2(0);\r\n  },\r\n\r\n  // Sets Nametable mirroring.\r\n  setMirroring: function (mirroring) {\r\n    if (mirroring === this.currentMirroring) {\r\n      return;\r\n    }\r\n\r\n    this.currentMirroring = mirroring;\r\n    this.triggerRendering();\r\n\r\n    // Remove mirroring:\r\n    if (this.vramMirrorTable === null) {\r\n      this.vramMirrorTable = new Array(0x8000);\r\n    }\r\n    for (var i = 0; i < 0x8000; i++) {\r\n      this.vramMirrorTable[i] = i;\r\n    }\r\n\r\n    // Palette mirroring:\r\n    this.defineMirrorRegion(0x3f20, 0x3f00, 0x20);\r\n    this.defineMirrorRegion(0x3f40, 0x3f00, 0x20);\r\n    this.defineMirrorRegion(0x3f80, 0x3f00, 0x20);\r\n    this.defineMirrorRegion(0x3fc0, 0x3f00, 0x20);\r\n\r\n    // Additional mirroring:\r\n    this.defineMirrorRegion(0x3000, 0x2000, 0xf00);\r\n    this.defineMirrorRegion(0x4000, 0x0000, 0x4000);\r\n\r\n    if (mirroring === this.nes.rom.HORIZONTAL_MIRRORING) {\r\n      // Horizontal mirroring.\r\n\r\n      this.ntable1[0] = 0;\r\n      this.ntable1[1] = 0;\r\n      this.ntable1[2] = 1;\r\n      this.ntable1[3] = 1;\r\n\r\n      this.defineMirrorRegion(0x2400, 0x2000, 0x400);\r\n      this.defineMirrorRegion(0x2c00, 0x2800, 0x400);\r\n    } else if (mirroring === this.nes.rom.VERTICAL_MIRRORING) {\r\n      // Vertical mirroring.\r\n\r\n      this.ntable1[0] = 0;\r\n      this.ntable1[1] = 1;\r\n      this.ntable1[2] = 0;\r\n      this.ntable1[3] = 1;\r\n\r\n      this.defineMirrorRegion(0x2800, 0x2000, 0x400);\r\n      this.defineMirrorRegion(0x2c00, 0x2400, 0x400);\r\n    } else if (mirroring === this.nes.rom.SINGLESCREEN_MIRRORING) {\r\n      // Single Screen mirroring\r\n\r\n      this.ntable1[0] = 0;\r\n      this.ntable1[1] = 0;\r\n      this.ntable1[2] = 0;\r\n      this.ntable1[3] = 0;\r\n\r\n      this.defineMirrorRegion(0x2400, 0x2000, 0x400);\r\n      this.defineMirrorRegion(0x2800, 0x2000, 0x400);\r\n      this.defineMirrorRegion(0x2c00, 0x2000, 0x400);\r\n    } else if (mirroring === this.nes.rom.SINGLESCREEN_MIRRORING2) {\r\n      this.ntable1[0] = 1;\r\n      this.ntable1[1] = 1;\r\n      this.ntable1[2] = 1;\r\n      this.ntable1[3] = 1;\r\n\r\n      this.defineMirrorRegion(0x2400, 0x2400, 0x400);\r\n      this.defineMirrorRegion(0x2800, 0x2400, 0x400);\r\n      this.defineMirrorRegion(0x2c00, 0x2400, 0x400);\r\n    } else {\r\n      // Assume Four-screen mirroring.\r\n\r\n      this.ntable1[0] = 0;\r\n      this.ntable1[1] = 1;\r\n      this.ntable1[2] = 2;\r\n      this.ntable1[3] = 3;\r\n    }\r\n  },\r\n\r\n  // Define a mirrored area in the address lookup table.\r\n  // Assumes the regions don't overlap.\r\n  // The 'to' region is the region that is physically in memory.\r\n  defineMirrorRegion: function (fromStart, toStart, size) {\r\n    for (var i = 0; i < size; i++) {\r\n      this.vramMirrorTable[fromStart + i] = toStart + i;\r\n    }\r\n  },\r\n\r\n  startVBlank: function () {\r\n    // Do NMI:\r\n    this.nes.cpu.requestIrq(this.nes.cpu.IRQ_NMI);\r\n\r\n    // Make sure everything is rendered:\r\n    if (this.lastRenderedScanline < 239) {\r\n      this.renderFramePartially(\r\n        this.lastRenderedScanline + 1,\r\n        240 - this.lastRenderedScanline\r\n      );\r\n    }\r\n\r\n    // End frame:\r\n    this.endFrame();\r\n\r\n    // Reset scanline counter:\r\n    this.lastRenderedScanline = -1;\r\n  },\r\n\r\n  endScanline: function () {\r\n    switch (this.scanline) {\r\n      case 19:\r\n        // Dummy scanline.\r\n        // May be variable length:\r\n        if (this.dummyCycleToggle) {\r\n          // Remove dead cycle at end of scanline,\r\n          // for next scanline:\r\n          this.curX = 1;\r\n          this.dummyCycleToggle = !this.dummyCycleToggle;\r\n        }\r\n        break;\r\n\r\n      case 20:\r\n        // Clear VBlank flag:\r\n        this.setStatusFlag(this.STATUS_VBLANK, false);\r\n\r\n        // Clear Sprite #0 hit flag:\r\n        this.setStatusFlag(this.STATUS_SPRITE0HIT, false);\r\n        this.hitSpr0 = false;\r\n        this.spr0HitX = -1;\r\n        this.spr0HitY = -1;\r\n\r\n        if (this.f_bgVisibility === 1 || this.f_spVisibility === 1) {\r\n          // Update counters:\r\n          this.cntFV = this.regFV;\r\n          this.cntV = this.regV;\r\n          this.cntH = this.regH;\r\n          this.cntVT = this.regVT;\r\n          this.cntHT = this.regHT;\r\n\r\n          if (this.f_bgVisibility === 1) {\r\n            // Render dummy scanline:\r\n            this.renderBgScanline(false, 0);\r\n          }\r\n        }\r\n\r\n        if (this.f_bgVisibility === 1 && this.f_spVisibility === 1) {\r\n          // Check sprite 0 hit for first scanline:\r\n          this.checkSprite0(0);\r\n        }\r\n\r\n        if (this.f_bgVisibility === 1 || this.f_spVisibility === 1) {\r\n          // Clock mapper IRQ Counter:\r\n          this.nes.mmap.clockIrqCounter();\r\n        }\r\n        break;\r\n\r\n      case 261:\r\n        // Dead scanline, no rendering.\r\n        // Set VINT:\r\n        this.setStatusFlag(this.STATUS_VBLANK, true);\r\n        this.requestEndFrame = true;\r\n        this.nmiCounter = 9;\r\n\r\n        // Wrap around:\r\n        this.scanline = -1; // will be incremented to 0\r\n\r\n        break;\r\n\r\n      default:\r\n        if (this.scanline >= 21 && this.scanline <= 260) {\r\n          // Render normally:\r\n          if (this.f_bgVisibility === 1) {\r\n            if (!this.scanlineAlreadyRendered) {\r\n              // update scroll:\r\n              this.cntHT = this.regHT;\r\n              this.cntH = this.regH;\r\n              this.renderBgScanline(true, this.scanline + 1 - 21);\r\n            }\r\n            this.scanlineAlreadyRendered = false;\r\n\r\n            // Check for sprite 0 (next scanline):\r\n            if (!this.hitSpr0 && this.f_spVisibility === 1) {\r\n              if (\r\n                this.sprX[0] >= -7 &&\r\n                this.sprX[0] < 256 &&\r\n                this.sprY[0] + 1 <= this.scanline - 20 &&\r\n                this.sprY[0] + 1 + (this.f_spriteSize === 0 ? 8 : 16) >=\r\n                  this.scanline - 20\r\n              ) {\r\n                if (this.checkSprite0(this.scanline - 20)) {\r\n                  this.hitSpr0 = true;\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          if (this.f_bgVisibility === 1 || this.f_spVisibility === 1) {\r\n            // Clock mapper IRQ Counter:\r\n            this.nes.mmap.clockIrqCounter();\r\n          }\r\n        }\r\n    }\r\n\r\n    this.scanline++;\r\n    this.regsToAddress();\r\n    this.cntsToAddress();\r\n  },\r\n\r\n  startFrame: function () {\r\n    // Set background color:\r\n    var bgColor = 0;\r\n\r\n    if (this.f_dispType === 0) {\r\n      // Color display.\r\n      // f_color determines color emphasis.\r\n      // Use first entry of image palette as BG color.\r\n      bgColor = this.imgPalette[0];\r\n    } else {\r\n      // Monochrome display.\r\n      // f_color determines the bg color.\r\n      switch (this.f_color) {\r\n        case 0:\r\n          // Black\r\n          bgColor = 0x00000;\r\n          break;\r\n        case 1:\r\n          // Green\r\n          bgColor = 0x00ff00;\r\n          break;\r\n        case 2:\r\n          // Blue\r\n          bgColor = 0xff0000;\r\n          break;\r\n        case 3:\r\n          // Invalid. Use black.\r\n          bgColor = 0x000000;\r\n          break;\r\n        case 4:\r\n          // Red\r\n          bgColor = 0x0000ff;\r\n          break;\r\n        default:\r\n          // Invalid. Use black.\r\n          bgColor = 0x0;\r\n      }\r\n    }\r\n\r\n    var buffer = this.buffer;\r\n    var i;\r\n    for (i = 0; i < 256 * 240; i++) {\r\n      buffer[i] = bgColor;\r\n    }\r\n    var pixrendered = this.pixrendered;\r\n    for (i = 0; i < pixrendered.length; i++) {\r\n      pixrendered[i] = 65;\r\n    }\r\n  },\r\n\r\n  endFrame: function () {\r\n    var i, x, y;\r\n    var buffer = this.buffer;\r\n\r\n    // Draw spr#0 hit coordinates:\r\n    if (this.showSpr0Hit) {\r\n      // Spr 0 position:\r\n      if (\r\n        this.sprX[0] >= 0 &&\r\n        this.sprX[0] < 256 &&\r\n        this.sprY[0] >= 0 &&\r\n        this.sprY[0] < 240\r\n      ) {\r\n        for (i = 0; i < 256; i++) {\r\n          buffer[(this.sprY[0] << 8) + i] = 0xff5555;\r\n        }\r\n        for (i = 0; i < 240; i++) {\r\n          buffer[(i << 8) + this.sprX[0]] = 0xff5555;\r\n        }\r\n      }\r\n      // Hit position:\r\n      if (\r\n        this.spr0HitX >= 0 &&\r\n        this.spr0HitX < 256 &&\r\n        this.spr0HitY >= 0 &&\r\n        this.spr0HitY < 240\r\n      ) {\r\n        for (i = 0; i < 256; i++) {\r\n          buffer[(this.spr0HitY << 8) + i] = 0x55ff55;\r\n        }\r\n        for (i = 0; i < 240; i++) {\r\n          buffer[(i << 8) + this.spr0HitX] = 0x55ff55;\r\n        }\r\n      }\r\n    }\r\n\r\n    // This is a bit lazy..\r\n    // if either the sprites or the background should be clipped,\r\n    // both are clipped after rendering is finished.\r\n    if (\r\n      this.clipToTvSize ||\r\n      this.f_bgClipping === 0 ||\r\n      this.f_spClipping === 0\r\n    ) {\r\n      // Clip left 8-pixels column:\r\n      for (y = 0; y < 240; y++) {\r\n        for (x = 0; x < 8; x++) {\r\n          buffer[(y << 8) + x] = 0;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.clipToTvSize) {\r\n      // Clip right 8-pixels column too:\r\n      for (y = 0; y < 240; y++) {\r\n        for (x = 0; x < 8; x++) {\r\n          buffer[(y << 8) + 255 - x] = 0;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Clip top and bottom 8 pixels:\r\n    if (this.clipToTvSize) {\r\n      for (y = 0; y < 8; y++) {\r\n        for (x = 0; x < 256; x++) {\r\n          buffer[(y << 8) + x] = 0;\r\n          buffer[((239 - y) << 8) + x] = 0;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.nes.ui.writeFrame(buffer);\r\n  },\r\n\r\n  updateControlReg1: function (value) {\r\n    this.triggerRendering();\r\n\r\n    this.f_nmiOnVblank = (value >> 7) & 1;\r\n    this.f_spriteSize = (value >> 5) & 1;\r\n    this.f_bgPatternTable = (value >> 4) & 1;\r\n    this.f_spPatternTable = (value >> 3) & 1;\r\n    this.f_addrInc = (value >> 2) & 1;\r\n    this.f_nTblAddress = value & 3;\r\n\r\n    this.regV = (value >> 1) & 1;\r\n    this.regH = value & 1;\r\n    this.regS = (value >> 4) & 1;\r\n  },\r\n\r\n  updateControlReg2: function (value) {\r\n    this.triggerRendering();\r\n\r\n    this.f_color = (value >> 5) & 7;\r\n    this.f_spVisibility = (value >> 4) & 1;\r\n    this.f_bgVisibility = (value >> 3) & 1;\r\n    this.f_spClipping = (value >> 2) & 1;\r\n    this.f_bgClipping = (value >> 1) & 1;\r\n    this.f_dispType = value & 1;\r\n\r\n    if (this.f_dispType === 0) {\r\n      this.palTable.setEmphasis(this.f_color);\r\n    }\r\n    this.updatePalettes();\r\n  },\r\n\r\n  setStatusFlag: function (flag, value) {\r\n    var n = 1 << flag;\r\n    this.nes.cpu.mem[0x2002] =\r\n      (this.nes.cpu.mem[0x2002] & (255 - n)) | (value ? n : 0);\r\n  },\r\n\r\n  // CPU Register $2002:\r\n  // Read the Status Register.\r\n  readStatusRegister: function () {\r\n    var tmp = this.nes.cpu.mem[0x2002];\r\n\r\n    // Reset scroll & VRAM Address toggle:\r\n    this.firstWrite = true;\r\n\r\n    // Clear VBlank flag:\r\n    this.setStatusFlag(this.STATUS_VBLANK, false);\r\n\r\n    // Fetch status data:\r\n    return tmp;\r\n  },\r\n\r\n  // CPU Register $2003:\r\n  // Write the SPR-RAM address that is used for sramWrite (Register 0x2004 in CPU memory map)\r\n  writeSRAMAddress: function (address) {\r\n    this.sramAddress = address;\r\n  },\r\n\r\n  // CPU Register $2004 (R):\r\n  // Read from SPR-RAM (Sprite RAM).\r\n  // The address should be set first.\r\n  sramLoad: function () {\r\n    /*short tmp = sprMem.load(sramAddress);\r\n        sramAddress++; // Increment address\r\n        sramAddress%=0x100;\r\n        return tmp;*/\r\n    return this.spriteMem[this.sramAddress];\r\n  },\r\n\r\n  // CPU Register $2004 (W):\r\n  // Write to SPR-RAM (Sprite RAM).\r\n  // The address should be set first.\r\n  sramWrite: function (value) {\r\n    this.spriteMem[this.sramAddress] = value;\r\n    this.spriteRamWriteUpdate(this.sramAddress, value);\r\n    this.sramAddress++; // Increment address\r\n    this.sramAddress %= 0x100;\r\n  },\r\n\r\n  // CPU Register $2005:\r\n  // Write to scroll registers.\r\n  // The first write is the vertical offset, the second is the\r\n  // horizontal offset:\r\n  scrollWrite: function (value) {\r\n    this.triggerRendering();\r\n\r\n    if (this.firstWrite) {\r\n      // First write, horizontal scroll:\r\n      this.regHT = (value >> 3) & 31;\r\n      this.regFH = value & 7;\r\n    } else {\r\n      // Second write, vertical scroll:\r\n      this.regFV = value & 7;\r\n      this.regVT = (value >> 3) & 31;\r\n    }\r\n    this.firstWrite = !this.firstWrite;\r\n  },\r\n\r\n  // CPU Register $2006:\r\n  // Sets the adress used when reading/writing from/to VRAM.\r\n  // The first write sets the high byte, the second the low byte.\r\n  writeVRAMAddress: function (address) {\r\n    if (this.firstWrite) {\r\n      this.regFV = (address >> 4) & 3;\r\n      this.regV = (address >> 3) & 1;\r\n      this.regH = (address >> 2) & 1;\r\n      this.regVT = (this.regVT & 7) | ((address & 3) << 3);\r\n    } else {\r\n      this.triggerRendering();\r\n\r\n      this.regVT = (this.regVT & 24) | ((address >> 5) & 7);\r\n      this.regHT = address & 31;\r\n\r\n      this.cntFV = this.regFV;\r\n      this.cntV = this.regV;\r\n      this.cntH = this.regH;\r\n      this.cntVT = this.regVT;\r\n      this.cntHT = this.regHT;\r\n\r\n      this.checkSprite0(this.scanline - 20);\r\n    }\r\n\r\n    this.firstWrite = !this.firstWrite;\r\n\r\n    // Invoke mapper latch:\r\n    this.cntsToAddress();\r\n    if (this.vramAddress < 0x2000) {\r\n      this.nes.mmap.latchAccess(this.vramAddress);\r\n    }\r\n  },\r\n\r\n  // CPU Register $2007(R):\r\n  // Read from PPU memory. The address should be set first.\r\n  vramLoad: function () {\r\n    var tmp;\r\n\r\n    this.cntsToAddress();\r\n    this.regsToAddress();\r\n\r\n    // If address is in range 0x0000-0x3EFF, return buffered values:\r\n    if (this.vramAddress <= 0x3eff) {\r\n      tmp = this.vramBufferedReadValue;\r\n\r\n      // Update buffered value:\r\n      if (this.vramAddress < 0x2000) {\r\n        this.vramBufferedReadValue = this.vramMem[this.vramAddress];\r\n      } else {\r\n        this.vramBufferedReadValue = this.mirroredLoad(this.vramAddress);\r\n      }\r\n\r\n      // Mapper latch access:\r\n      if (this.vramAddress < 0x2000) {\r\n        this.nes.mmap.latchAccess(this.vramAddress);\r\n      }\r\n\r\n      // Increment by either 1 or 32, depending on d2 of Control Register 1:\r\n      this.vramAddress += this.f_addrInc === 1 ? 32 : 1;\r\n\r\n      this.cntsFromAddress();\r\n      this.regsFromAddress();\r\n\r\n      return tmp; // Return the previous buffered value.\r\n    }\r\n\r\n    // No buffering in this mem range. Read normally.\r\n    tmp = this.mirroredLoad(this.vramAddress);\r\n\r\n    // Increment by either 1 or 32, depending on d2 of Control Register 1:\r\n    this.vramAddress += this.f_addrInc === 1 ? 32 : 1;\r\n\r\n    this.cntsFromAddress();\r\n    this.regsFromAddress();\r\n\r\n    return tmp;\r\n  },\r\n\r\n  // CPU Register $2007(W):\r\n  // Write to PPU memory. The address should be set first.\r\n  vramWrite: function (value) {\r\n    this.triggerRendering();\r\n    this.cntsToAddress();\r\n    this.regsToAddress();\r\n\r\n    if (this.vramAddress >= 0x2000) {\r\n      // Mirroring is used.\r\n      this.mirroredWrite(this.vramAddress, value);\r\n    } else {\r\n      // Write normally.\r\n      this.writeMem(this.vramAddress, value);\r\n\r\n      // Invoke mapper latch:\r\n      this.nes.mmap.latchAccess(this.vramAddress);\r\n    }\r\n\r\n    // Increment by either 1 or 32, depending on d2 of Control Register 1:\r\n    this.vramAddress += this.f_addrInc === 1 ? 32 : 1;\r\n    this.regsFromAddress();\r\n    this.cntsFromAddress();\r\n  },\r\n\r\n  // CPU Register $4014:\r\n  // Write 256 bytes of main memory\r\n  // into Sprite RAM.\r\n  sramDMA: function (value) {\r\n    var baseAddress = value * 0x100;\r\n    var data;\r\n    for (var i = this.sramAddress; i < 256; i++) {\r\n      data = this.nes.cpu.mem[baseAddress + i];\r\n      this.spriteMem[i] = data;\r\n      this.spriteRamWriteUpdate(i, data);\r\n    }\r\n\r\n    this.nes.cpu.haltCycles(513);\r\n  },\r\n\r\n  // Updates the scroll registers from a new VRAM address.\r\n  regsFromAddress: function () {\r\n    var address = (this.vramTmpAddress >> 8) & 0xff;\r\n    this.regFV = (address >> 4) & 7;\r\n    this.regV = (address >> 3) & 1;\r\n    this.regH = (address >> 2) & 1;\r\n    this.regVT = (this.regVT & 7) | ((address & 3) << 3);\r\n\r\n    address = this.vramTmpAddress & 0xff;\r\n    this.regVT = (this.regVT & 24) | ((address >> 5) & 7);\r\n    this.regHT = address & 31;\r\n  },\r\n\r\n  // Updates the scroll registers from a new VRAM address.\r\n  cntsFromAddress: function () {\r\n    var address = (this.vramAddress >> 8) & 0xff;\r\n    this.cntFV = (address >> 4) & 3;\r\n    this.cntV = (address >> 3) & 1;\r\n    this.cntH = (address >> 2) & 1;\r\n    this.cntVT = (this.cntVT & 7) | ((address & 3) << 3);\r\n\r\n    address = this.vramAddress & 0xff;\r\n    this.cntVT = (this.cntVT & 24) | ((address >> 5) & 7);\r\n    this.cntHT = address & 31;\r\n  },\r\n\r\n  regsToAddress: function () {\r\n    var b1 = (this.regFV & 7) << 4;\r\n    b1 |= (this.regV & 1) << 3;\r\n    b1 |= (this.regH & 1) << 2;\r\n    b1 |= (this.regVT >> 3) & 3;\r\n\r\n    var b2 = (this.regVT & 7) << 5;\r\n    b2 |= this.regHT & 31;\r\n\r\n    this.vramTmpAddress = ((b1 << 8) | b2) & 0x7fff;\r\n  },\r\n\r\n  cntsToAddress: function () {\r\n    var b1 = (this.cntFV & 7) << 4;\r\n    b1 |= (this.cntV & 1) << 3;\r\n    b1 |= (this.cntH & 1) << 2;\r\n    b1 |= (this.cntVT >> 3) & 3;\r\n\r\n    var b2 = (this.cntVT & 7) << 5;\r\n    b2 |= this.cntHT & 31;\r\n\r\n    this.vramAddress = ((b1 << 8) | b2) & 0x7fff;\r\n  },\r\n\r\n  incTileCounter: function (count) {\r\n    for (var i = count; i !== 0; i--) {\r\n      this.cntHT++;\r\n      if (this.cntHT === 32) {\r\n        this.cntHT = 0;\r\n        this.cntVT++;\r\n        if (this.cntVT >= 30) {\r\n          this.cntH++;\r\n          if (this.cntH === 2) {\r\n            this.cntH = 0;\r\n            this.cntV++;\r\n            if (this.cntV === 2) {\r\n              this.cntV = 0;\r\n              this.cntFV++;\r\n              this.cntFV &= 0x7;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  // Reads from memory, taking into account\r\n  // mirroring/mapping of address ranges.\r\n  mirroredLoad: function (address) {\r\n    return this.vramMem[this.vramMirrorTable[address]];\r\n  },\r\n\r\n  // Writes to memory, taking into account\r\n  // mirroring/mapping of address ranges.\r\n  mirroredWrite: function (address, value) {\r\n    if (address >= 0x3f00 && address < 0x3f20) {\r\n      // Palette write mirroring.\r\n      if (address === 0x3f00 || address === 0x3f10) {\r\n        this.writeMem(0x3f00, value);\r\n        this.writeMem(0x3f10, value);\r\n      } else if (address === 0x3f04 || address === 0x3f14) {\r\n        this.writeMem(0x3f04, value);\r\n        this.writeMem(0x3f14, value);\r\n      } else if (address === 0x3f08 || address === 0x3f18) {\r\n        this.writeMem(0x3f08, value);\r\n        this.writeMem(0x3f18, value);\r\n      } else if (address === 0x3f0c || address === 0x3f1c) {\r\n        this.writeMem(0x3f0c, value);\r\n        this.writeMem(0x3f1c, value);\r\n      } else {\r\n        this.writeMem(address, value);\r\n      }\r\n    } else {\r\n      // Use lookup table for mirrored address:\r\n      if (address < this.vramMirrorTable.length) {\r\n        this.writeMem(this.vramMirrorTable[address], value);\r\n      } else {\r\n        throw new Error(\"Invalid VRAM address: \" + address.toString(16));\r\n      }\r\n    }\r\n  },\r\n\r\n  triggerRendering: function () {\r\n    if (this.scanline >= 21 && this.scanline <= 260) {\r\n      // Render sprites, and combine:\r\n      this.renderFramePartially(\r\n        this.lastRenderedScanline + 1,\r\n        this.scanline - 21 - this.lastRenderedScanline\r\n      );\r\n\r\n      // Set last rendered scanline:\r\n      this.lastRenderedScanline = this.scanline - 21;\r\n    }\r\n  },\r\n\r\n  renderFramePartially: function (startScan, scanCount) {\r\n    if (this.f_spVisibility === 1) {\r\n      this.renderSpritesPartially(startScan, scanCount, true);\r\n    }\r\n\r\n    if (this.f_bgVisibility === 1) {\r\n      var si = startScan << 8;\r\n      var ei = (startScan + scanCount) << 8;\r\n      if (ei > 0xf000) {\r\n        ei = 0xf000;\r\n      }\r\n      var buffer = this.buffer;\r\n      var bgbuffer = this.bgbuffer;\r\n      var pixrendered = this.pixrendered;\r\n      for (var destIndex = si; destIndex < ei; destIndex++) {\r\n        if (pixrendered[destIndex] > 0xff) {\r\n          buffer[destIndex] = bgbuffer[destIndex];\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.f_spVisibility === 1) {\r\n      this.renderSpritesPartially(startScan, scanCount, false);\r\n    }\r\n\r\n    this.validTileData = false;\r\n  },\r\n\r\n  renderBgScanline: function (bgbuffer, scan) {\r\n    var baseTile = this.regS === 0 ? 0 : 256;\r\n    var destIndex = (scan << 8) - this.regFH;\r\n\r\n    this.curNt = this.ntable1[this.cntV + this.cntV + this.cntH];\r\n\r\n    this.cntHT = this.regHT;\r\n    this.cntH = this.regH;\r\n    this.curNt = this.ntable1[this.cntV + this.cntV + this.cntH];\r\n\r\n    if (scan < 240 && scan - this.cntFV >= 0) {\r\n      var tscanoffset = this.cntFV << 3;\r\n      var scantile = this.scantile;\r\n      var attrib = this.attrib;\r\n      var ptTile = this.ptTile;\r\n      var nameTable = this.nameTable;\r\n      var imgPalette = this.imgPalette;\r\n      var pixrendered = this.pixrendered;\r\n      var targetBuffer = bgbuffer ? this.bgbuffer : this.buffer;\r\n\r\n      var t, tpix, att, col;\r\n\r\n      for (var tile = 0; tile < 32; tile++) {\r\n        if (scan >= 0) {\r\n          // Fetch tile & attrib data:\r\n          if (this.validTileData) {\r\n            // Get data from array:\r\n            t = scantile[tile];\r\n            if (typeof t === \"undefined\") {\r\n              continue;\r\n            }\r\n            tpix = t.pix;\r\n            att = attrib[tile];\r\n          } else {\r\n            // Fetch data:\r\n            t =\r\n              ptTile[\r\n                baseTile +\r\n                  nameTable[this.curNt].getTileIndex(this.cntHT, this.cntVT)\r\n              ];\r\n            if (typeof t === \"undefined\") {\r\n              continue;\r\n            }\r\n            tpix = t.pix;\r\n            att = nameTable[this.curNt].getAttrib(this.cntHT, this.cntVT);\r\n            scantile[tile] = t;\r\n            attrib[tile] = att;\r\n          }\r\n\r\n          // Render tile scanline:\r\n          var sx = 0;\r\n          var x = (tile << 3) - this.regFH;\r\n\r\n          if (x > -8) {\r\n            if (x < 0) {\r\n              destIndex -= x;\r\n              sx = -x;\r\n            }\r\n            if (t.opaque[this.cntFV]) {\r\n              for (; sx < 8; sx++) {\r\n                targetBuffer[destIndex] =\r\n                  imgPalette[tpix[tscanoffset + sx] + att];\r\n                pixrendered[destIndex] |= 256;\r\n                destIndex++;\r\n              }\r\n            } else {\r\n              for (; sx < 8; sx++) {\r\n                col = tpix[tscanoffset + sx];\r\n                if (col !== 0) {\r\n                  targetBuffer[destIndex] = imgPalette[col + att];\r\n                  pixrendered[destIndex] |= 256;\r\n                }\r\n                destIndex++;\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        // Increase Horizontal Tile Counter:\r\n        if (++this.cntHT === 32) {\r\n          this.cntHT = 0;\r\n          this.cntH++;\r\n          this.cntH %= 2;\r\n          this.curNt = this.ntable1[(this.cntV << 1) + this.cntH];\r\n        }\r\n      }\r\n\r\n      // Tile data for one row should now have been fetched,\r\n      // so the data in the array is valid.\r\n      this.validTileData = true;\r\n    }\r\n\r\n    // update vertical scroll:\r\n    this.cntFV++;\r\n    if (this.cntFV === 8) {\r\n      this.cntFV = 0;\r\n      this.cntVT++;\r\n      if (this.cntVT === 30) {\r\n        this.cntVT = 0;\r\n        this.cntV++;\r\n        this.cntV %= 2;\r\n        this.curNt = this.ntable1[(this.cntV << 1) + this.cntH];\r\n      } else if (this.cntVT === 32) {\r\n        this.cntVT = 0;\r\n      }\r\n\r\n      // Invalidate fetched data:\r\n      this.validTileData = false;\r\n    }\r\n  },\r\n\r\n  renderSpritesPartially: function (startscan, scancount, bgPri) {\r\n    if (this.f_spVisibility === 1) {\r\n      for (var i = 0; i < 64; i++) {\r\n        if (\r\n          this.bgPriority[i] === bgPri &&\r\n          this.sprX[i] >= 0 &&\r\n          this.sprX[i] < 256 &&\r\n          this.sprY[i] + 8 >= startscan &&\r\n          this.sprY[i] < startscan + scancount\r\n        ) {\r\n          // Show sprite.\r\n          if (this.f_spriteSize === 0) {\r\n            // 8x8 sprites\r\n\r\n            this.srcy1 = 0;\r\n            this.srcy2 = 8;\r\n\r\n            if (this.sprY[i] < startscan) {\r\n              this.srcy1 = startscan - this.sprY[i] - 1;\r\n            }\r\n\r\n            if (this.sprY[i] + 8 > startscan + scancount) {\r\n              this.srcy2 = startscan + scancount - this.sprY[i] + 1;\r\n            }\r\n\r\n            if (this.f_spPatternTable === 0) {\r\n              this.ptTile[this.sprTile[i]].render(\r\n                this.buffer,\r\n                0,\r\n                this.srcy1,\r\n                8,\r\n                this.srcy2,\r\n                this.sprX[i],\r\n                this.sprY[i] + 1,\r\n                this.sprCol[i],\r\n                this.sprPalette,\r\n                this.horiFlip[i],\r\n                this.vertFlip[i],\r\n                i,\r\n                this.pixrendered\r\n              );\r\n            } else {\r\n              this.ptTile[this.sprTile[i] + 256].render(\r\n                this.buffer,\r\n                0,\r\n                this.srcy1,\r\n                8,\r\n                this.srcy2,\r\n                this.sprX[i],\r\n                this.sprY[i] + 1,\r\n                this.sprCol[i],\r\n                this.sprPalette,\r\n                this.horiFlip[i],\r\n                this.vertFlip[i],\r\n                i,\r\n                this.pixrendered\r\n              );\r\n            }\r\n          } else {\r\n            // 8x16 sprites\r\n            var top = this.sprTile[i];\r\n            if ((top & 1) !== 0) {\r\n              top = this.sprTile[i] - 1 + 256;\r\n            }\r\n\r\n            var srcy1 = 0;\r\n            var srcy2 = 8;\r\n\r\n            if (this.sprY[i] < startscan) {\r\n              srcy1 = startscan - this.sprY[i] - 1;\r\n            }\r\n\r\n            if (this.sprY[i] + 8 > startscan + scancount) {\r\n              srcy2 = startscan + scancount - this.sprY[i];\r\n            }\r\n\r\n            this.ptTile[top + (this.vertFlip[i] ? 1 : 0)].render(\r\n              this.buffer,\r\n              0,\r\n              srcy1,\r\n              8,\r\n              srcy2,\r\n              this.sprX[i],\r\n              this.sprY[i] + 1,\r\n              this.sprCol[i],\r\n              this.sprPalette,\r\n              this.horiFlip[i],\r\n              this.vertFlip[i],\r\n              i,\r\n              this.pixrendered\r\n            );\r\n\r\n            srcy1 = 0;\r\n            srcy2 = 8;\r\n\r\n            if (this.sprY[i] + 8 < startscan) {\r\n              srcy1 = startscan - (this.sprY[i] + 8 + 1);\r\n            }\r\n\r\n            if (this.sprY[i] + 16 > startscan + scancount) {\r\n              srcy2 = startscan + scancount - (this.sprY[i] + 8);\r\n            }\r\n\r\n            this.ptTile[top + (this.vertFlip[i] ? 0 : 1)].render(\r\n              this.buffer,\r\n              0,\r\n              srcy1,\r\n              8,\r\n              srcy2,\r\n              this.sprX[i],\r\n              this.sprY[i] + 1 + 8,\r\n              this.sprCol[i],\r\n              this.sprPalette,\r\n              this.horiFlip[i],\r\n              this.vertFlip[i],\r\n              i,\r\n              this.pixrendered\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  checkSprite0: function (scan) {\r\n    this.spr0HitX = -1;\r\n    this.spr0HitY = -1;\r\n\r\n    var toffset;\r\n    var tIndexAdd = this.f_spPatternTable === 0 ? 0 : 256;\r\n    var x, y, t, i;\r\n    var bufferIndex;\r\n\r\n    x = this.sprX[0];\r\n    y = this.sprY[0] + 1;\r\n\r\n    if (this.f_spriteSize === 0) {\r\n      // 8x8 sprites.\r\n\r\n      // Check range:\r\n      if (y <= scan && y + 8 > scan && x >= -7 && x < 256) {\r\n        // Sprite is in range.\r\n        // Draw scanline:\r\n        t = this.ptTile[this.sprTile[0] + tIndexAdd];\r\n\r\n        if (this.vertFlip[0]) {\r\n          toffset = 7 - (scan - y);\r\n        } else {\r\n          toffset = scan - y;\r\n        }\r\n        toffset *= 8;\r\n\r\n        bufferIndex = scan * 256 + x;\r\n        if (this.horiFlip[0]) {\r\n          for (i = 7; i >= 0; i--) {\r\n            if (x >= 0 && x < 256) {\r\n              if (\r\n                bufferIndex >= 0 &&\r\n                bufferIndex < 61440 &&\r\n                this.pixrendered[bufferIndex] !== 0\r\n              ) {\r\n                if (t.pix[toffset + i] !== 0) {\r\n                  this.spr0HitX = bufferIndex % 256;\r\n                  this.spr0HitY = scan;\r\n                  return true;\r\n                }\r\n              }\r\n            }\r\n            x++;\r\n            bufferIndex++;\r\n          }\r\n        } else {\r\n          for (i = 0; i < 8; i++) {\r\n            if (x >= 0 && x < 256) {\r\n              if (\r\n                bufferIndex >= 0 &&\r\n                bufferIndex < 61440 &&\r\n                this.pixrendered[bufferIndex] !== 0\r\n              ) {\r\n                if (t.pix[toffset + i] !== 0) {\r\n                  this.spr0HitX = bufferIndex % 256;\r\n                  this.spr0HitY = scan;\r\n                  return true;\r\n                }\r\n              }\r\n            }\r\n            x++;\r\n            bufferIndex++;\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      // 8x16 sprites:\r\n\r\n      // Check range:\r\n      if (y <= scan && y + 16 > scan && x >= -7 && x < 256) {\r\n        // Sprite is in range.\r\n        // Draw scanline:\r\n\r\n        if (this.vertFlip[0]) {\r\n          toffset = 15 - (scan - y);\r\n        } else {\r\n          toffset = scan - y;\r\n        }\r\n\r\n        if (toffset < 8) {\r\n          // first half of sprite.\r\n          t = this.ptTile[\r\n            this.sprTile[0] +\r\n              (this.vertFlip[0] ? 1 : 0) +\r\n              ((this.sprTile[0] & 1) !== 0 ? 255 : 0)\r\n          ];\r\n        } else {\r\n          // second half of sprite.\r\n          t = this.ptTile[\r\n            this.sprTile[0] +\r\n              (this.vertFlip[0] ? 0 : 1) +\r\n              ((this.sprTile[0] & 1) !== 0 ? 255 : 0)\r\n          ];\r\n          if (this.vertFlip[0]) {\r\n            toffset = 15 - toffset;\r\n          } else {\r\n            toffset -= 8;\r\n          }\r\n        }\r\n        toffset *= 8;\r\n\r\n        bufferIndex = scan * 256 + x;\r\n        if (this.horiFlip[0]) {\r\n          for (i = 7; i >= 0; i--) {\r\n            if (x >= 0 && x < 256) {\r\n              if (\r\n                bufferIndex >= 0 &&\r\n                bufferIndex < 61440 &&\r\n                this.pixrendered[bufferIndex] !== 0\r\n              ) {\r\n                if (t.pix[toffset + i] !== 0) {\r\n                  this.spr0HitX = bufferIndex % 256;\r\n                  this.spr0HitY = scan;\r\n                  return true;\r\n                }\r\n              }\r\n            }\r\n            x++;\r\n            bufferIndex++;\r\n          }\r\n        } else {\r\n          for (i = 0; i < 8; i++) {\r\n            if (x >= 0 && x < 256) {\r\n              if (\r\n                bufferIndex >= 0 &&\r\n                bufferIndex < 61440 &&\r\n                this.pixrendered[bufferIndex] !== 0\r\n              ) {\r\n                if (t.pix[toffset + i] !== 0) {\r\n                  this.spr0HitX = bufferIndex % 256;\r\n                  this.spr0HitY = scan;\r\n                  return true;\r\n                }\r\n              }\r\n            }\r\n            x++;\r\n            bufferIndex++;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  },\r\n\r\n  // This will write to PPU memory, and\r\n  // update internally buffered data\r\n  // appropriately.\r\n  writeMem: function (address, value) {\r\n    this.vramMem[address] = value;\r\n\r\n    // Update internally buffered data:\r\n    if (address < 0x2000) {\r\n      this.vramMem[address] = value;\r\n      this.patternWrite(address, value);\r\n    } else if (address >= 0x2000 && address < 0x23c0) {\r\n      this.nameTableWrite(this.ntable1[0], address - 0x2000, value);\r\n    } else if (address >= 0x23c0 && address < 0x2400) {\r\n      this.attribTableWrite(this.ntable1[0], address - 0x23c0, value);\r\n    } else if (address >= 0x2400 && address < 0x27c0) {\r\n      this.nameTableWrite(this.ntable1[1], address - 0x2400, value);\r\n    } else if (address >= 0x27c0 && address < 0x2800) {\r\n      this.attribTableWrite(this.ntable1[1], address - 0x27c0, value);\r\n    } else if (address >= 0x2800 && address < 0x2bc0) {\r\n      this.nameTableWrite(this.ntable1[2], address - 0x2800, value);\r\n    } else if (address >= 0x2bc0 && address < 0x2c00) {\r\n      this.attribTableWrite(this.ntable1[2], address - 0x2bc0, value);\r\n    } else if (address >= 0x2c00 && address < 0x2fc0) {\r\n      this.nameTableWrite(this.ntable1[3], address - 0x2c00, value);\r\n    } else if (address >= 0x2fc0 && address < 0x3000) {\r\n      this.attribTableWrite(this.ntable1[3], address - 0x2fc0, value);\r\n    } else if (address >= 0x3f00 && address < 0x3f20) {\r\n      this.updatePalettes();\r\n    }\r\n  },\r\n\r\n  // Reads data from $3f00 to $f20\r\n  // into the two buffered palettes.\r\n  updatePalettes: function () {\r\n    var i;\r\n\r\n    for (i = 0; i < 16; i++) {\r\n      if (this.f_dispType === 0) {\r\n        this.imgPalette[i] = this.palTable.getEntry(\r\n          this.vramMem[0x3f00 + i] & 63\r\n        );\r\n      } else {\r\n        this.imgPalette[i] = this.palTable.getEntry(\r\n          this.vramMem[0x3f00 + i] & 32\r\n        );\r\n      }\r\n    }\r\n    for (i = 0; i < 16; i++) {\r\n      if (this.f_dispType === 0) {\r\n        this.sprPalette[i] = this.palTable.getEntry(\r\n          this.vramMem[0x3f10 + i] & 63\r\n        );\r\n      } else {\r\n        this.sprPalette[i] = this.palTable.getEntry(\r\n          this.vramMem[0x3f10 + i] & 32\r\n        );\r\n      }\r\n    }\r\n  },\r\n\r\n  // Updates the internal pattern\r\n  // table buffers with this new byte.\r\n  // In vNES, there is a version of this with 4 arguments which isn't used.\r\n  patternWrite: function (address, value) {\r\n    var tileIndex = Math.floor(address / 16);\r\n    var leftOver = address % 16;\r\n    if (leftOver < 8) {\r\n      this.ptTile[tileIndex].setScanline(\r\n        leftOver,\r\n        value,\r\n        this.vramMem[address + 8]\r\n      );\r\n    } else {\r\n      this.ptTile[tileIndex].setScanline(\r\n        leftOver - 8,\r\n        this.vramMem[address - 8],\r\n        value\r\n      );\r\n    }\r\n  },\r\n\r\n  // Updates the internal name table buffers\r\n  // with this new byte.\r\n  nameTableWrite: function (index, address, value) {\r\n    this.nameTable[index].tile[address] = value;\r\n\r\n    // Update Sprite #0 hit:\r\n    //updateSpr0Hit();\r\n    this.checkSprite0(this.scanline - 20);\r\n  },\r\n\r\n  // Updates the internal pattern\r\n  // table buffers with this new attribute\r\n  // table byte.\r\n  attribTableWrite: function (index, address, value) {\r\n    this.nameTable[index].writeAttrib(address, value);\r\n  },\r\n\r\n  // Updates the internally buffered sprite\r\n  // data with this new byte of info.\r\n  spriteRamWriteUpdate: function (address, value) {\r\n    var tIndex = Math.floor(address / 4);\r\n\r\n    if (tIndex === 0) {\r\n      //updateSpr0Hit();\r\n      this.checkSprite0(this.scanline - 20);\r\n    }\r\n\r\n    if (address % 4 === 0) {\r\n      // Y coordinate\r\n      this.sprY[tIndex] = value;\r\n    } else if (address % 4 === 1) {\r\n      // Tile index\r\n      this.sprTile[tIndex] = value;\r\n    } else if (address % 4 === 2) {\r\n      // Attributes\r\n      this.vertFlip[tIndex] = (value & 0x80) !== 0;\r\n      this.horiFlip[tIndex] = (value & 0x40) !== 0;\r\n      this.bgPriority[tIndex] = (value & 0x20) !== 0;\r\n      this.sprCol[tIndex] = (value & 3) << 2;\r\n    } else if (address % 4 === 3) {\r\n      // X coordinate\r\n      this.sprX[tIndex] = value;\r\n    }\r\n  },\r\n\r\n  doNMI: function () {\r\n    // Set VBlank flag:\r\n    this.setStatusFlag(this.STATUS_VBLANK, true);\r\n    //nes.getCpu().doNonMaskableInterrupt();\r\n    this.nes.cpu.requestIrq(this.nes.cpu.IRQ_NMI);\r\n  },\r\n\r\n  isPixelWhite: function (x, y) {\r\n    this.triggerRendering();\r\n    return this.nes.ppu.buffer[(y << 8) + x] === 0xffffff;\r\n  },\r\n\r\n  JSON_PROPERTIES: [\r\n    // Memory\r\n    \"vramMem\",\r\n    \"spriteMem\",\r\n    // Counters\r\n    \"cntFV\",\r\n    \"cntV\",\r\n    \"cntH\",\r\n    \"cntVT\",\r\n    \"cntHT\",\r\n    // Registers\r\n    \"regFV\",\r\n    \"regV\",\r\n    \"regH\",\r\n    \"regVT\",\r\n    \"regHT\",\r\n    \"regFH\",\r\n    \"regS\",\r\n    // VRAM addr\r\n    \"vramAddress\",\r\n    \"vramTmpAddress\",\r\n    // Control/Status registers\r\n    \"f_nmiOnVblank\",\r\n    \"f_spriteSize\",\r\n    \"f_bgPatternTable\",\r\n    \"f_spPatternTable\",\r\n    \"f_addrInc\",\r\n    \"f_nTblAddress\",\r\n    \"f_color\",\r\n    \"f_spVisibility\",\r\n    \"f_bgVisibility\",\r\n    \"f_spClipping\",\r\n    \"f_bgClipping\",\r\n    \"f_dispType\",\r\n    // VRAM I/O\r\n    \"vramBufferedReadValue\",\r\n    \"firstWrite\",\r\n    // Mirroring\r\n    \"currentMirroring\",\r\n    \"vramMirrorTable\",\r\n    \"ntable1\",\r\n    // SPR-RAM I/O\r\n    \"sramAddress\",\r\n    // Sprites. Most sprite data is rebuilt from spriteMem\r\n    \"hitSpr0\",\r\n    // Palettes\r\n    \"sprPalette\",\r\n    \"imgPalette\",\r\n    // Rendering progression\r\n    \"curX\",\r\n    \"scanline\",\r\n    \"lastRenderedScanline\",\r\n    \"curNt\",\r\n    \"scantile\",\r\n    // Used during rendering\r\n    \"attrib\",\r\n    \"buffer\",\r\n    \"bgbuffer\",\r\n    \"pixrendered\",\r\n    // Misc\r\n    \"requestEndFrame\",\r\n    \"nmiOk\",\r\n    \"dummyCycleToggle\",\r\n    \"nmiCounter\",\r\n    \"validTileData\",\r\n    \"scanlineAlreadyRendered\",\r\n  ],\r\n\r\n  toJSON: function () {\r\n    var i;\r\n    var state = utils.toJSON(this);\r\n\r\n    state.nameTable = [];\r\n    for (i = 0; i < this.nameTable.length; i++) {\r\n      state.nameTable[i] = this.nameTable[i].toJSON();\r\n    }\r\n\r\n    state.ptTile = [];\r\n    for (i = 0; i < this.ptTile.length; i++) {\r\n      state.ptTile[i] = this.ptTile[i].toJSON();\r\n    }\r\n\r\n    return state;\r\n  },\r\n\r\n  fromJSON: function (state) {\r\n    var i;\r\n\r\n    utils.fromJSON(this, state);\r\n\r\n    for (i = 0; i < this.nameTable.length; i++) {\r\n      this.nameTable[i].fromJSON(state.nameTable[i]);\r\n    }\r\n\r\n    for (i = 0; i < this.ptTile.length; i++) {\r\n      this.ptTile[i].fromJSON(state.ptTile[i]);\r\n    }\r\n\r\n    // Sprite data:\r\n    for (i = 0; i < this.spriteMem.length; i++) {\r\n      this.spriteRamWriteUpdate(i, this.spriteMem[i]);\r\n    }\r\n  },\r\n};\r\n\r\nvar NameTable = function (width, height, name) {\r\n  this.width = width;\r\n  this.height = height;\r\n  this.name = name;\r\n\r\n  this.tile = new Array(width * height);\r\n  this.attrib = new Array(width * height);\r\n  for (var i = 0; i < width * height; i++) {\r\n    this.tile[i] = 0;\r\n    this.attrib[i] = 0;\r\n  }\r\n};\r\n\r\nNameTable.prototype = {\r\n  getTileIndex: function (x, y) {\r\n    return this.tile[y * this.width + x];\r\n  },\r\n\r\n  getAttrib: function (x, y) {\r\n    return this.attrib[y * this.width + x];\r\n  },\r\n\r\n  writeAttrib: function (index, value) {\r\n    var basex = (index % 8) * 4;\r\n    var basey = Math.floor(index / 8) * 4;\r\n    var add;\r\n    var tx, ty;\r\n    var attindex;\r\n\r\n    for (var sqy = 0; sqy < 2; sqy++) {\r\n      for (var sqx = 0; sqx < 2; sqx++) {\r\n        add = (value >> (2 * (sqy * 2 + sqx))) & 3;\r\n        for (var y = 0; y < 2; y++) {\r\n          for (var x = 0; x < 2; x++) {\r\n            tx = basex + sqx * 2 + x;\r\n            ty = basey + sqy * 2 + y;\r\n            attindex = ty * this.width + tx;\r\n            this.attrib[attindex] = (add << 2) & 12;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  toJSON: function () {\r\n    return {\r\n      tile: this.tile,\r\n      attrib: this.attrib,\r\n    };\r\n  },\r\n\r\n  fromJSON: function (s) {\r\n    this.tile = s.tile;\r\n    this.attrib = s.attrib;\r\n  },\r\n};\r\n\r\nvar PaletteTable = function () {\r\n  this.curTable = new Array(64);\r\n  this.emphTable = new Array(8);\r\n  this.currentEmph = -1;\r\n};\r\n\r\nPaletteTable.prototype = {\r\n  reset: function () {\r\n    this.setEmphasis(0);\r\n  },\r\n\r\n  loadNTSCPalette: function () {\r\n    // prettier-ignore\r\n    this.curTable = [0x525252, 0xB40000, 0xA00000, 0xB1003D, 0x740069, 0x00005B, 0x00005F, 0x001840, 0x002F10, 0x084A08, 0x006700, 0x124200, 0x6D2800, 0x000000, 0x000000, 0x000000, 0xC4D5E7, 0xFF4000, 0xDC0E22, 0xFF476B, 0xD7009F, 0x680AD7, 0x0019BC, 0x0054B1, 0x006A5B, 0x008C03, 0x00AB00, 0x2C8800, 0xA47200, 0x000000, 0x000000, 0x000000, 0xF8F8F8, 0xFFAB3C, 0xFF7981, 0xFF5BC5, 0xFF48F2, 0xDF49FF, 0x476DFF, 0x00B4F7, 0x00E0FF, 0x00E375, 0x03F42B, 0x78B82E, 0xE5E218, 0x787878, 0x000000, 0x000000, 0xFFFFFF, 0xFFF2BE, 0xF8B8B8, 0xF8B8D8, 0xFFB6FF, 0xFFC3FF, 0xC7D1FF, 0x9ADAFF, 0x88EDF8, 0x83FFDD, 0xB8F8B8, 0xF5F8AC, 0xFFFFB0, 0xF8D8F8, 0x000000, 0x000000];\r\n    this.makeTables();\r\n    this.setEmphasis(0);\r\n  },\r\n\r\n  loadPALPalette: function () {\r\n    // prettier-ignore\r\n    this.curTable = [0x525252, 0xB40000, 0xA00000, 0xB1003D, 0x740069, 0x00005B, 0x00005F, 0x001840, 0x002F10, 0x084A08, 0x006700, 0x124200, 0x6D2800, 0x000000, 0x000000, 0x000000, 0xC4D5E7, 0xFF4000, 0xDC0E22, 0xFF476B, 0xD7009F, 0x680AD7, 0x0019BC, 0x0054B1, 0x006A5B, 0x008C03, 0x00AB00, 0x2C8800, 0xA47200, 0x000000, 0x000000, 0x000000, 0xF8F8F8, 0xFFAB3C, 0xFF7981, 0xFF5BC5, 0xFF48F2, 0xDF49FF, 0x476DFF, 0x00B4F7, 0x00E0FF, 0x00E375, 0x03F42B, 0x78B82E, 0xE5E218, 0x787878, 0x000000, 0x000000, 0xFFFFFF, 0xFFF2BE, 0xF8B8B8, 0xF8B8D8, 0xFFB6FF, 0xFFC3FF, 0xC7D1FF, 0x9ADAFF, 0x88EDF8, 0x83FFDD, 0xB8F8B8, 0xF5F8AC, 0xFFFFB0, 0xF8D8F8, 0x000000, 0x000000];\r\n    this.makeTables();\r\n    this.setEmphasis(0);\r\n  },\r\n\r\n  makeTables: function () {\r\n    var r, g, b, col, i, rFactor, gFactor, bFactor;\r\n\r\n    // Calculate a table for each possible emphasis setting:\r\n    for (var emph = 0; emph < 8; emph++) {\r\n      // Determine color component factors:\r\n      rFactor = 1.0;\r\n      gFactor = 1.0;\r\n      bFactor = 1.0;\r\n\r\n      if ((emph & 1) !== 0) {\r\n        rFactor = 0.75;\r\n        bFactor = 0.75;\r\n      }\r\n      if ((emph & 2) !== 0) {\r\n        rFactor = 0.75;\r\n        gFactor = 0.75;\r\n      }\r\n      if ((emph & 4) !== 0) {\r\n        gFactor = 0.75;\r\n        bFactor = 0.75;\r\n      }\r\n\r\n      this.emphTable[emph] = new Array(64);\r\n\r\n      // Calculate table:\r\n      for (i = 0; i < 64; i++) {\r\n        col = this.curTable[i];\r\n        r = Math.floor(this.getRed(col) * rFactor);\r\n        g = Math.floor(this.getGreen(col) * gFactor);\r\n        b = Math.floor(this.getBlue(col) * bFactor);\r\n        this.emphTable[emph][i] = this.getRgb(r, g, b);\r\n      }\r\n    }\r\n  },\r\n\r\n  setEmphasis: function (emph) {\r\n    if (emph !== this.currentEmph) {\r\n      this.currentEmph = emph;\r\n      for (var i = 0; i < 64; i++) {\r\n        this.curTable[i] = this.emphTable[emph][i];\r\n      }\r\n    }\r\n  },\r\n\r\n  getEntry: function (yiq) {\r\n    return this.curTable[yiq];\r\n  },\r\n\r\n  getRed: function (rgb) {\r\n    return (rgb >> 16) & 0xff;\r\n  },\r\n\r\n  getGreen: function (rgb) {\r\n    return (rgb >> 8) & 0xff;\r\n  },\r\n\r\n  getBlue: function (rgb) {\r\n    return rgb & 0xff;\r\n  },\r\n\r\n  getRgb: function (r, g, b) {\r\n    return (r << 16) | (g << 8) | b;\r\n  },\r\n\r\n  loadDefaultPalette: function () {\r\n    this.curTable[0] = this.getRgb(117, 117, 117);\r\n    this.curTable[1] = this.getRgb(39, 27, 143);\r\n    this.curTable[2] = this.getRgb(0, 0, 171);\r\n    this.curTable[3] = this.getRgb(71, 0, 159);\r\n    this.curTable[4] = this.getRgb(143, 0, 119);\r\n    this.curTable[5] = this.getRgb(171, 0, 19);\r\n    this.curTable[6] = this.getRgb(167, 0, 0);\r\n    this.curTable[7] = this.getRgb(127, 11, 0);\r\n    this.curTable[8] = this.getRgb(67, 47, 0);\r\n    this.curTable[9] = this.getRgb(0, 71, 0);\r\n    this.curTable[10] = this.getRgb(0, 81, 0);\r\n    this.curTable[11] = this.getRgb(0, 63, 23);\r\n    this.curTable[12] = this.getRgb(27, 63, 95);\r\n    this.curTable[13] = this.getRgb(0, 0, 0);\r\n    this.curTable[14] = this.getRgb(0, 0, 0);\r\n    this.curTable[15] = this.getRgb(0, 0, 0);\r\n    this.curTable[16] = this.getRgb(188, 188, 188);\r\n    this.curTable[17] = this.getRgb(0, 115, 239);\r\n    this.curTable[18] = this.getRgb(35, 59, 239);\r\n    this.curTable[19] = this.getRgb(131, 0, 243);\r\n    this.curTable[20] = this.getRgb(191, 0, 191);\r\n    this.curTable[21] = this.getRgb(231, 0, 91);\r\n    this.curTable[22] = this.getRgb(219, 43, 0);\r\n    this.curTable[23] = this.getRgb(203, 79, 15);\r\n    this.curTable[24] = this.getRgb(139, 115, 0);\r\n    this.curTable[25] = this.getRgb(0, 151, 0);\r\n    this.curTable[26] = this.getRgb(0, 171, 0);\r\n    this.curTable[27] = this.getRgb(0, 147, 59);\r\n    this.curTable[28] = this.getRgb(0, 131, 139);\r\n    this.curTable[29] = this.getRgb(0, 0, 0);\r\n    this.curTable[30] = this.getRgb(0, 0, 0);\r\n    this.curTable[31] = this.getRgb(0, 0, 0);\r\n    this.curTable[32] = this.getRgb(255, 255, 255);\r\n    this.curTable[33] = this.getRgb(63, 191, 255);\r\n    this.curTable[34] = this.getRgb(95, 151, 255);\r\n    this.curTable[35] = this.getRgb(167, 139, 253);\r\n    this.curTable[36] = this.getRgb(247, 123, 255);\r\n    this.curTable[37] = this.getRgb(255, 119, 183);\r\n    this.curTable[38] = this.getRgb(255, 119, 99);\r\n    this.curTable[39] = this.getRgb(255, 155, 59);\r\n    this.curTable[40] = this.getRgb(243, 191, 63);\r\n    this.curTable[41] = this.getRgb(131, 211, 19);\r\n    this.curTable[42] = this.getRgb(79, 223, 75);\r\n    this.curTable[43] = this.getRgb(88, 248, 152);\r\n    this.curTable[44] = this.getRgb(0, 235, 219);\r\n    this.curTable[45] = this.getRgb(0, 0, 0);\r\n    this.curTable[46] = this.getRgb(0, 0, 0);\r\n    this.curTable[47] = this.getRgb(0, 0, 0);\r\n    this.curTable[48] = this.getRgb(255, 255, 255);\r\n    this.curTable[49] = this.getRgb(171, 231, 255);\r\n    this.curTable[50] = this.getRgb(199, 215, 255);\r\n    this.curTable[51] = this.getRgb(215, 203, 255);\r\n    this.curTable[52] = this.getRgb(255, 199, 255);\r\n    this.curTable[53] = this.getRgb(255, 199, 219);\r\n    this.curTable[54] = this.getRgb(255, 191, 179);\r\n    this.curTable[55] = this.getRgb(255, 219, 171);\r\n    this.curTable[56] = this.getRgb(255, 231, 163);\r\n    this.curTable[57] = this.getRgb(227, 255, 163);\r\n    this.curTable[58] = this.getRgb(171, 243, 191);\r\n    this.curTable[59] = this.getRgb(179, 255, 207);\r\n    this.curTable[60] = this.getRgb(159, 255, 243);\r\n    this.curTable[61] = this.getRgb(0, 0, 0);\r\n    this.curTable[62] = this.getRgb(0, 0, 0);\r\n    this.curTable[63] = this.getRgb(0, 0, 0);\r\n\r\n    this.makeTables();\r\n    this.setEmphasis(0);\r\n  },\r\n};\r\n\r\nmodule.exports = PPU;\r\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports) {\n\nvar CPU_FREQ_NTSC = 1789772.5; //1789772.72727272d;\r\n// var CPU_FREQ_PAL = 1773447.4;\r\n\r\nvar PAPU = function (nes) {\r\n  this.nes = nes;\r\n\r\n  this.square1 = new ChannelSquare(this, true);\r\n  this.square2 = new ChannelSquare(this, false);\r\n  this.triangle = new ChannelTriangle(this);\r\n  this.noise = new ChannelNoise(this);\r\n  this.dmc = new ChannelDM(this);\r\n\r\n  this.frameIrqCounter = null;\r\n  this.frameIrqCounterMax = 4;\r\n  this.initCounter = 2048;\r\n  this.channelEnableValue = null;\r\n\r\n  this.sampleRate = 44100;\r\n\r\n  this.lengthLookup = null;\r\n  this.dmcFreqLookup = null;\r\n  this.noiseWavelengthLookup = null;\r\n  this.square_table = null;\r\n  this.tnd_table = null;\r\n\r\n  this.frameIrqEnabled = false;\r\n  this.frameIrqActive = null;\r\n  this.frameClockNow = null;\r\n  this.startedPlaying = false;\r\n  this.recordOutput = false;\r\n  this.initingHardware = false;\r\n\r\n  this.masterFrameCounter = null;\r\n  this.derivedFrameCounter = null;\r\n  this.countSequence = null;\r\n  this.sampleTimer = null;\r\n  this.frameTime = null;\r\n  this.sampleTimerMax = null;\r\n  this.sampleCount = null;\r\n  this.triValue = 0;\r\n\r\n  this.smpSquare1 = null;\r\n  this.smpSquare2 = null;\r\n  this.smpTriangle = null;\r\n  this.smpDmc = null;\r\n  this.accCount = null;\r\n\r\n  // DC removal vars:\r\n  this.prevSampleL = 0;\r\n  this.prevSampleR = 0;\r\n  this.smpAccumL = 0;\r\n  this.smpAccumR = 0;\r\n\r\n  // DAC range:\r\n  this.dacRange = 0;\r\n  this.dcValue = 0;\r\n\r\n  // Master volume:\r\n  this.masterVolume = 256;\r\n\r\n  // Stereo positioning:\r\n  this.stereoPosLSquare1 = null;\r\n  this.stereoPosLSquare2 = null;\r\n  this.stereoPosLTriangle = null;\r\n  this.stereoPosLNoise = null;\r\n  this.stereoPosLDMC = null;\r\n  this.stereoPosRSquare1 = null;\r\n  this.stereoPosRSquare2 = null;\r\n  this.stereoPosRTriangle = null;\r\n  this.stereoPosRNoise = null;\r\n  this.stereoPosRDMC = null;\r\n\r\n  this.extraCycles = null;\r\n\r\n  this.maxSample = null;\r\n  this.minSample = null;\r\n\r\n  // Panning:\r\n  this.panning = [80, 170, 100, 150, 128];\r\n  this.setPanning(this.panning);\r\n\r\n  // Initialize lookup tables:\r\n  this.initLengthLookup();\r\n  this.initDmcFrequencyLookup();\r\n  this.initNoiseWavelengthLookup();\r\n  this.initDACtables();\r\n\r\n  // Init sound registers:\r\n  for (var i = 0; i < 0x14; i++) {\r\n    if (i === 0x10) {\r\n      this.writeReg(0x4010, 0x10);\r\n    } else {\r\n      this.writeReg(0x4000 + i, 0);\r\n    }\r\n  }\r\n\r\n  this.reset();\r\n};\r\n\r\nPAPU.prototype = {\r\n  reset: function () {\r\n    this.sampleRate = this.nes.opts.sampleRate;\r\n    this.sampleTimerMax = Math.floor(\r\n      (1024.0 * CPU_FREQ_NTSC * this.nes.opts.preferredFrameRate) /\r\n        (this.sampleRate * 60.0)\r\n    );\r\n\r\n    this.frameTime = Math.floor(\r\n      (14915.0 * this.nes.opts.preferredFrameRate) / 60.0\r\n    );\r\n\r\n    this.sampleTimer = 0;\r\n\r\n    this.updateChannelEnable(0);\r\n    this.masterFrameCounter = 0;\r\n    this.derivedFrameCounter = 0;\r\n    this.countSequence = 0;\r\n    this.sampleCount = 0;\r\n    this.initCounter = 2048;\r\n    this.frameIrqEnabled = false;\r\n    this.initingHardware = false;\r\n\r\n    this.resetCounter();\r\n\r\n    this.square1.reset();\r\n    this.square2.reset();\r\n    this.triangle.reset();\r\n    this.noise.reset();\r\n    this.dmc.reset();\r\n\r\n    this.accCount = 0;\r\n    this.smpSquare1 = 0;\r\n    this.smpSquare2 = 0;\r\n    this.smpTriangle = 0;\r\n    this.smpDmc = 0;\r\n\r\n    this.frameIrqEnabled = false;\r\n    this.frameIrqCounterMax = 4;\r\n\r\n    this.channelEnableValue = 0xff;\r\n    this.startedPlaying = false;\r\n    this.prevSampleL = 0;\r\n    this.prevSampleR = 0;\r\n    this.smpAccumL = 0;\r\n    this.smpAccumR = 0;\r\n\r\n    this.maxSample = -500000;\r\n    this.minSample = 500000;\r\n  },\r\n\r\n  // eslint-disable-next-line no-unused-vars\r\n  readReg: function (address) {\r\n    // Read 0x4015:\r\n    var tmp = 0;\r\n    tmp |= this.square1.getLengthStatus();\r\n    tmp |= this.square2.getLengthStatus() << 1;\r\n    tmp |= this.triangle.getLengthStatus() << 2;\r\n    tmp |= this.noise.getLengthStatus() << 3;\r\n    tmp |= this.dmc.getLengthStatus() << 4;\r\n    tmp |= (this.frameIrqActive && this.frameIrqEnabled ? 1 : 0) << 6;\r\n    tmp |= this.dmc.getIrqStatus() << 7;\r\n\r\n    this.frameIrqActive = false;\r\n    this.dmc.irqGenerated = false;\r\n\r\n    return tmp & 0xffff;\r\n  },\r\n\r\n  writeReg: function (address, value) {\r\n    if (address >= 0x4000 && address < 0x4004) {\r\n      // Square Wave 1 Control\r\n      this.square1.writeReg(address, value);\r\n      // console.log(\"Square Write\");\r\n    } else if (address >= 0x4004 && address < 0x4008) {\r\n      // Square 2 Control\r\n      this.square2.writeReg(address, value);\r\n    } else if (address >= 0x4008 && address < 0x400c) {\r\n      // Triangle Control\r\n      this.triangle.writeReg(address, value);\r\n    } else if (address >= 0x400c && address <= 0x400f) {\r\n      // Noise Control\r\n      this.noise.writeReg(address, value);\r\n    } else if (address === 0x4010) {\r\n      // DMC Play mode & DMA frequency\r\n      this.dmc.writeReg(address, value);\r\n    } else if (address === 0x4011) {\r\n      // DMC Delta Counter\r\n      this.dmc.writeReg(address, value);\r\n    } else if (address === 0x4012) {\r\n      // DMC Play code starting address\r\n      this.dmc.writeReg(address, value);\r\n    } else if (address === 0x4013) {\r\n      // DMC Play code length\r\n      this.dmc.writeReg(address, value);\r\n    } else if (address === 0x4015) {\r\n      // Channel enable\r\n      this.updateChannelEnable(value);\r\n\r\n      if (value !== 0 && this.initCounter > 0) {\r\n        // Start hardware initialization\r\n        this.initingHardware = true;\r\n      }\r\n\r\n      // DMC/IRQ Status\r\n      this.dmc.writeReg(address, value);\r\n    } else if (address === 0x4017) {\r\n      // Frame counter control\r\n      this.countSequence = (value >> 7) & 1;\r\n      this.masterFrameCounter = 0;\r\n      this.frameIrqActive = false;\r\n\r\n      if (((value >> 6) & 0x1) === 0) {\r\n        this.frameIrqEnabled = true;\r\n      } else {\r\n        this.frameIrqEnabled = false;\r\n      }\r\n\r\n      if (this.countSequence === 0) {\r\n        // NTSC:\r\n        this.frameIrqCounterMax = 4;\r\n        this.derivedFrameCounter = 4;\r\n      } else {\r\n        // PAL:\r\n        this.frameIrqCounterMax = 5;\r\n        this.derivedFrameCounter = 0;\r\n        this.frameCounterTick();\r\n      }\r\n    }\r\n  },\r\n\r\n  resetCounter: function () {\r\n    if (this.countSequence === 0) {\r\n      this.derivedFrameCounter = 4;\r\n    } else {\r\n      this.derivedFrameCounter = 0;\r\n    }\r\n  },\r\n\r\n  // Updates channel enable status.\r\n  // This is done on writes to the\r\n  // channel enable register (0x4015),\r\n  // and when the user enables/disables channels\r\n  // in the GUI.\r\n  updateChannelEnable: function (value) {\r\n    this.channelEnableValue = value & 0xffff;\r\n    this.square1.setEnabled((value & 1) !== 0);\r\n    this.square2.setEnabled((value & 2) !== 0);\r\n    this.triangle.setEnabled((value & 4) !== 0);\r\n    this.noise.setEnabled((value & 8) !== 0);\r\n    this.dmc.setEnabled((value & 16) !== 0);\r\n  },\r\n\r\n  // Clocks the frame counter. It should be clocked at\r\n  // twice the cpu speed, so the cycles will be\r\n  // divided by 2 for those counters that are\r\n  // clocked at cpu speed.\r\n  clockFrameCounter: function (nCycles) {\r\n    if (this.initCounter > 0) {\r\n      if (this.initingHardware) {\r\n        this.initCounter -= nCycles;\r\n        if (this.initCounter <= 0) {\r\n          this.initingHardware = false;\r\n        }\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Don't process ticks beyond next sampling:\r\n    nCycles += this.extraCycles;\r\n    var maxCycles = this.sampleTimerMax - this.sampleTimer;\r\n    if (nCycles << 10 > maxCycles) {\r\n      this.extraCycles = ((nCycles << 10) - maxCycles) >> 10;\r\n      nCycles -= this.extraCycles;\r\n    } else {\r\n      this.extraCycles = 0;\r\n    }\r\n\r\n    var dmc = this.dmc;\r\n    var triangle = this.triangle;\r\n    var square1 = this.square1;\r\n    var square2 = this.square2;\r\n    var noise = this.noise;\r\n\r\n    // Clock DMC:\r\n    if (dmc.isEnabled) {\r\n      dmc.shiftCounter -= nCycles << 3;\r\n      while (dmc.shiftCounter <= 0 && dmc.dmaFrequency > 0) {\r\n        dmc.shiftCounter += dmc.dmaFrequency;\r\n        dmc.clockDmc();\r\n      }\r\n    }\r\n\r\n    // Clock Triangle channel Prog timer:\r\n    if (triangle.progTimerMax > 0) {\r\n      triangle.progTimerCount -= nCycles;\r\n      while (triangle.progTimerCount <= 0) {\r\n        triangle.progTimerCount += triangle.progTimerMax + 1;\r\n        if (triangle.linearCounter > 0 && triangle.lengthCounter > 0) {\r\n          triangle.triangleCounter++;\r\n          triangle.triangleCounter &= 0x1f;\r\n\r\n          if (triangle.isEnabled) {\r\n            if (triangle.triangleCounter >= 0x10) {\r\n              // Normal value.\r\n              triangle.sampleValue = triangle.triangleCounter & 0xf;\r\n            } else {\r\n              // Inverted value.\r\n              triangle.sampleValue = 0xf - (triangle.triangleCounter & 0xf);\r\n            }\r\n            triangle.sampleValue <<= 4;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Clock Square channel 1 Prog timer:\r\n    square1.progTimerCount -= nCycles;\r\n    if (square1.progTimerCount <= 0) {\r\n      square1.progTimerCount += (square1.progTimerMax + 1) << 1;\r\n\r\n      square1.squareCounter++;\r\n      square1.squareCounter &= 0x7;\r\n      square1.updateSampleValue();\r\n    }\r\n\r\n    // Clock Square channel 2 Prog timer:\r\n    square2.progTimerCount -= nCycles;\r\n    if (square2.progTimerCount <= 0) {\r\n      square2.progTimerCount += (square2.progTimerMax + 1) << 1;\r\n\r\n      square2.squareCounter++;\r\n      square2.squareCounter &= 0x7;\r\n      square2.updateSampleValue();\r\n    }\r\n\r\n    // Clock noise channel Prog timer:\r\n    var acc_c = nCycles;\r\n    if (noise.progTimerCount - acc_c > 0) {\r\n      // Do all cycles at once:\r\n      noise.progTimerCount -= acc_c;\r\n      noise.accCount += acc_c;\r\n      noise.accValue += acc_c * noise.sampleValue;\r\n    } else {\r\n      // Slow-step:\r\n      while (acc_c-- > 0) {\r\n        if (--noise.progTimerCount <= 0 && noise.progTimerMax > 0) {\r\n          // Update noise shift register:\r\n          noise.shiftReg <<= 1;\r\n          noise.tmp =\r\n            ((noise.shiftReg << (noise.randomMode === 0 ? 1 : 6)) ^\r\n              noise.shiftReg) &\r\n            0x8000;\r\n          if (noise.tmp !== 0) {\r\n            // Sample value must be 0.\r\n            noise.shiftReg |= 0x01;\r\n            noise.randomBit = 0;\r\n            noise.sampleValue = 0;\r\n          } else {\r\n            // Find sample value:\r\n            noise.randomBit = 1;\r\n            if (noise.isEnabled && noise.lengthCounter > 0) {\r\n              noise.sampleValue = noise.masterVolume;\r\n            } else {\r\n              noise.sampleValue = 0;\r\n            }\r\n          }\r\n\r\n          noise.progTimerCount += noise.progTimerMax;\r\n        }\r\n\r\n        noise.accValue += noise.sampleValue;\r\n        noise.accCount++;\r\n      }\r\n    }\r\n\r\n    // Frame IRQ handling:\r\n    if (this.frameIrqEnabled && this.frameIrqActive) {\r\n      this.nes.cpu.requestIrq(this.nes.cpu.IRQ_NORMAL);\r\n    }\r\n\r\n    // Clock frame counter at double CPU speed:\r\n    this.masterFrameCounter += nCycles << 1;\r\n    if (this.masterFrameCounter >= this.frameTime) {\r\n      // 240Hz tick:\r\n      this.masterFrameCounter -= this.frameTime;\r\n      this.frameCounterTick();\r\n    }\r\n\r\n    // Accumulate sample value:\r\n    this.accSample(nCycles);\r\n\r\n    // Clock sample timer:\r\n    this.sampleTimer += nCycles << 10;\r\n    if (this.sampleTimer >= this.sampleTimerMax) {\r\n      // Sample channels:\r\n      this.sample();\r\n      this.sampleTimer -= this.sampleTimerMax;\r\n    }\r\n  },\r\n\r\n  accSample: function (cycles) {\r\n    // Special treatment for triangle channel - need to interpolate.\r\n    if (this.triangle.sampleCondition) {\r\n      this.triValue = Math.floor(\r\n        (this.triangle.progTimerCount << 4) / (this.triangle.progTimerMax + 1)\r\n      );\r\n      if (this.triValue > 16) {\r\n        this.triValue = 16;\r\n      }\r\n      if (this.triangle.triangleCounter >= 16) {\r\n        this.triValue = 16 - this.triValue;\r\n      }\r\n\r\n      // Add non-interpolated sample value:\r\n      this.triValue += this.triangle.sampleValue;\r\n    }\r\n\r\n    // Now sample normally:\r\n    if (cycles === 2) {\r\n      this.smpTriangle += this.triValue << 1;\r\n      this.smpDmc += this.dmc.sample << 1;\r\n      this.smpSquare1 += this.square1.sampleValue << 1;\r\n      this.smpSquare2 += this.square2.sampleValue << 1;\r\n      this.accCount += 2;\r\n    } else if (cycles === 4) {\r\n      this.smpTriangle += this.triValue << 2;\r\n      this.smpDmc += this.dmc.sample << 2;\r\n      this.smpSquare1 += this.square1.sampleValue << 2;\r\n      this.smpSquare2 += this.square2.sampleValue << 2;\r\n      this.accCount += 4;\r\n    } else {\r\n      this.smpTriangle += cycles * this.triValue;\r\n      this.smpDmc += cycles * this.dmc.sample;\r\n      this.smpSquare1 += cycles * this.square1.sampleValue;\r\n      this.smpSquare2 += cycles * this.square2.sampleValue;\r\n      this.accCount += cycles;\r\n    }\r\n  },\r\n\r\n  frameCounterTick: function () {\r\n    this.derivedFrameCounter++;\r\n    if (this.derivedFrameCounter >= this.frameIrqCounterMax) {\r\n      this.derivedFrameCounter = 0;\r\n    }\r\n\r\n    if (this.derivedFrameCounter === 1 || this.derivedFrameCounter === 3) {\r\n      // Clock length & sweep:\r\n      this.triangle.clockLengthCounter();\r\n      this.square1.clockLengthCounter();\r\n      this.square2.clockLengthCounter();\r\n      this.noise.clockLengthCounter();\r\n      this.square1.clockSweep();\r\n      this.square2.clockSweep();\r\n    }\r\n\r\n    if (this.derivedFrameCounter >= 0 && this.derivedFrameCounter < 4) {\r\n      // Clock linear & decay:\r\n      this.square1.clockEnvDecay();\r\n      this.square2.clockEnvDecay();\r\n      this.noise.clockEnvDecay();\r\n      this.triangle.clockLinearCounter();\r\n    }\r\n\r\n    if (this.derivedFrameCounter === 3 && this.countSequence === 0) {\r\n      // Enable IRQ:\r\n      this.frameIrqActive = true;\r\n    }\r\n\r\n    // End of 240Hz tick\r\n  },\r\n\r\n  // Samples the channels, mixes the output together, then writes to buffer.\r\n  sample: function () {\r\n    var sq_index, tnd_index;\r\n\r\n    if (this.accCount > 0) {\r\n      this.smpSquare1 <<= 4;\r\n      this.smpSquare1 = Math.floor(this.smpSquare1 / this.accCount);\r\n\r\n      this.smpSquare2 <<= 4;\r\n      this.smpSquare2 = Math.floor(this.smpSquare2 / this.accCount);\r\n\r\n      this.smpTriangle = Math.floor(this.smpTriangle / this.accCount);\r\n\r\n      this.smpDmc <<= 4;\r\n      this.smpDmc = Math.floor(this.smpDmc / this.accCount);\r\n\r\n      this.accCount = 0;\r\n    } else {\r\n      this.smpSquare1 = this.square1.sampleValue << 4;\r\n      this.smpSquare2 = this.square2.sampleValue << 4;\r\n      this.smpTriangle = this.triangle.sampleValue;\r\n      this.smpDmc = this.dmc.sample << 4;\r\n    }\r\n\r\n    var smpNoise = Math.floor((this.noise.accValue << 4) / this.noise.accCount);\r\n    this.noise.accValue = smpNoise >> 4;\r\n    this.noise.accCount = 1;\r\n\r\n    // Stereo sound.\r\n\r\n    // Left channel:\r\n    sq_index =\r\n      (this.smpSquare1 * this.stereoPosLSquare1 +\r\n        this.smpSquare2 * this.stereoPosLSquare2) >>\r\n      8;\r\n    tnd_index =\r\n      (3 * this.smpTriangle * this.stereoPosLTriangle +\r\n        (smpNoise << 1) * this.stereoPosLNoise +\r\n        this.smpDmc * this.stereoPosLDMC) >>\r\n      8;\r\n    if (sq_index >= this.square_table.length) {\r\n      sq_index = this.square_table.length - 1;\r\n    }\r\n    if (tnd_index >= this.tnd_table.length) {\r\n      tnd_index = this.tnd_table.length - 1;\r\n    }\r\n    var sampleValueL =\r\n      this.square_table[sq_index] + this.tnd_table[tnd_index] - this.dcValue;\r\n\r\n    // Right channel:\r\n    sq_index =\r\n      (this.smpSquare1 * this.stereoPosRSquare1 +\r\n        this.smpSquare2 * this.stereoPosRSquare2) >>\r\n      8;\r\n    tnd_index =\r\n      (3 * this.smpTriangle * this.stereoPosRTriangle +\r\n        (smpNoise << 1) * this.stereoPosRNoise +\r\n        this.smpDmc * this.stereoPosRDMC) >>\r\n      8;\r\n    if (sq_index >= this.square_table.length) {\r\n      sq_index = this.square_table.length - 1;\r\n    }\r\n    if (tnd_index >= this.tnd_table.length) {\r\n      tnd_index = this.tnd_table.length - 1;\r\n    }\r\n    var sampleValueR =\r\n      this.square_table[sq_index] + this.tnd_table[tnd_index] - this.dcValue;\r\n\r\n    // Remove DC from left channel:\r\n    var smpDiffL = sampleValueL - this.prevSampleL;\r\n    this.prevSampleL += smpDiffL;\r\n    this.smpAccumL += smpDiffL - (this.smpAccumL >> 10);\r\n    sampleValueL = this.smpAccumL;\r\n\r\n    // Remove DC from right channel:\r\n    var smpDiffR = sampleValueR - this.prevSampleR;\r\n    this.prevSampleR += smpDiffR;\r\n    this.smpAccumR += smpDiffR - (this.smpAccumR >> 10);\r\n    sampleValueR = this.smpAccumR;\r\n\r\n    // Write:\r\n    if (sampleValueL > this.maxSample) {\r\n      this.maxSample = sampleValueL;\r\n    }\r\n    if (sampleValueL < this.minSample) {\r\n      this.minSample = sampleValueL;\r\n    }\r\n\r\n    if (this.nes.opts.onAudioSample) {\r\n      this.nes.opts.onAudioSample(sampleValueL / 32768, sampleValueR / 32768);\r\n    }\r\n\r\n    // Reset sampled values:\r\n    this.smpSquare1 = 0;\r\n    this.smpSquare2 = 0;\r\n    this.smpTriangle = 0;\r\n    this.smpDmc = 0;\r\n  },\r\n\r\n  getLengthMax: function (value) {\r\n    return this.lengthLookup[value >> 3];\r\n  },\r\n\r\n  getDmcFrequency: function (value) {\r\n    if (value >= 0 && value < 0x10) {\r\n      return this.dmcFreqLookup[value];\r\n    }\r\n    return 0;\r\n  },\r\n\r\n  getNoiseWaveLength: function (value) {\r\n    if (value >= 0 && value < 0x10) {\r\n      return this.noiseWavelengthLookup[value];\r\n    }\r\n    return 0;\r\n  },\r\n\r\n  setPanning: function (pos) {\r\n    for (var i = 0; i < 5; i++) {\r\n      this.panning[i] = pos[i];\r\n    }\r\n    this.updateStereoPos();\r\n  },\r\n\r\n  setMasterVolume: function (value) {\r\n    if (value < 0) {\r\n      value = 0;\r\n    }\r\n    if (value > 256) {\r\n      value = 256;\r\n    }\r\n    this.masterVolume = value;\r\n    this.updateStereoPos();\r\n  },\r\n\r\n  updateStereoPos: function () {\r\n    this.stereoPosLSquare1 = (this.panning[0] * this.masterVolume) >> 8;\r\n    this.stereoPosLSquare2 = (this.panning[1] * this.masterVolume) >> 8;\r\n    this.stereoPosLTriangle = (this.panning[2] * this.masterVolume) >> 8;\r\n    this.stereoPosLNoise = (this.panning[3] * this.masterVolume) >> 8;\r\n    this.stereoPosLDMC = (this.panning[4] * this.masterVolume) >> 8;\r\n\r\n    this.stereoPosRSquare1 = this.masterVolume - this.stereoPosLSquare1;\r\n    this.stereoPosRSquare2 = this.masterVolume - this.stereoPosLSquare2;\r\n    this.stereoPosRTriangle = this.masterVolume - this.stereoPosLTriangle;\r\n    this.stereoPosRNoise = this.masterVolume - this.stereoPosLNoise;\r\n    this.stereoPosRDMC = this.masterVolume - this.stereoPosLDMC;\r\n  },\r\n\r\n  initLengthLookup: function () {\r\n    // prettier-ignore\r\n    this.lengthLookup = [\r\n            0x0A, 0xFE,\r\n            0x14, 0x02,\r\n            0x28, 0x04,\r\n            0x50, 0x06,\r\n            0xA0, 0x08,\r\n            0x3C, 0x0A,\r\n            0x0E, 0x0C,\r\n            0x1A, 0x0E,\r\n            0x0C, 0x10,\r\n            0x18, 0x12,\r\n            0x30, 0x14,\r\n            0x60, 0x16,\r\n            0xC0, 0x18,\r\n            0x48, 0x1A,\r\n            0x10, 0x1C,\r\n            0x20, 0x1E\r\n        ];\r\n  },\r\n\r\n  initDmcFrequencyLookup: function () {\r\n    this.dmcFreqLookup = new Array(16);\r\n\r\n    this.dmcFreqLookup[0x0] = 0xd60;\r\n    this.dmcFreqLookup[0x1] = 0xbe0;\r\n    this.dmcFreqLookup[0x2] = 0xaa0;\r\n    this.dmcFreqLookup[0x3] = 0xa00;\r\n    this.dmcFreqLookup[0x4] = 0x8f0;\r\n    this.dmcFreqLookup[0x5] = 0x7f0;\r\n    this.dmcFreqLookup[0x6] = 0x710;\r\n    this.dmcFreqLookup[0x7] = 0x6b0;\r\n    this.dmcFreqLookup[0x8] = 0x5f0;\r\n    this.dmcFreqLookup[0x9] = 0x500;\r\n    this.dmcFreqLookup[0xa] = 0x470;\r\n    this.dmcFreqLookup[0xb] = 0x400;\r\n    this.dmcFreqLookup[0xc] = 0x350;\r\n    this.dmcFreqLookup[0xd] = 0x2a0;\r\n    this.dmcFreqLookup[0xe] = 0x240;\r\n    this.dmcFreqLookup[0xf] = 0x1b0;\r\n    //for(int i=0;i<16;i++)dmcFreqLookup[i]/=8;\r\n  },\r\n\r\n  initNoiseWavelengthLookup: function () {\r\n    this.noiseWavelengthLookup = new Array(16);\r\n\r\n    this.noiseWavelengthLookup[0x0] = 0x004;\r\n    this.noiseWavelengthLookup[0x1] = 0x008;\r\n    this.noiseWavelengthLookup[0x2] = 0x010;\r\n    this.noiseWavelengthLookup[0x3] = 0x020;\r\n    this.noiseWavelengthLookup[0x4] = 0x040;\r\n    this.noiseWavelengthLookup[0x5] = 0x060;\r\n    this.noiseWavelengthLookup[0x6] = 0x080;\r\n    this.noiseWavelengthLookup[0x7] = 0x0a0;\r\n    this.noiseWavelengthLookup[0x8] = 0x0ca;\r\n    this.noiseWavelengthLookup[0x9] = 0x0fe;\r\n    this.noiseWavelengthLookup[0xa] = 0x17c;\r\n    this.noiseWavelengthLookup[0xb] = 0x1fc;\r\n    this.noiseWavelengthLookup[0xc] = 0x2fa;\r\n    this.noiseWavelengthLookup[0xd] = 0x3f8;\r\n    this.noiseWavelengthLookup[0xe] = 0x7f2;\r\n    this.noiseWavelengthLookup[0xf] = 0xfe4;\r\n  },\r\n\r\n  initDACtables: function () {\r\n    var value, ival, i;\r\n    var max_sqr = 0;\r\n    var max_tnd = 0;\r\n\r\n    this.square_table = new Array(32 * 16);\r\n    this.tnd_table = new Array(204 * 16);\r\n\r\n    for (i = 0; i < 32 * 16; i++) {\r\n      value = 95.52 / (8128.0 / (i / 16.0) + 100.0);\r\n      value *= 0.98411;\r\n      value *= 50000.0;\r\n      ival = Math.floor(value);\r\n\r\n      this.square_table[i] = ival;\r\n      if (ival > max_sqr) {\r\n        max_sqr = ival;\r\n      }\r\n    }\r\n\r\n    for (i = 0; i < 204 * 16; i++) {\r\n      value = 163.67 / (24329.0 / (i / 16.0) + 100.0);\r\n      value *= 0.98411;\r\n      value *= 50000.0;\r\n      ival = Math.floor(value);\r\n\r\n      this.tnd_table[i] = ival;\r\n      if (ival > max_tnd) {\r\n        max_tnd = ival;\r\n      }\r\n    }\r\n\r\n    this.dacRange = max_sqr + max_tnd;\r\n    this.dcValue = this.dacRange / 2;\r\n  },\r\n};\r\n\r\nvar ChannelDM = function (papu) {\r\n  this.papu = papu;\r\n\r\n  this.MODE_NORMAL = 0;\r\n  this.MODE_LOOP = 1;\r\n  this.MODE_IRQ = 2;\r\n\r\n  this.isEnabled = null;\r\n  this.hasSample = null;\r\n  this.irqGenerated = false;\r\n\r\n  this.playMode = null;\r\n  this.dmaFrequency = null;\r\n  this.dmaCounter = null;\r\n  this.deltaCounter = null;\r\n  this.playStartAddress = null;\r\n  this.playAddress = null;\r\n  this.playLength = null;\r\n  this.playLengthCounter = null;\r\n  this.shiftCounter = null;\r\n  this.reg4012 = null;\r\n  this.reg4013 = null;\r\n  this.sample = null;\r\n  this.dacLsb = null;\r\n  this.data = null;\r\n\r\n  this.reset();\r\n};\r\n\r\nChannelDM.prototype = {\r\n  clockDmc: function () {\r\n    // Only alter DAC value if the sample buffer has data:\r\n    if (this.hasSample) {\r\n      if ((this.data & 1) === 0) {\r\n        // Decrement delta:\r\n        if (this.deltaCounter > 0) {\r\n          this.deltaCounter--;\r\n        }\r\n      } else {\r\n        // Increment delta:\r\n        if (this.deltaCounter < 63) {\r\n          this.deltaCounter++;\r\n        }\r\n      }\r\n\r\n      // Update sample value:\r\n      this.sample = this.isEnabled ? (this.deltaCounter << 1) + this.dacLsb : 0;\r\n\r\n      // Update shift register:\r\n      this.data >>= 1;\r\n    }\r\n\r\n    this.dmaCounter--;\r\n    if (this.dmaCounter <= 0) {\r\n      // No more sample bits.\r\n      this.hasSample = false;\r\n      this.endOfSample();\r\n      this.dmaCounter = 8;\r\n    }\r\n\r\n    if (this.irqGenerated) {\r\n      this.papu.nes.cpu.requestIrq(this.papu.nes.cpu.IRQ_NORMAL);\r\n    }\r\n  },\r\n\r\n  endOfSample: function () {\r\n    if (this.playLengthCounter === 0 && this.playMode === this.MODE_LOOP) {\r\n      // Start from beginning of sample:\r\n      this.playAddress = this.playStartAddress;\r\n      this.playLengthCounter = this.playLength;\r\n    }\r\n\r\n    if (this.playLengthCounter > 0) {\r\n      // Fetch next sample:\r\n      this.nextSample();\r\n\r\n      if (this.playLengthCounter === 0) {\r\n        // Last byte of sample fetched, generate IRQ:\r\n        if (this.playMode === this.MODE_IRQ) {\r\n          // Generate IRQ:\r\n          this.irqGenerated = true;\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  nextSample: function () {\r\n    // Fetch byte:\r\n    this.data = this.papu.nes.mmap.load(this.playAddress);\r\n    this.papu.nes.cpu.haltCycles(4);\r\n\r\n    this.playLengthCounter--;\r\n    this.playAddress++;\r\n    if (this.playAddress > 0xffff) {\r\n      this.playAddress = 0x8000;\r\n    }\r\n\r\n    this.hasSample = true;\r\n  },\r\n\r\n  writeReg: function (address, value) {\r\n    if (address === 0x4010) {\r\n      // Play mode, DMA Frequency\r\n      if (value >> 6 === 0) {\r\n        this.playMode = this.MODE_NORMAL;\r\n      } else if (((value >> 6) & 1) === 1) {\r\n        this.playMode = this.MODE_LOOP;\r\n      } else if (value >> 6 === 2) {\r\n        this.playMode = this.MODE_IRQ;\r\n      }\r\n\r\n      if ((value & 0x80) === 0) {\r\n        this.irqGenerated = false;\r\n      }\r\n\r\n      this.dmaFrequency = this.papu.getDmcFrequency(value & 0xf);\r\n    } else if (address === 0x4011) {\r\n      // Delta counter load register:\r\n      this.deltaCounter = (value >> 1) & 63;\r\n      this.dacLsb = value & 1;\r\n      this.sample = (this.deltaCounter << 1) + this.dacLsb; // update sample value\r\n    } else if (address === 0x4012) {\r\n      // DMA address load register\r\n      this.playStartAddress = (value << 6) | 0x0c000;\r\n      this.playAddress = this.playStartAddress;\r\n      this.reg4012 = value;\r\n    } else if (address === 0x4013) {\r\n      // Length of play code\r\n      this.playLength = (value << 4) + 1;\r\n      this.playLengthCounter = this.playLength;\r\n      this.reg4013 = value;\r\n    } else if (address === 0x4015) {\r\n      // DMC/IRQ Status\r\n      if (((value >> 4) & 1) === 0) {\r\n        // Disable:\r\n        this.playLengthCounter = 0;\r\n      } else {\r\n        // Restart:\r\n        this.playAddress = this.playStartAddress;\r\n        this.playLengthCounter = this.playLength;\r\n      }\r\n      this.irqGenerated = false;\r\n    }\r\n  },\r\n\r\n  setEnabled: function (value) {\r\n    if (!this.isEnabled && value) {\r\n      this.playLengthCounter = this.playLength;\r\n    }\r\n    this.isEnabled = value;\r\n  },\r\n\r\n  getLengthStatus: function () {\r\n    return this.playLengthCounter === 0 || !this.isEnabled ? 0 : 1;\r\n  },\r\n\r\n  getIrqStatus: function () {\r\n    return this.irqGenerated ? 1 : 0;\r\n  },\r\n\r\n  reset: function () {\r\n    this.isEnabled = false;\r\n    this.irqGenerated = false;\r\n    this.playMode = this.MODE_NORMAL;\r\n    this.dmaFrequency = 0;\r\n    this.dmaCounter = 0;\r\n    this.deltaCounter = 0;\r\n    this.playStartAddress = 0;\r\n    this.playAddress = 0;\r\n    this.playLength = 0;\r\n    this.playLengthCounter = 0;\r\n    this.sample = 0;\r\n    this.dacLsb = 0;\r\n    this.shiftCounter = 0;\r\n    this.reg4012 = 0;\r\n    this.reg4013 = 0;\r\n    this.data = 0;\r\n  },\r\n};\r\n\r\nvar ChannelNoise = function (papu) {\r\n  this.papu = papu;\r\n\r\n  this.isEnabled = null;\r\n  this.envDecayDisable = null;\r\n  this.envDecayLoopEnable = null;\r\n  this.lengthCounterEnable = null;\r\n  this.envReset = null;\r\n  this.shiftNow = null;\r\n\r\n  this.lengthCounter = null;\r\n  this.progTimerCount = null;\r\n  this.progTimerMax = null;\r\n  this.envDecayRate = null;\r\n  this.envDecayCounter = null;\r\n  this.envVolume = null;\r\n  this.masterVolume = null;\r\n  this.shiftReg = 1 << 14;\r\n  this.randomBit = null;\r\n  this.randomMode = null;\r\n  this.sampleValue = null;\r\n  this.accValue = 0;\r\n  this.accCount = 1;\r\n  this.tmp = null;\r\n\r\n  this.reset();\r\n};\r\n\r\nChannelNoise.prototype = {\r\n  reset: function () {\r\n    this.progTimerCount = 0;\r\n    this.progTimerMax = 0;\r\n    this.isEnabled = false;\r\n    this.lengthCounter = 0;\r\n    this.lengthCounterEnable = false;\r\n    this.envDecayDisable = false;\r\n    this.envDecayLoopEnable = false;\r\n    this.shiftNow = false;\r\n    this.envDecayRate = 0;\r\n    this.envDecayCounter = 0;\r\n    this.envVolume = 0;\r\n    this.masterVolume = 0;\r\n    this.shiftReg = 1;\r\n    this.randomBit = 0;\r\n    this.randomMode = 0;\r\n    this.sampleValue = 0;\r\n    this.tmp = 0;\r\n  },\r\n\r\n  clockLengthCounter: function () {\r\n    if (this.lengthCounterEnable && this.lengthCounter > 0) {\r\n      this.lengthCounter--;\r\n      if (this.lengthCounter === 0) {\r\n        this.updateSampleValue();\r\n      }\r\n    }\r\n  },\r\n\r\n  clockEnvDecay: function () {\r\n    if (this.envReset) {\r\n      // Reset envelope:\r\n      this.envReset = false;\r\n      this.envDecayCounter = this.envDecayRate + 1;\r\n      this.envVolume = 0xf;\r\n    } else if (--this.envDecayCounter <= 0) {\r\n      // Normal handling:\r\n      this.envDecayCounter = this.envDecayRate + 1;\r\n      if (this.envVolume > 0) {\r\n        this.envVolume--;\r\n      } else {\r\n        this.envVolume = this.envDecayLoopEnable ? 0xf : 0;\r\n      }\r\n    }\r\n    if (this.envDecayDisable) {\r\n      this.masterVolume = this.envDecayRate;\r\n    } else {\r\n      this.masterVolume = this.envVolume;\r\n    }\r\n    this.updateSampleValue();\r\n  },\r\n\r\n  updateSampleValue: function () {\r\n    if (this.isEnabled && this.lengthCounter > 0) {\r\n      this.sampleValue = this.randomBit * this.masterVolume;\r\n    }\r\n  },\r\n\r\n  writeReg: function (address, value) {\r\n    if (address === 0x400c) {\r\n      // Volume/Envelope decay:\r\n      this.envDecayDisable = (value & 0x10) !== 0;\r\n      this.envDecayRate = value & 0xf;\r\n      this.envDecayLoopEnable = (value & 0x20) !== 0;\r\n      this.lengthCounterEnable = (value & 0x20) === 0;\r\n      if (this.envDecayDisable) {\r\n        this.masterVolume = this.envDecayRate;\r\n      } else {\r\n        this.masterVolume = this.envVolume;\r\n      }\r\n    } else if (address === 0x400e) {\r\n      // Programmable timer:\r\n      this.progTimerMax = this.papu.getNoiseWaveLength(value & 0xf);\r\n      this.randomMode = value >> 7;\r\n    } else if (address === 0x400f) {\r\n      // Length counter\r\n      this.lengthCounter = this.papu.getLengthMax(value & 248);\r\n      this.envReset = true;\r\n    }\r\n    // Update:\r\n    //updateSampleValue();\r\n  },\r\n\r\n  setEnabled: function (value) {\r\n    this.isEnabled = value;\r\n    if (!value) {\r\n      this.lengthCounter = 0;\r\n    }\r\n    this.updateSampleValue();\r\n  },\r\n\r\n  getLengthStatus: function () {\r\n    return this.lengthCounter === 0 || !this.isEnabled ? 0 : 1;\r\n  },\r\n};\r\n\r\nvar ChannelSquare = function (papu, square1) {\r\n  this.papu = papu;\r\n\r\n  // prettier-ignore\r\n  this.dutyLookup = [\r\n         0, 1, 0, 0, 0, 0, 0, 0,\r\n         0, 1, 1, 0, 0, 0, 0, 0,\r\n         0, 1, 1, 1, 1, 0, 0, 0,\r\n         1, 0, 0, 1, 1, 1, 1, 1\r\n    ];\r\n  // prettier-ignore\r\n  this.impLookup = [\r\n         1,-1, 0, 0, 0, 0, 0, 0,\r\n         1, 0,-1, 0, 0, 0, 0, 0,\r\n         1, 0, 0, 0,-1, 0, 0, 0,\r\n        -1, 0, 1, 0, 0, 0, 0, 0\r\n    ];\r\n\r\n  this.sqr1 = square1;\r\n  this.isEnabled = null;\r\n  this.lengthCounterEnable = null;\r\n  this.sweepActive = null;\r\n  this.envDecayDisable = null;\r\n  this.envDecayLoopEnable = null;\r\n  this.envReset = null;\r\n  this.sweepCarry = null;\r\n  this.updateSweepPeriod = null;\r\n\r\n  this.progTimerCount = null;\r\n  this.progTimerMax = null;\r\n  this.lengthCounter = null;\r\n  this.squareCounter = null;\r\n  this.sweepCounter = null;\r\n  this.sweepCounterMax = null;\r\n  this.sweepMode = null;\r\n  this.sweepShiftAmount = null;\r\n  this.envDecayRate = null;\r\n  this.envDecayCounter = null;\r\n  this.envVolume = null;\r\n  this.masterVolume = null;\r\n  this.dutyMode = null;\r\n  this.sweepResult = null;\r\n  this.sampleValue = null;\r\n  this.vol = null;\r\n\r\n  this.reset();\r\n};\r\n\r\nChannelSquare.prototype = {\r\n  reset: function () {\r\n    this.progTimerCount = 0;\r\n    this.progTimerMax = 0;\r\n    this.lengthCounter = 0;\r\n    this.squareCounter = 0;\r\n    this.sweepCounter = 0;\r\n    this.sweepCounterMax = 0;\r\n    this.sweepMode = 0;\r\n    this.sweepShiftAmount = 0;\r\n    this.envDecayRate = 0;\r\n    this.envDecayCounter = 0;\r\n    this.envVolume = 0;\r\n    this.masterVolume = 0;\r\n    this.dutyMode = 0;\r\n    this.vol = 0;\r\n\r\n    this.isEnabled = false;\r\n    this.lengthCounterEnable = false;\r\n    this.sweepActive = false;\r\n    this.sweepCarry = false;\r\n    this.envDecayDisable = false;\r\n    this.envDecayLoopEnable = false;\r\n  },\r\n\r\n  clockLengthCounter: function () {\r\n    if (this.lengthCounterEnable && this.lengthCounter > 0) {\r\n      this.lengthCounter--;\r\n      if (this.lengthCounter === 0) {\r\n        this.updateSampleValue();\r\n      }\r\n    }\r\n  },\r\n\r\n  clockEnvDecay: function () {\r\n    if (this.envReset) {\r\n      // Reset envelope:\r\n      this.envReset = false;\r\n      this.envDecayCounter = this.envDecayRate + 1;\r\n      this.envVolume = 0xf;\r\n    } else if (--this.envDecayCounter <= 0) {\r\n      // Normal handling:\r\n      this.envDecayCounter = this.envDecayRate + 1;\r\n      if (this.envVolume > 0) {\r\n        this.envVolume--;\r\n      } else {\r\n        this.envVolume = this.envDecayLoopEnable ? 0xf : 0;\r\n      }\r\n    }\r\n\r\n    if (this.envDecayDisable) {\r\n      this.masterVolume = this.envDecayRate;\r\n    } else {\r\n      this.masterVolume = this.envVolume;\r\n    }\r\n    this.updateSampleValue();\r\n  },\r\n\r\n  clockSweep: function () {\r\n    if (--this.sweepCounter <= 0) {\r\n      this.sweepCounter = this.sweepCounterMax + 1;\r\n      if (\r\n        this.sweepActive &&\r\n        this.sweepShiftAmount > 0 &&\r\n        this.progTimerMax > 7\r\n      ) {\r\n        // Calculate result from shifter:\r\n        this.sweepCarry = false;\r\n        if (this.sweepMode === 0) {\r\n          this.progTimerMax += this.progTimerMax >> this.sweepShiftAmount;\r\n          if (this.progTimerMax > 4095) {\r\n            this.progTimerMax = 4095;\r\n            this.sweepCarry = true;\r\n          }\r\n        } else {\r\n          this.progTimerMax =\r\n            this.progTimerMax -\r\n            ((this.progTimerMax >> this.sweepShiftAmount) -\r\n              (this.sqr1 ? 1 : 0));\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.updateSweepPeriod) {\r\n      this.updateSweepPeriod = false;\r\n      this.sweepCounter = this.sweepCounterMax + 1;\r\n    }\r\n  },\r\n\r\n  updateSampleValue: function () {\r\n    if (this.isEnabled && this.lengthCounter > 0 && this.progTimerMax > 7) {\r\n      if (\r\n        this.sweepMode === 0 &&\r\n        this.progTimerMax + (this.progTimerMax >> this.sweepShiftAmount) > 4095\r\n      ) {\r\n        //if (this.sweepCarry) {\r\n        this.sampleValue = 0;\r\n      } else {\r\n        this.sampleValue =\r\n          this.masterVolume *\r\n          this.dutyLookup[(this.dutyMode << 3) + this.squareCounter];\r\n      }\r\n    } else {\r\n      this.sampleValue = 0;\r\n    }\r\n  },\r\n\r\n  writeReg: function (address, value) {\r\n    var addrAdd = this.sqr1 ? 0 : 4;\r\n    if (address === 0x4000 + addrAdd) {\r\n      // Volume/Envelope decay:\r\n      this.envDecayDisable = (value & 0x10) !== 0;\r\n      this.envDecayRate = value & 0xf;\r\n      this.envDecayLoopEnable = (value & 0x20) !== 0;\r\n      this.dutyMode = (value >> 6) & 0x3;\r\n      this.lengthCounterEnable = (value & 0x20) === 0;\r\n      if (this.envDecayDisable) {\r\n        this.masterVolume = this.envDecayRate;\r\n      } else {\r\n        this.masterVolume = this.envVolume;\r\n      }\r\n      this.updateSampleValue();\r\n    } else if (address === 0x4001 + addrAdd) {\r\n      // Sweep:\r\n      this.sweepActive = (value & 0x80) !== 0;\r\n      this.sweepCounterMax = (value >> 4) & 7;\r\n      this.sweepMode = (value >> 3) & 1;\r\n      this.sweepShiftAmount = value & 7;\r\n      this.updateSweepPeriod = true;\r\n    } else if (address === 0x4002 + addrAdd) {\r\n      // Programmable timer:\r\n      this.progTimerMax &= 0x700;\r\n      this.progTimerMax |= value;\r\n    } else if (address === 0x4003 + addrAdd) {\r\n      // Programmable timer, length counter\r\n      this.progTimerMax &= 0xff;\r\n      this.progTimerMax |= (value & 0x7) << 8;\r\n\r\n      if (this.isEnabled) {\r\n        this.lengthCounter = this.papu.getLengthMax(value & 0xf8);\r\n      }\r\n\r\n      this.envReset = true;\r\n    }\r\n  },\r\n\r\n  setEnabled: function (value) {\r\n    this.isEnabled = value;\r\n    if (!value) {\r\n      this.lengthCounter = 0;\r\n    }\r\n    this.updateSampleValue();\r\n  },\r\n\r\n  getLengthStatus: function () {\r\n    return this.lengthCounter === 0 || !this.isEnabled ? 0 : 1;\r\n  },\r\n};\r\n\r\nvar ChannelTriangle = function (papu) {\r\n  this.papu = papu;\r\n\r\n  this.isEnabled = null;\r\n  this.sampleCondition = null;\r\n  this.lengthCounterEnable = null;\r\n  this.lcHalt = null;\r\n  this.lcControl = null;\r\n\r\n  this.progTimerCount = null;\r\n  this.progTimerMax = null;\r\n  this.triangleCounter = null;\r\n  this.lengthCounter = null;\r\n  this.linearCounter = null;\r\n  this.lcLoadValue = null;\r\n  this.sampleValue = null;\r\n  this.tmp = null;\r\n\r\n  this.reset();\r\n};\r\n\r\nChannelTriangle.prototype = {\r\n  reset: function () {\r\n    this.progTimerCount = 0;\r\n    this.progTimerMax = 0;\r\n    this.triangleCounter = 0;\r\n    this.isEnabled = false;\r\n    this.sampleCondition = false;\r\n    this.lengthCounter = 0;\r\n    this.lengthCounterEnable = false;\r\n    this.linearCounter = 0;\r\n    this.lcLoadValue = 0;\r\n    this.lcHalt = true;\r\n    this.lcControl = false;\r\n    this.tmp = 0;\r\n    this.sampleValue = 0xf;\r\n  },\r\n\r\n  clockLengthCounter: function () {\r\n    if (this.lengthCounterEnable && this.lengthCounter > 0) {\r\n      this.lengthCounter--;\r\n      if (this.lengthCounter === 0) {\r\n        this.updateSampleCondition();\r\n      }\r\n    }\r\n  },\r\n\r\n  clockLinearCounter: function () {\r\n    if (this.lcHalt) {\r\n      // Load:\r\n      this.linearCounter = this.lcLoadValue;\r\n      this.updateSampleCondition();\r\n    } else if (this.linearCounter > 0) {\r\n      // Decrement:\r\n      this.linearCounter--;\r\n      this.updateSampleCondition();\r\n    }\r\n    if (!this.lcControl) {\r\n      // Clear halt flag:\r\n      this.lcHalt = false;\r\n    }\r\n  },\r\n\r\n  getLengthStatus: function () {\r\n    return this.lengthCounter === 0 || !this.isEnabled ? 0 : 1;\r\n  },\r\n\r\n  // eslint-disable-next-line no-unused-vars\r\n  readReg: function (address) {\r\n    return 0;\r\n  },\r\n\r\n  writeReg: function (address, value) {\r\n    if (address === 0x4008) {\r\n      // New values for linear counter:\r\n      this.lcControl = (value & 0x80) !== 0;\r\n      this.lcLoadValue = value & 0x7f;\r\n\r\n      // Length counter enable:\r\n      this.lengthCounterEnable = !this.lcControl;\r\n    } else if (address === 0x400a) {\r\n      // Programmable timer:\r\n      this.progTimerMax &= 0x700;\r\n      this.progTimerMax |= value;\r\n    } else if (address === 0x400b) {\r\n      // Programmable timer, length counter\r\n      this.progTimerMax &= 0xff;\r\n      this.progTimerMax |= (value & 0x07) << 8;\r\n      this.lengthCounter = this.papu.getLengthMax(value & 0xf8);\r\n      this.lcHalt = true;\r\n    }\r\n\r\n    this.updateSampleCondition();\r\n  },\r\n\r\n  clockProgrammableTimer: function (nCycles) {\r\n    if (this.progTimerMax > 0) {\r\n      this.progTimerCount += nCycles;\r\n      while (\r\n        this.progTimerMax > 0 &&\r\n        this.progTimerCount >= this.progTimerMax\r\n      ) {\r\n        this.progTimerCount -= this.progTimerMax;\r\n        if (\r\n          this.isEnabled &&\r\n          this.lengthCounter > 0 &&\r\n          this.linearCounter > 0\r\n        ) {\r\n          this.clockTriangleGenerator();\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  clockTriangleGenerator: function () {\r\n    this.triangleCounter++;\r\n    this.triangleCounter &= 0x1f;\r\n  },\r\n\r\n  setEnabled: function (value) {\r\n    this.isEnabled = value;\r\n    if (!value) {\r\n      this.lengthCounter = 0;\r\n    }\r\n    this.updateSampleCondition();\r\n  },\r\n\r\n  updateSampleCondition: function () {\r\n    this.sampleCondition =\r\n      this.isEnabled &&\r\n      this.progTimerMax > 7 &&\r\n      this.linearCounter > 0 &&\r\n      this.lengthCounter > 0;\r\n  },\r\n};\r\n\r\nmodule.exports = PAPU;\r\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Mappers = __webpack_require__(9);\r\nvar Tile = __webpack_require__(2);\r\n\r\nvar ROM = function (nes) {\r\n  this.nes = nes;\r\n\r\n  this.mapperName = new Array(92);\r\n\r\n  for (var i = 0; i < 92; i++) {\r\n    this.mapperName[i] = \"Unknown Mapper\";\r\n  }\r\n  this.mapperName[0] = \"Direct Access\";\r\n  this.mapperName[1] = \"Nintendo MMC1\";\r\n  this.mapperName[2] = \"UNROM\";\r\n  this.mapperName[3] = \"CNROM\";\r\n  this.mapperName[4] = \"Nintendo MMC3\";\r\n  this.mapperName[5] = \"Nintendo MMC5\";\r\n  this.mapperName[6] = \"FFE F4xxx\";\r\n  this.mapperName[7] = \"AOROM\";\r\n  this.mapperName[8] = \"FFE F3xxx\";\r\n  this.mapperName[9] = \"Nintendo MMC2\";\r\n  this.mapperName[10] = \"Nintendo MMC4\";\r\n  this.mapperName[11] = \"Color Dreams Chip\";\r\n  this.mapperName[12] = \"FFE F6xxx\";\r\n  this.mapperName[15] = \"100-in-1 switch\";\r\n  this.mapperName[16] = \"Bandai chip\";\r\n  this.mapperName[17] = \"FFE F8xxx\";\r\n  this.mapperName[18] = \"Jaleco SS8806 chip\";\r\n  this.mapperName[19] = \"Namcot 106 chip\";\r\n  this.mapperName[20] = \"Famicom Disk System\";\r\n  this.mapperName[21] = \"Konami VRC4a\";\r\n  this.mapperName[22] = \"Konami VRC2a\";\r\n  this.mapperName[23] = \"Konami VRC2a\";\r\n  this.mapperName[24] = \"Konami VRC6\";\r\n  this.mapperName[25] = \"Konami VRC4b\";\r\n  this.mapperName[32] = \"Irem G-101 chip\";\r\n  this.mapperName[33] = \"Taito TC0190/TC0350\";\r\n  this.mapperName[34] = \"32kB ROM switch\";\r\n\r\n  this.mapperName[64] = \"Tengen RAMBO-1 chip\";\r\n  this.mapperName[65] = \"Irem H-3001 chip\";\r\n  this.mapperName[66] = \"GNROM switch\";\r\n  this.mapperName[67] = \"SunSoft3 chip\";\r\n  this.mapperName[68] = \"SunSoft4 chip\";\r\n  this.mapperName[69] = \"SunSoft5 FME-7 chip\";\r\n  this.mapperName[71] = \"Camerica chip\";\r\n  this.mapperName[78] = \"Irem 74HC161/32-based\";\r\n  this.mapperName[91] = \"Pirate HK-SF3 chip\";\r\n};\r\n\r\nROM.prototype = {\r\n  // Mirroring types:\r\n  VERTICAL_MIRRORING: 0,\r\n  HORIZONTAL_MIRRORING: 1,\r\n  FOURSCREEN_MIRRORING: 2,\r\n  SINGLESCREEN_MIRRORING: 3,\r\n  SINGLESCREEN_MIRRORING2: 4,\r\n  SINGLESCREEN_MIRRORING3: 5,\r\n  SINGLESCREEN_MIRRORING4: 6,\r\n  CHRROM_MIRRORING: 7,\r\n\r\n  header: null,\r\n  rom: null,\r\n  vrom: null,\r\n  vromTile: null,\r\n\r\n  romCount: null,\r\n  vromCount: null,\r\n  mirroring: null,\r\n  batteryRam: null,\r\n  trainer: null,\r\n  fourScreen: null,\r\n  mapperType: null,\r\n  valid: false,\r\n\r\n  load: function (data) {\r\n    var i, j, v;\r\n\r\n    if (data.indexOf(\"NES\\x1a\") === -1) {\r\n      throw new Error(\"Not a valid NES ROM.\");\r\n    }\r\n    this.header = new Array(16);\r\n    for (i = 0; i < 16; i++) {\r\n      this.header[i] = data.charCodeAt(i) & 0xff;\r\n    }\r\n    this.romCount = this.header[4];\r\n    this.vromCount = this.header[5] * 2; // Get the number of 4kB banks, not 8kB\r\n    this.mirroring = (this.header[6] & 1) !== 0 ? 1 : 0;\r\n    this.batteryRam = (this.header[6] & 2) !== 0;\r\n    this.trainer = (this.header[6] & 4) !== 0;\r\n    this.fourScreen = (this.header[6] & 8) !== 0;\r\n    this.mapperType = (this.header[6] >> 4) | (this.header[7] & 0xf0);\r\n    /* TODO\r\n        if (this.batteryRam)\r\n            this.loadBatteryRam();*/\r\n    // Check whether byte 8-15 are zero's:\r\n    var foundError = false;\r\n    for (i = 8; i < 16; i++) {\r\n      if (this.header[i] !== 0) {\r\n        foundError = true;\r\n        break;\r\n      }\r\n    }\r\n    if (foundError) {\r\n      this.mapperType &= 0xf; // Ignore byte 7\r\n    }\r\n    // Load PRG-ROM banks:\r\n    this.rom = new Array(this.romCount);\r\n    var offset = 16;\r\n    for (i = 0; i < this.romCount; i++) {\r\n      this.rom[i] = new Array(16384);\r\n      for (j = 0; j < 16384; j++) {\r\n        if (offset + j >= data.length) {\r\n          break;\r\n        }\r\n        this.rom[i][j] = data.charCodeAt(offset + j) & 0xff;\r\n      }\r\n      offset += 16384;\r\n    }\r\n    // Load CHR-ROM banks:\r\n    this.vrom = new Array(this.vromCount);\r\n    for (i = 0; i < this.vromCount; i++) {\r\n      this.vrom[i] = new Array(4096);\r\n      for (j = 0; j < 4096; j++) {\r\n        if (offset + j >= data.length) {\r\n          break;\r\n        }\r\n        this.vrom[i][j] = data.charCodeAt(offset + j) & 0xff;\r\n      }\r\n      offset += 4096;\r\n    }\r\n\r\n    // Create VROM tiles:\r\n    this.vromTile = new Array(this.vromCount);\r\n    for (i = 0; i < this.vromCount; i++) {\r\n      this.vromTile[i] = new Array(256);\r\n      for (j = 0; j < 256; j++) {\r\n        this.vromTile[i][j] = new Tile();\r\n      }\r\n    }\r\n\r\n    // Convert CHR-ROM banks to tiles:\r\n    var tileIndex;\r\n    var leftOver;\r\n    for (v = 0; v < this.vromCount; v++) {\r\n      for (i = 0; i < 4096; i++) {\r\n        tileIndex = i >> 4;\r\n        leftOver = i % 16;\r\n        if (leftOver < 8) {\r\n          this.vromTile[v][tileIndex].setScanline(\r\n            leftOver,\r\n            this.vrom[v][i],\r\n            this.vrom[v][i + 8]\r\n          );\r\n        } else {\r\n          this.vromTile[v][tileIndex].setScanline(\r\n            leftOver - 8,\r\n            this.vrom[v][i - 8],\r\n            this.vrom[v][i]\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    this.valid = true;\r\n  },\r\n\r\n  getMirroringType: function () {\r\n    if (this.fourScreen) {\r\n      return this.FOURSCREEN_MIRRORING;\r\n    }\r\n    if (this.mirroring === 0) {\r\n      return this.HORIZONTAL_MIRRORING;\r\n    }\r\n    return this.VERTICAL_MIRRORING;\r\n  },\r\n\r\n  getMapperName: function () {\r\n    if (this.mapperType >= 0 && this.mapperType < this.mapperName.length) {\r\n      return this.mapperName[this.mapperType];\r\n    }\r\n    return \"Unknown Mapper, \" + this.mapperType;\r\n  },\r\n\r\n  mapperSupported: function () {\r\n    return typeof Mappers[this.mapperType] !== \"undefined\";\r\n  },\r\n\r\n  createMapper: function () {\r\n    if (this.mapperSupported()) {\r\n      return new Mappers[this.mapperType](this.nes);\r\n    } else {\r\n      throw new Error(\r\n        \"This ROM uses a mapper not supported by JSNES: \" +\r\n          this.getMapperName() +\r\n          \"(\" +\r\n          this.mapperType +\r\n          \")\"\r\n      );\r\n    }\r\n  },\r\n};\r\n\r\nmodule.exports = ROM;\r\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar utils = __webpack_require__(0);\r\n\r\nvar Mappers = {};\r\n\r\nMappers[0] = function (nes) {\r\n  this.nes = nes;\r\n};\r\n\r\nMappers[0].prototype = {\r\n  reset: function () {\r\n    this.joy1StrobeState = 0;\r\n    this.joy2StrobeState = 0;\r\n    this.joypadLastWrite = 0;\r\n\r\n    this.zapperFired = false;\r\n    this.zapperX = null;\r\n    this.zapperY = null;\r\n  },\r\n\r\n  write: function (address, value) {\r\n    if (address < 0x2000) {\r\n      // Mirroring of RAM:\r\n      this.nes.cpu.mem[address & 0x7ff] = value;\r\n    } else if (address > 0x4017) {\r\n      this.nes.cpu.mem[address] = value;\r\n      if (address >= 0x6000 && address < 0x8000) {\r\n        // Write to persistent RAM\r\n        this.nes.opts.onBatteryRamWrite(address, value);\r\n      }\r\n    } else if (address > 0x2007 && address < 0x4000) {\r\n      this.regWrite(0x2000 + (address & 0x7), value);\r\n    } else {\r\n      this.regWrite(address, value);\r\n    }\r\n  },\r\n\r\n  writelow: function (address, value) {\r\n    if (address < 0x2000) {\r\n      // Mirroring of RAM:\r\n      this.nes.cpu.mem[address & 0x7ff] = value;\r\n    } else if (address > 0x4017) {\r\n      this.nes.cpu.mem[address] = value;\r\n    } else if (address > 0x2007 && address < 0x4000) {\r\n      this.regWrite(0x2000 + (address & 0x7), value);\r\n    } else {\r\n      this.regWrite(address, value);\r\n    }\r\n  },\r\n\r\n  load: function (address) {\r\n    // Wrap around:\r\n    address &= 0xffff;\r\n\r\n    // Check address range:\r\n    if (address > 0x4017) {\r\n      // ROM:\r\n      return this.nes.cpu.mem[address];\r\n    } else if (address >= 0x2000) {\r\n      // I/O Ports.\r\n      return this.regLoad(address);\r\n    } else {\r\n      // RAM (mirrored)\r\n      return this.nes.cpu.mem[address & 0x7ff];\r\n    }\r\n  },\r\n\r\n  regLoad: function (address) {\r\n    switch (\r\n      address >> 12 // use fourth nibble (0xF000)\r\n    ) {\r\n      case 0:\r\n        break;\r\n\r\n      case 1:\r\n        break;\r\n\r\n      case 2:\r\n      // Fall through to case 3\r\n      case 3:\r\n        // PPU Registers\r\n        switch (address & 0x7) {\r\n          case 0x0:\r\n            // 0x2000:\r\n            // PPU Control Register 1.\r\n            // (the value is stored both\r\n            // in main memory and in the\r\n            // PPU as flags):\r\n            // (not in the real NES)\r\n            return this.nes.cpu.mem[0x2000];\r\n\r\n          case 0x1:\r\n            // 0x2001:\r\n            // PPU Control Register 2.\r\n            // (the value is stored both\r\n            // in main memory and in the\r\n            // PPU as flags):\r\n            // (not in the real NES)\r\n            return this.nes.cpu.mem[0x2001];\r\n\r\n          case 0x2:\r\n            // 0x2002:\r\n            // PPU Status Register.\r\n            // The value is stored in\r\n            // main memory in addition\r\n            // to as flags in the PPU.\r\n            // (not in the real NES)\r\n            return this.nes.ppu.readStatusRegister();\r\n\r\n          case 0x3:\r\n            return 0;\r\n\r\n          case 0x4:\r\n            // 0x2004:\r\n            // Sprite Memory read.\r\n            return this.nes.ppu.sramLoad();\r\n          case 0x5:\r\n            return 0;\r\n\r\n          case 0x6:\r\n            return 0;\r\n\r\n          case 0x7:\r\n            // 0x2007:\r\n            // VRAM read:\r\n            return this.nes.ppu.vramLoad();\r\n        }\r\n        break;\r\n      case 4:\r\n        // Sound+Joypad registers\r\n        switch (address - 0x4015) {\r\n          case 0:\r\n            // 0x4015:\r\n            // Sound channel enable, DMC Status\r\n            return this.nes.papu.readReg(address);\r\n\r\n          case 1:\r\n            // 0x4016:\r\n            // Joystick 1 + Strobe\r\n            return this.joy1Read();\r\n\r\n          case 2:\r\n            // 0x4017:\r\n            // Joystick 2 + Strobe\r\n            // https://wiki.nesdev.com/w/index.php/Zapper\r\n            var w;\r\n\r\n            if (\r\n              this.zapperX !== null &&\r\n              this.zapperY !== null &&\r\n              this.nes.ppu.isPixelWhite(this.zapperX, this.zapperY)\r\n            ) {\r\n              w = 0;\r\n            } else {\r\n              w = 0x1 << 3;\r\n            }\r\n\r\n            if (this.zapperFired) {\r\n              w |= 0x1 << 4;\r\n            }\r\n            return (this.joy2Read() | w) & 0xffff;\r\n        }\r\n        break;\r\n    }\r\n    return 0;\r\n  },\r\n\r\n  regWrite: function (address, value) {\r\n    switch (address) {\r\n      case 0x2000:\r\n        // PPU Control register 1\r\n        this.nes.cpu.mem[address] = value;\r\n        this.nes.ppu.updateControlReg1(value);\r\n        break;\r\n\r\n      case 0x2001:\r\n        // PPU Control register 2\r\n        this.nes.cpu.mem[address] = value;\r\n        this.nes.ppu.updateControlReg2(value);\r\n        break;\r\n\r\n      case 0x2003:\r\n        // Set Sprite RAM address:\r\n        this.nes.ppu.writeSRAMAddress(value);\r\n        break;\r\n\r\n      case 0x2004:\r\n        // Write to Sprite RAM:\r\n        this.nes.ppu.sramWrite(value);\r\n        break;\r\n\r\n      case 0x2005:\r\n        // Screen Scroll offsets:\r\n        this.nes.ppu.scrollWrite(value);\r\n        break;\r\n\r\n      case 0x2006:\r\n        // Set VRAM address:\r\n        this.nes.ppu.writeVRAMAddress(value);\r\n        break;\r\n\r\n      case 0x2007:\r\n        // Write to VRAM:\r\n        this.nes.ppu.vramWrite(value);\r\n        break;\r\n\r\n      case 0x4014:\r\n        // Sprite Memory DMA Access\r\n        this.nes.ppu.sramDMA(value);\r\n        break;\r\n\r\n      case 0x4015:\r\n        // Sound Channel Switch, DMC Status\r\n        this.nes.papu.writeReg(address, value);\r\n        break;\r\n\r\n      case 0x4016:\r\n        // Joystick 1 + Strobe\r\n        if ((value & 1) === 0 && (this.joypadLastWrite & 1) === 1) {\r\n          this.joy1StrobeState = 0;\r\n          this.joy2StrobeState = 0;\r\n        }\r\n        this.joypadLastWrite = value;\r\n        break;\r\n\r\n      case 0x4017:\r\n        // Sound channel frame sequencer:\r\n        this.nes.papu.writeReg(address, value);\r\n        break;\r\n\r\n      default:\r\n        // Sound registers\r\n        // console.log(\"write to sound reg\");\r\n        if (address >= 0x4000 && address <= 0x4017) {\r\n          this.nes.papu.writeReg(address, value);\r\n        }\r\n    }\r\n  },\r\n\r\n  joy1Read: function () {\r\n    var ret;\r\n\r\n    switch (this.joy1StrobeState) {\r\n      case 0:\r\n      case 1:\r\n      case 2:\r\n      case 3:\r\n      case 4:\r\n      case 5:\r\n      case 6:\r\n      case 7:\r\n        ret = this.nes.controllers[1].state[this.joy1StrobeState];\r\n        break;\r\n      case 8:\r\n      case 9:\r\n      case 10:\r\n      case 11:\r\n      case 12:\r\n      case 13:\r\n      case 14:\r\n      case 15:\r\n      case 16:\r\n      case 17:\r\n      case 18:\r\n        ret = 0;\r\n        break;\r\n      case 19:\r\n        ret = 1;\r\n        break;\r\n      default:\r\n        ret = 0;\r\n    }\r\n\r\n    this.joy1StrobeState++;\r\n    if (this.joy1StrobeState === 24) {\r\n      this.joy1StrobeState = 0;\r\n    }\r\n\r\n    return ret;\r\n  },\r\n\r\n  joy2Read: function () {\r\n    var ret;\r\n\r\n    switch (this.joy2StrobeState) {\r\n      case 0:\r\n      case 1:\r\n      case 2:\r\n      case 3:\r\n      case 4:\r\n      case 5:\r\n      case 6:\r\n      case 7:\r\n        ret = this.nes.controllers[2].state[this.joy2StrobeState];\r\n        break;\r\n      case 8:\r\n      case 9:\r\n      case 10:\r\n      case 11:\r\n      case 12:\r\n      case 13:\r\n      case 14:\r\n      case 15:\r\n      case 16:\r\n      case 17:\r\n      case 18:\r\n        ret = 0;\r\n        break;\r\n      case 19:\r\n        ret = 1;\r\n        break;\r\n      default:\r\n        ret = 0;\r\n    }\r\n\r\n    this.joy2StrobeState++;\r\n    if (this.joy2StrobeState === 24) {\r\n      this.joy2StrobeState = 0;\r\n    }\r\n\r\n    return ret;\r\n  },\r\n\r\n  loadROM: function () {\r\n    if (!this.nes.rom.valid || this.nes.rom.romCount < 1) {\r\n      throw new Error(\"NoMapper: Invalid ROM! Unable to load.\");\r\n    }\r\n\r\n    // Load ROM into memory:\r\n    this.loadPRGROM();\r\n\r\n    // Load CHR-ROM:\r\n    this.loadCHRROM();\r\n\r\n    // Load Battery RAM (if present):\r\n    this.loadBatteryRam();\r\n\r\n    // Reset IRQ:\r\n    //nes.getCpu().doResetInterrupt();\r\n    this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\r\n  },\r\n\r\n  loadPRGROM: function () {\r\n    if (this.nes.rom.romCount > 1) {\r\n      // Load the two first banks into memory.\r\n      this.loadRomBank(0, 0x8000);\r\n      this.loadRomBank(1, 0xc000);\r\n    } else {\r\n      // Load the one bank into both memory locations:\r\n      this.loadRomBank(0, 0x8000);\r\n      this.loadRomBank(0, 0xc000);\r\n    }\r\n  },\r\n\r\n  loadCHRROM: function () {\r\n    // console.log(\"Loading CHR ROM..\");\r\n    if (this.nes.rom.vromCount > 0) {\r\n      if (this.nes.rom.vromCount === 1) {\r\n        this.loadVromBank(0, 0x0000);\r\n        this.loadVromBank(0, 0x1000);\r\n      } else {\r\n        this.loadVromBank(0, 0x0000);\r\n        this.loadVromBank(1, 0x1000);\r\n      }\r\n    } else {\r\n      //System.out.println(\"There aren't any CHR-ROM banks..\");\r\n    }\r\n  },\r\n\r\n  loadBatteryRam: function () {\r\n    if (this.nes.rom.batteryRam) {\r\n      var ram = this.nes.rom.batteryRam;\r\n      if (ram !== null && ram.length === 0x2000) {\r\n        // Load Battery RAM into memory:\r\n        utils.copyArrayElements(ram, 0, this.nes.cpu.mem, 0x6000, 0x2000);\r\n      }\r\n    }\r\n  },\r\n\r\n  loadRomBank: function (bank, address) {\r\n    // Loads a ROM bank into the specified address.\r\n    bank %= this.nes.rom.romCount;\r\n    //var data = this.nes.rom.rom[bank];\r\n    //cpuMem.write(address,data,data.length);\r\n    utils.copyArrayElements(\r\n      this.nes.rom.rom[bank],\r\n      0,\r\n      this.nes.cpu.mem,\r\n      address,\r\n      16384\r\n    );\r\n  },\r\n\r\n  loadVromBank: function (bank, address) {\r\n    if (this.nes.rom.vromCount === 0) {\r\n      return;\r\n    }\r\n    this.nes.ppu.triggerRendering();\r\n\r\n    utils.copyArrayElements(\r\n      this.nes.rom.vrom[bank % this.nes.rom.vromCount],\r\n      0,\r\n      this.nes.ppu.vramMem,\r\n      address,\r\n      4096\r\n    );\r\n\r\n    var vromTile = this.nes.rom.vromTile[bank % this.nes.rom.vromCount];\r\n    utils.copyArrayElements(\r\n      vromTile,\r\n      0,\r\n      this.nes.ppu.ptTile,\r\n      address >> 4,\r\n      256\r\n    );\r\n  },\r\n\r\n  load32kRomBank: function (bank, address) {\r\n    this.loadRomBank((bank * 2) % this.nes.rom.romCount, address);\r\n    this.loadRomBank((bank * 2 + 1) % this.nes.rom.romCount, address + 16384);\r\n  },\r\n\r\n  load8kVromBank: function (bank4kStart, address) {\r\n    if (this.nes.rom.vromCount === 0) {\r\n      return;\r\n    }\r\n    this.nes.ppu.triggerRendering();\r\n\r\n    this.loadVromBank(bank4kStart % this.nes.rom.vromCount, address);\r\n    this.loadVromBank(\r\n      (bank4kStart + 1) % this.nes.rom.vromCount,\r\n      address + 4096\r\n    );\r\n  },\r\n\r\n  load1kVromBank: function (bank1k, address) {\r\n    if (this.nes.rom.vromCount === 0) {\r\n      return;\r\n    }\r\n    this.nes.ppu.triggerRendering();\r\n\r\n    var bank4k = Math.floor(bank1k / 4) % this.nes.rom.vromCount;\r\n    var bankoffset = (bank1k % 4) * 1024;\r\n    utils.copyArrayElements(\r\n      this.nes.rom.vrom[bank4k],\r\n      bankoffset,\r\n      this.nes.ppu.vramMem,\r\n      address,\r\n      1024\r\n    );\r\n\r\n    // Update tiles:\r\n    var vromTile = this.nes.rom.vromTile[bank4k];\r\n    var baseIndex = address >> 4;\r\n    for (var i = 0; i < 64; i++) {\r\n      this.nes.ppu.ptTile[baseIndex + i] = vromTile[(bank1k % 4 << 6) + i];\r\n    }\r\n  },\r\n\r\n  load2kVromBank: function (bank2k, address) {\r\n    if (this.nes.rom.vromCount === 0) {\r\n      return;\r\n    }\r\n    this.nes.ppu.triggerRendering();\r\n\r\n    var bank4k = Math.floor(bank2k / 2) % this.nes.rom.vromCount;\r\n    var bankoffset = (bank2k % 2) * 2048;\r\n    utils.copyArrayElements(\r\n      this.nes.rom.vrom[bank4k],\r\n      bankoffset,\r\n      this.nes.ppu.vramMem,\r\n      address,\r\n      2048\r\n    );\r\n\r\n    // Update tiles:\r\n    var vromTile = this.nes.rom.vromTile[bank4k];\r\n    var baseIndex = address >> 4;\r\n    for (var i = 0; i < 128; i++) {\r\n      this.nes.ppu.ptTile[baseIndex + i] = vromTile[(bank2k % 2 << 7) + i];\r\n    }\r\n  },\r\n\r\n  load8kRomBank: function (bank8k, address) {\r\n    var bank16k = Math.floor(bank8k / 2) % this.nes.rom.romCount;\r\n    var offset = (bank8k % 2) * 8192;\r\n\r\n    //this.nes.cpu.mem.write(address,this.nes.rom.rom[bank16k],offset,8192);\r\n    utils.copyArrayElements(\r\n      this.nes.rom.rom[bank16k],\r\n      offset,\r\n      this.nes.cpu.mem,\r\n      address,\r\n      8192\r\n    );\r\n  },\r\n\r\n  clockIrqCounter: function () {\r\n    // Does nothing. This is used by the MMC3 mapper.\r\n  },\r\n\r\n  // eslint-disable-next-line no-unused-vars\r\n  latchAccess: function (address) {\r\n    // Does nothing. This is used by MMC2.\r\n  },\r\n\r\n  toJSON: function () {\r\n    return {\r\n      joy1StrobeState: this.joy1StrobeState,\r\n      joy2StrobeState: this.joy2StrobeState,\r\n      joypadLastWrite: this.joypadLastWrite,\r\n    };\r\n  },\r\n\r\n  fromJSON: function (s) {\r\n    this.joy1StrobeState = s.joy1StrobeState;\r\n    this.joy2StrobeState = s.joy2StrobeState;\r\n    this.joypadLastWrite = s.joypadLastWrite;\r\n  },\r\n};\r\n\r\nMappers[1] = function (nes) {\r\n  this.nes = nes;\r\n};\r\n\r\nMappers[1].prototype = new Mappers[0]();\r\n\r\nMappers[1].prototype.reset = function () {\r\n  Mappers[0].prototype.reset.apply(this);\r\n\r\n  // 5-bit buffer:\r\n  this.regBuffer = 0;\r\n  this.regBufferCounter = 0;\r\n\r\n  // Register 0:\r\n  this.mirroring = 0;\r\n  this.oneScreenMirroring = 0;\r\n  this.prgSwitchingArea = 1;\r\n  this.prgSwitchingSize = 1;\r\n  this.vromSwitchingSize = 0;\r\n\r\n  // Register 1:\r\n  this.romSelectionReg0 = 0;\r\n\r\n  // Register 2:\r\n  this.romSelectionReg1 = 0;\r\n\r\n  // Register 3:\r\n  this.romBankSelect = 0;\r\n};\r\n\r\nMappers[1].prototype.write = function (address, value) {\r\n  // Writes to addresses other than MMC registers are handled by NoMapper.\r\n  if (address < 0x8000) {\r\n    Mappers[0].prototype.write.apply(this, arguments);\r\n    return;\r\n  }\r\n\r\n  // See what should be done with the written value:\r\n  if ((value & 128) !== 0) {\r\n    // Reset buffering:\r\n    this.regBufferCounter = 0;\r\n    this.regBuffer = 0;\r\n\r\n    // Reset register:\r\n    if (this.getRegNumber(address) === 0) {\r\n      this.prgSwitchingArea = 1;\r\n      this.prgSwitchingSize = 1;\r\n    }\r\n  } else {\r\n    // Continue buffering:\r\n    //regBuffer = (regBuffer & (0xFF-(1<<regBufferCounter))) | ((value & (1<<regBufferCounter))<<regBufferCounter);\r\n    this.regBuffer =\r\n      (this.regBuffer & (0xff - (1 << this.regBufferCounter))) |\r\n      ((value & 1) << this.regBufferCounter);\r\n    this.regBufferCounter++;\r\n\r\n    if (this.regBufferCounter === 5) {\r\n      // Use the buffered value:\r\n      this.setReg(this.getRegNumber(address), this.regBuffer);\r\n\r\n      // Reset buffer:\r\n      this.regBuffer = 0;\r\n      this.regBufferCounter = 0;\r\n    }\r\n  }\r\n};\r\n\r\nMappers[1].prototype.setReg = function (reg, value) {\r\n  var tmp;\r\n\r\n  switch (reg) {\r\n    case 0:\r\n      // Mirroring:\r\n      tmp = value & 3;\r\n      if (tmp !== this.mirroring) {\r\n        // Set mirroring:\r\n        this.mirroring = tmp;\r\n        if ((this.mirroring & 2) === 0) {\r\n          // SingleScreen mirroring overrides the other setting:\r\n          this.nes.ppu.setMirroring(this.nes.rom.SINGLESCREEN_MIRRORING);\r\n        } else if ((this.mirroring & 1) !== 0) {\r\n          // Not overridden by SingleScreen mirroring.\r\n          this.nes.ppu.setMirroring(this.nes.rom.HORIZONTAL_MIRRORING);\r\n        } else {\r\n          this.nes.ppu.setMirroring(this.nes.rom.VERTICAL_MIRRORING);\r\n        }\r\n      }\r\n\r\n      // PRG Switching Area;\r\n      this.prgSwitchingArea = (value >> 2) & 1;\r\n\r\n      // PRG Switching Size:\r\n      this.prgSwitchingSize = (value >> 3) & 1;\r\n\r\n      // VROM Switching Size:\r\n      this.vromSwitchingSize = (value >> 4) & 1;\r\n\r\n      break;\r\n\r\n    case 1:\r\n      // ROM selection:\r\n      this.romSelectionReg0 = (value >> 4) & 1;\r\n\r\n      // Check whether the cart has VROM:\r\n      if (this.nes.rom.vromCount > 0) {\r\n        // Select VROM bank at 0x0000:\r\n        if (this.vromSwitchingSize === 0) {\r\n          // Swap 8kB VROM:\r\n          if (this.romSelectionReg0 === 0) {\r\n            this.load8kVromBank(value & 0xf, 0x0000);\r\n          } else {\r\n            this.load8kVromBank(\r\n              Math.floor(this.nes.rom.vromCount / 2) + (value & 0xf),\r\n              0x0000\r\n            );\r\n          }\r\n        } else {\r\n          // Swap 4kB VROM:\r\n          if (this.romSelectionReg0 === 0) {\r\n            this.loadVromBank(value & 0xf, 0x0000);\r\n          } else {\r\n            this.loadVromBank(\r\n              Math.floor(this.nes.rom.vromCount / 2) + (value & 0xf),\r\n              0x0000\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      break;\r\n\r\n    case 2:\r\n      // ROM selection:\r\n      this.romSelectionReg1 = (value >> 4) & 1;\r\n\r\n      // Check whether the cart has VROM:\r\n      if (this.nes.rom.vromCount > 0) {\r\n        // Select VROM bank at 0x1000:\r\n        if (this.vromSwitchingSize === 1) {\r\n          // Swap 4kB of VROM:\r\n          if (this.romSelectionReg1 === 0) {\r\n            this.loadVromBank(value & 0xf, 0x1000);\r\n          } else {\r\n            this.loadVromBank(\r\n              Math.floor(this.nes.rom.vromCount / 2) + (value & 0xf),\r\n              0x1000\r\n            );\r\n          }\r\n        }\r\n      }\r\n      break;\r\n\r\n    default:\r\n      // Select ROM bank:\r\n      // -------------------------\r\n      tmp = value & 0xf;\r\n      var bank;\r\n      var baseBank = 0;\r\n\r\n      if (this.nes.rom.romCount >= 32) {\r\n        // 1024 kB cart\r\n        if (this.vromSwitchingSize === 0) {\r\n          if (this.romSelectionReg0 === 1) {\r\n            baseBank = 16;\r\n          }\r\n        } else {\r\n          baseBank =\r\n            (this.romSelectionReg0 | (this.romSelectionReg1 << 1)) << 3;\r\n        }\r\n      } else if (this.nes.rom.romCount >= 16) {\r\n        // 512 kB cart\r\n        if (this.romSelectionReg0 === 1) {\r\n          baseBank = 8;\r\n        }\r\n      }\r\n\r\n      if (this.prgSwitchingSize === 0) {\r\n        // 32kB\r\n        bank = baseBank + (value & 0xf);\r\n        this.load32kRomBank(bank, 0x8000);\r\n      } else {\r\n        // 16kB\r\n        bank = baseBank * 2 + (value & 0xf);\r\n        if (this.prgSwitchingArea === 0) {\r\n          this.loadRomBank(bank, 0xc000);\r\n        } else {\r\n          this.loadRomBank(bank, 0x8000);\r\n        }\r\n      }\r\n  }\r\n};\r\n\r\n// Returns the register number from the address written to:\r\nMappers[1].prototype.getRegNumber = function (address) {\r\n  if (address >= 0x8000 && address <= 0x9fff) {\r\n    return 0;\r\n  } else if (address >= 0xa000 && address <= 0xbfff) {\r\n    return 1;\r\n  } else if (address >= 0xc000 && address <= 0xdfff) {\r\n    return 2;\r\n  } else {\r\n    return 3;\r\n  }\r\n};\r\n\r\nMappers[1].prototype.loadROM = function () {\r\n  if (!this.nes.rom.valid) {\r\n    throw new Error(\"MMC1: Invalid ROM! Unable to load.\");\r\n  }\r\n\r\n  // Load PRG-ROM:\r\n  this.loadRomBank(0, 0x8000); //   First ROM bank..\r\n  this.loadRomBank(this.nes.rom.romCount - 1, 0xc000); // ..and last ROM bank.\r\n\r\n  // Load CHR-ROM:\r\n  this.loadCHRROM();\r\n\r\n  // Load Battery RAM (if present):\r\n  this.loadBatteryRam();\r\n\r\n  // Do Reset-Interrupt:\r\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\r\n};\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nMappers[1].prototype.switchLowHighPrgRom = function (oldSetting) {\r\n  // not yet.\r\n};\r\n\r\nMappers[1].prototype.switch16to32 = function () {\r\n  // not yet.\r\n};\r\n\r\nMappers[1].prototype.switch32to16 = function () {\r\n  // not yet.\r\n};\r\n\r\nMappers[1].prototype.toJSON = function () {\r\n  var s = Mappers[0].prototype.toJSON.apply(this);\r\n  s.mirroring = this.mirroring;\r\n  s.oneScreenMirroring = this.oneScreenMirroring;\r\n  s.prgSwitchingArea = this.prgSwitchingArea;\r\n  s.prgSwitchingSize = this.prgSwitchingSize;\r\n  s.vromSwitchingSize = this.vromSwitchingSize;\r\n  s.romSelectionReg0 = this.romSelectionReg0;\r\n  s.romSelectionReg1 = this.romSelectionReg1;\r\n  s.romBankSelect = this.romBankSelect;\r\n  s.regBuffer = this.regBuffer;\r\n  s.regBufferCounter = this.regBufferCounter;\r\n  return s;\r\n};\r\n\r\nMappers[1].prototype.fromJSON = function (s) {\r\n  Mappers[0].prototype.fromJSON.apply(this, arguments);\r\n  this.mirroring = s.mirroring;\r\n  this.oneScreenMirroring = s.oneScreenMirroring;\r\n  this.prgSwitchingArea = s.prgSwitchingArea;\r\n  this.prgSwitchingSize = s.prgSwitchingSize;\r\n  this.vromSwitchingSize = s.vromSwitchingSize;\r\n  this.romSelectionReg0 = s.romSelectionReg0;\r\n  this.romSelectionReg1 = s.romSelectionReg1;\r\n  this.romBankSelect = s.romBankSelect;\r\n  this.regBuffer = s.regBuffer;\r\n  this.regBufferCounter = s.regBufferCounter;\r\n};\r\n\r\nMappers[2] = function (nes) {\r\n  this.nes = nes;\r\n};\r\n\r\nMappers[2].prototype = new Mappers[0]();\r\n\r\nMappers[2].prototype.write = function (address, value) {\r\n  // Writes to addresses other than MMC registers are handled by NoMapper.\r\n  if (address < 0x8000) {\r\n    Mappers[0].prototype.write.apply(this, arguments);\r\n    return;\r\n  } else {\r\n    // This is a ROM bank select command.\r\n    // Swap in the given ROM bank at 0x8000:\r\n    this.loadRomBank(value, 0x8000);\r\n  }\r\n};\r\n\r\nMappers[2].prototype.loadROM = function () {\r\n  if (!this.nes.rom.valid) {\r\n    throw new Error(\"UNROM: Invalid ROM! Unable to load.\");\r\n  }\r\n\r\n  // Load PRG-ROM:\r\n  this.loadRomBank(0, 0x8000);\r\n  this.loadRomBank(this.nes.rom.romCount - 1, 0xc000);\r\n\r\n  // Load CHR-ROM:\r\n  this.loadCHRROM();\r\n\r\n  // Do Reset-Interrupt:\r\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\r\n};\r\n\r\n/**\r\n * Mapper 003 (CNROM)\r\n *\r\n * @constructor\r\n * @example Solomon's Key, Arkanoid, Arkista's Ring, Bump 'n' Jump, Cybernoid\r\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_003\r\n */\r\nMappers[3] = function (nes) {\r\n  this.nes = nes;\r\n};\r\n\r\nMappers[3].prototype = new Mappers[0]();\r\n\r\nMappers[3].prototype.write = function (address, value) {\r\n  // Writes to addresses other than MMC registers are handled by NoMapper.\r\n  if (address < 0x8000) {\r\n    Mappers[0].prototype.write.apply(this, arguments);\r\n    return;\r\n  } else {\r\n    // This is a ROM bank select command.\r\n    // Swap in the given ROM bank at 0x8000:\r\n    // This is a VROM bank select command.\r\n    // Swap in the given VROM bank at 0x0000:\r\n    var bank = (value % (this.nes.rom.vromCount / 2)) * 2;\r\n    this.loadVromBank(bank, 0x0000);\r\n    this.loadVromBank(bank + 1, 0x1000);\r\n    this.load8kVromBank(value * 2, 0x0000);\r\n  }\r\n};\r\n\r\nMappers[4] = function (nes) {\r\n  this.nes = nes;\r\n\r\n  this.CMD_SEL_2_1K_VROM_0000 = 0;\r\n  this.CMD_SEL_2_1K_VROM_0800 = 1;\r\n  this.CMD_SEL_1K_VROM_1000 = 2;\r\n  this.CMD_SEL_1K_VROM_1400 = 3;\r\n  this.CMD_SEL_1K_VROM_1800 = 4;\r\n  this.CMD_SEL_1K_VROM_1C00 = 5;\r\n  this.CMD_SEL_ROM_PAGE1 = 6;\r\n  this.CMD_SEL_ROM_PAGE2 = 7;\r\n\r\n  this.command = null;\r\n  this.prgAddressSelect = null;\r\n  this.chrAddressSelect = null;\r\n  this.pageNumber = null;\r\n  this.irqCounter = null;\r\n  this.irqLatchValue = null;\r\n  this.irqEnable = null;\r\n  this.prgAddressChanged = false;\r\n};\r\n\r\nMappers[4].prototype = new Mappers[0]();\r\n\r\nMappers[4].prototype.write = function (address, value) {\r\n  // Writes to addresses other than MMC registers are handled by NoMapper.\r\n  if (address < 0x8000) {\r\n    Mappers[0].prototype.write.apply(this, arguments);\r\n    return;\r\n  }\r\n\r\n  switch (address) {\r\n    case 0x8000:\r\n      // Command/Address Select register\r\n      this.command = value & 7;\r\n      var tmp = (value >> 6) & 1;\r\n      if (tmp !== this.prgAddressSelect) {\r\n        this.prgAddressChanged = true;\r\n      }\r\n      this.prgAddressSelect = tmp;\r\n      this.chrAddressSelect = (value >> 7) & 1;\r\n      break;\r\n\r\n    case 0x8001:\r\n      // Page number for command\r\n      this.executeCommand(this.command, value);\r\n      break;\r\n\r\n    case 0xa000:\r\n      // Mirroring select\r\n      if ((value & 1) !== 0) {\r\n        this.nes.ppu.setMirroring(this.nes.rom.HORIZONTAL_MIRRORING);\r\n      } else {\r\n        this.nes.ppu.setMirroring(this.nes.rom.VERTICAL_MIRRORING);\r\n      }\r\n      break;\r\n\r\n    case 0xa001:\r\n      // SaveRAM Toggle\r\n      // TODO\r\n      //nes.getRom().setSaveState((value&1)!=0);\r\n      break;\r\n\r\n    case 0xc000:\r\n      // IRQ Counter register\r\n      this.irqCounter = value;\r\n      //nes.ppu.mapperIrqCounter = 0;\r\n      break;\r\n\r\n    case 0xc001:\r\n      // IRQ Latch register\r\n      this.irqLatchValue = value;\r\n      break;\r\n\r\n    case 0xe000:\r\n      // IRQ Control Reg 0 (disable)\r\n      //irqCounter = irqLatchValue;\r\n      this.irqEnable = 0;\r\n      break;\r\n\r\n    case 0xe001:\r\n      // IRQ Control Reg 1 (enable)\r\n      this.irqEnable = 1;\r\n      break;\r\n\r\n    default:\r\n    // Not a MMC3 register.\r\n    // The game has probably crashed,\r\n    // since it tries to write to ROM..\r\n    // IGNORE.\r\n  }\r\n};\r\n\r\nMappers[4].prototype.executeCommand = function (cmd, arg) {\r\n  switch (cmd) {\r\n    case this.CMD_SEL_2_1K_VROM_0000:\r\n      // Select 2 1KB VROM pages at 0x0000:\r\n      if (this.chrAddressSelect === 0) {\r\n        this.load1kVromBank(arg, 0x0000);\r\n        this.load1kVromBank(arg + 1, 0x0400);\r\n      } else {\r\n        this.load1kVromBank(arg, 0x1000);\r\n        this.load1kVromBank(arg + 1, 0x1400);\r\n      }\r\n      break;\r\n\r\n    case this.CMD_SEL_2_1K_VROM_0800:\r\n      // Select 2 1KB VROM pages at 0x0800:\r\n      if (this.chrAddressSelect === 0) {\r\n        this.load1kVromBank(arg, 0x0800);\r\n        this.load1kVromBank(arg + 1, 0x0c00);\r\n      } else {\r\n        this.load1kVromBank(arg, 0x1800);\r\n        this.load1kVromBank(arg + 1, 0x1c00);\r\n      }\r\n      break;\r\n\r\n    case this.CMD_SEL_1K_VROM_1000:\r\n      // Select 1K VROM Page at 0x1000:\r\n      if (this.chrAddressSelect === 0) {\r\n        this.load1kVromBank(arg, 0x1000);\r\n      } else {\r\n        this.load1kVromBank(arg, 0x0000);\r\n      }\r\n      break;\r\n\r\n    case this.CMD_SEL_1K_VROM_1400:\r\n      // Select 1K VROM Page at 0x1400:\r\n      if (this.chrAddressSelect === 0) {\r\n        this.load1kVromBank(arg, 0x1400);\r\n      } else {\r\n        this.load1kVromBank(arg, 0x0400);\r\n      }\r\n      break;\r\n\r\n    case this.CMD_SEL_1K_VROM_1800:\r\n      // Select 1K VROM Page at 0x1800:\r\n      if (this.chrAddressSelect === 0) {\r\n        this.load1kVromBank(arg, 0x1800);\r\n      } else {\r\n        this.load1kVromBank(arg, 0x0800);\r\n      }\r\n      break;\r\n\r\n    case this.CMD_SEL_1K_VROM_1C00:\r\n      // Select 1K VROM Page at 0x1C00:\r\n      if (this.chrAddressSelect === 0) {\r\n        this.load1kVromBank(arg, 0x1c00);\r\n      } else {\r\n        this.load1kVromBank(arg, 0x0c00);\r\n      }\r\n      break;\r\n\r\n    case this.CMD_SEL_ROM_PAGE1:\r\n      if (this.prgAddressChanged) {\r\n        // Load the two hardwired banks:\r\n        if (this.prgAddressSelect === 0) {\r\n          this.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0xc000);\r\n        } else {\r\n          this.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0x8000);\r\n        }\r\n        this.prgAddressChanged = false;\r\n      }\r\n\r\n      // Select first switchable ROM page:\r\n      if (this.prgAddressSelect === 0) {\r\n        this.load8kRomBank(arg, 0x8000);\r\n      } else {\r\n        this.load8kRomBank(arg, 0xc000);\r\n      }\r\n      break;\r\n\r\n    case this.CMD_SEL_ROM_PAGE2:\r\n      // Select second switchable ROM page:\r\n      this.load8kRomBank(arg, 0xa000);\r\n\r\n      // hardwire appropriate bank:\r\n      if (this.prgAddressChanged) {\r\n        // Load the two hardwired banks:\r\n        if (this.prgAddressSelect === 0) {\r\n          this.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0xc000);\r\n        } else {\r\n          this.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0x8000);\r\n        }\r\n        this.prgAddressChanged = false;\r\n      }\r\n  }\r\n};\r\n\r\nMappers[4].prototype.loadROM = function () {\r\n  if (!this.nes.rom.valid) {\r\n    throw new Error(\"MMC3: Invalid ROM! Unable to load.\");\r\n  }\r\n\r\n  // Load hardwired PRG banks (0xC000 and 0xE000):\r\n  this.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0xc000);\r\n  this.load8kRomBank((this.nes.rom.romCount - 1) * 2 + 1, 0xe000);\r\n\r\n  // Load swappable PRG banks (0x8000 and 0xA000):\r\n  this.load8kRomBank(0, 0x8000);\r\n  this.load8kRomBank(1, 0xa000);\r\n\r\n  // Load CHR-ROM:\r\n  this.loadCHRROM();\r\n\r\n  // Load Battery RAM (if present):\r\n  this.loadBatteryRam();\r\n\r\n  // Do Reset-Interrupt:\r\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\r\n};\r\n\r\nMappers[4].prototype.clockIrqCounter = function () {\r\n  if (this.irqEnable === 1) {\r\n    this.irqCounter--;\r\n    if (this.irqCounter < 0) {\r\n      // Trigger IRQ:\r\n      //nes.getCpu().doIrq();\r\n      this.nes.cpu.requestIrq(this.nes.cpu.IRQ_NORMAL);\r\n      this.irqCounter = this.irqLatchValue;\r\n    }\r\n  }\r\n};\r\n\r\nMappers[4].prototype.toJSON = function () {\r\n  var s = Mappers[0].prototype.toJSON.apply(this);\r\n  s.command = this.command;\r\n  s.prgAddressSelect = this.prgAddressSelect;\r\n  s.chrAddressSelect = this.chrAddressSelect;\r\n  s.pageNumber = this.pageNumber;\r\n  s.irqCounter = this.irqCounter;\r\n  s.irqLatchValue = this.irqLatchValue;\r\n  s.irqEnable = this.irqEnable;\r\n  s.prgAddressChanged = this.prgAddressChanged;\r\n  return s;\r\n};\r\n\r\nMappers[4].prototype.fromJSON = function (s) {\r\n  Mappers[0].prototype.fromJSON.apply(this, arguments);\r\n  this.command = s.command;\r\n  this.prgAddressSelect = s.prgAddressSelect;\r\n  this.chrAddressSelect = s.chrAddressSelect;\r\n  this.pageNumber = s.pageNumber;\r\n  this.irqCounter = s.irqCounter;\r\n  this.irqLatchValue = s.irqLatchValue;\r\n  this.irqEnable = s.irqEnable;\r\n  this.prgAddressChanged = s.prgAddressChanged;\r\n};\r\n\r\n/**\r\n * Mapper005 (MMC5,ExROM)\r\n *\r\n * @example Castlevania 3, Just Breed, Uncharted Waters, Romance of the 3 Kingdoms 2, Laser Invasion, Metal Slader Glory, Uchuu Keibitai SDF, Shin 4 Nin Uchi Mahjong - Yakuman Tengoku\r\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_005\r\n * @constructor\r\n */\r\nMappers[5] = function (nes) {\r\n  this.nes = nes;\r\n};\r\n\r\nMappers[5].prototype = new Mappers[0]();\r\n\r\nMappers[5].prototype.write = function (address, value) {\r\n  // Writes to addresses other than MMC registers are handled by NoMapper.\r\n  if (address < 0x8000) {\r\n    Mappers[0].prototype.write.apply(this, arguments);\r\n  } else {\r\n    this.load8kVromBank(value, 0x0000);\r\n  }\r\n};\r\n\r\nMappers[5].prototype.write = function (address, value) {\r\n  // Writes to addresses other than MMC registers are handled by NoMapper.\r\n  if (address < 0x5000) {\r\n    Mappers[0].prototype.write.apply(this, arguments);\r\n    return;\r\n  }\r\n\r\n  switch (address) {\r\n    case 0x5100:\r\n      this.prg_size = value & 3;\r\n      break;\r\n    case 0x5101:\r\n      this.chr_size = value & 3;\r\n      break;\r\n    case 0x5102:\r\n      this.sram_we_a = value & 3;\r\n      break;\r\n    case 0x5103:\r\n      this.sram_we_b = value & 3;\r\n      break;\r\n    case 0x5104:\r\n      this.graphic_mode = value & 3;\r\n      break;\r\n    case 0x5105:\r\n      this.nametable_mode = value;\r\n      this.nametable_type[0] = value & 3;\r\n      this.load1kVromBank(value & 3, 0x2000);\r\n      value >>= 2;\r\n      this.nametable_type[1] = value & 3;\r\n      this.load1kVromBank(value & 3, 0x2400);\r\n      value >>= 2;\r\n      this.nametable_type[2] = value & 3;\r\n      this.load1kVromBank(value & 3, 0x2800);\r\n      value >>= 2;\r\n      this.nametable_type[3] = value & 3;\r\n      this.load1kVromBank(value & 3, 0x2c00);\r\n      break;\r\n    case 0x5106:\r\n      this.fill_chr = value;\r\n      break;\r\n    case 0x5107:\r\n      this.fill_pal = value & 3;\r\n      break;\r\n    case 0x5113:\r\n      this.SetBank_SRAM(3, value & 3);\r\n      break;\r\n    case 0x5114:\r\n    case 0x5115:\r\n    case 0x5116:\r\n    case 0x5117:\r\n      this.SetBank_CPU(address, value);\r\n      break;\r\n    case 0x5120:\r\n    case 0x5121:\r\n    case 0x5122:\r\n    case 0x5123:\r\n    case 0x5124:\r\n    case 0x5125:\r\n    case 0x5126:\r\n    case 0x5127:\r\n      this.chr_mode = 0;\r\n      this.chr_page[0][address & 7] = value;\r\n      this.SetBank_PPU();\r\n      break;\r\n    case 0x5128:\r\n    case 0x5129:\r\n    case 0x512a:\r\n    case 0x512b:\r\n      this.chr_mode = 1;\r\n      this.chr_page[1][(address & 3) + 0] = value;\r\n      this.chr_page[1][(address & 3) + 4] = value;\r\n      this.SetBank_PPU();\r\n      break;\r\n    case 0x5200:\r\n      this.split_control = value;\r\n      break;\r\n    case 0x5201:\r\n      this.split_scroll = value;\r\n      break;\r\n    case 0x5202:\r\n      this.split_page = value & 0x3f;\r\n      break;\r\n    case 0x5203:\r\n      this.irq_line = value;\r\n      this.nes.cpu.ClearIRQ();\r\n      break;\r\n    case 0x5204:\r\n      this.irq_enable = value;\r\n      this.nes.cpu.ClearIRQ();\r\n      break;\r\n    case 0x5205:\r\n      this.mult_a = value;\r\n      break;\r\n    case 0x5206:\r\n      this.mult_b = value;\r\n      break;\r\n    default:\r\n      if (address >= 0x5000 && address <= 0x5015) {\r\n        this.nes.papu.exWrite(address, value);\r\n      } else if (address >= 0x5c00 && address <= 0x5fff) {\r\n        if (this.graphic_mode === 2) {\r\n          // ExRAM\r\n          // vram write\r\n        } else if (this.graphic_mode !== 3) {\r\n          // Split,ExGraphic\r\n          if (this.irq_status & 0x40) {\r\n            // vram write\r\n          } else {\r\n            // vram write\r\n          }\r\n        }\r\n      } else if (address >= 0x6000 && address <= 0x7fff) {\r\n        if (this.sram_we_a === 2 && this.sram_we_b === 1) {\r\n          // additional ram write\r\n        }\r\n      }\r\n      break;\r\n  }\r\n};\r\n\r\nMappers[5].prototype.loadROM = function () {\r\n  if (!this.nes.rom.valid) {\r\n    throw new Error(\"UNROM: Invalid ROM! Unable to load.\");\r\n  }\r\n\r\n  // Load PRG-ROM:\r\n  this.load8kRomBank(this.nes.rom.romCount * 2 - 1, 0x8000);\r\n  this.load8kRomBank(this.nes.rom.romCount * 2 - 1, 0xa000);\r\n  this.load8kRomBank(this.nes.rom.romCount * 2 - 1, 0xc000);\r\n  this.load8kRomBank(this.nes.rom.romCount * 2 - 1, 0xe000);\r\n\r\n  // Load CHR-ROM:\r\n  this.loadCHRROM();\r\n\r\n  // Do Reset-Interrupt:\r\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\r\n};\r\n\r\n/**\r\n * Mapper007 (AxROM)\r\n * @example Battletoads, Time Lord, Marble Madness\r\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_007\r\n * @constructor\r\n */\r\nMappers[7] = function (nes) {\r\n  this.nes = nes;\r\n};\r\n\r\nMappers[7].prototype = new Mappers[0]();\r\n\r\nMappers[7].prototype.write = function (address, value) {\r\n  // Writes to addresses other than MMC registers are handled by NoMapper.\r\n  if (address < 0x8000) {\r\n    Mappers[0].prototype.write.apply(this, arguments);\r\n  } else {\r\n    this.load32kRomBank(value & 0x7, 0x8000);\r\n    if (value & 0x10) {\r\n      this.nes.ppu.setMirroring(this.nes.rom.SINGLESCREEN_MIRRORING2);\r\n    } else {\r\n      this.nes.ppu.setMirroring(this.nes.rom.SINGLESCREEN_MIRRORING);\r\n    }\r\n  }\r\n};\r\n\r\nMappers[7].prototype.loadROM = function () {\r\n  if (!this.nes.rom.valid) {\r\n    throw new Error(\"AOROM: Invalid ROM! Unable to load.\");\r\n  }\r\n\r\n  // Load PRG-ROM:\r\n  this.loadPRGROM();\r\n\r\n  // Load CHR-ROM:\r\n  this.loadCHRROM();\r\n\r\n  // Do Reset-Interrupt:\r\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\r\n};\r\n\r\n/**\r\n * Mapper 011 (Color Dreams)\r\n *\r\n * @description http://wiki.nesdev.com/w/index.php/Color_Dreams\r\n * @example Crystal Mines, Metal Fighter\r\n * @constructor\r\n */\r\nMappers[11] = function (nes) {\r\n  this.nes = nes;\r\n};\r\n\r\nMappers[11].prototype = new Mappers[0]();\r\n\r\nMappers[11].prototype.write = function (address, value) {\r\n  if (address < 0x8000) {\r\n    Mappers[0].prototype.write.apply(this, arguments);\r\n    return;\r\n  } else {\r\n    // Swap in the given PRG-ROM bank:\r\n    var prgbank1 = ((value & 0xf) * 2) % this.nes.rom.romCount;\r\n    var prgbank2 = ((value & 0xf) * 2 + 1) % this.nes.rom.romCount;\r\n\r\n    this.loadRomBank(prgbank1, 0x8000);\r\n    this.loadRomBank(prgbank2, 0xc000);\r\n\r\n    if (this.nes.rom.vromCount > 0) {\r\n      // Swap in the given VROM bank at 0x0000:\r\n      var bank = ((value >> 4) * 2) % this.nes.rom.vromCount;\r\n      this.loadVromBank(bank, 0x0000);\r\n      this.loadVromBank(bank + 1, 0x1000);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Mapper 034 (BNROM, NINA-01)\r\n *\r\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_034\r\n * @example Darkseed, Mashou, Mission Impossible 2\r\n * @constructor\r\n */\r\nMappers[34] = function (nes) {\r\n  this.nes = nes;\r\n};\r\n\r\nMappers[34].prototype = new Mappers[0]();\r\n\r\nMappers[34].prototype.write = function (address, value) {\r\n  if (address < 0x8000) {\r\n    Mappers[0].prototype.write.apply(this, arguments);\r\n    return;\r\n  } else {\r\n    this.load32kRomBank(value, 0x8000);\r\n  }\r\n};\r\n\r\n/**\r\n * Mapper 038\r\n *\r\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_038\r\n * @example Crime Busters\r\n * @constructor\r\n */\r\nMappers[38] = function (nes) {\r\n  this.nes = nes;\r\n};\r\n\r\nMappers[38].prototype = new Mappers[0]();\r\n\r\nMappers[38].prototype.write = function (address, value) {\r\n  if (address < 0x7000 || address > 0x7fff) {\r\n    Mappers[0].prototype.write.apply(this, arguments);\r\n    return;\r\n  } else {\r\n    // Swap in the given PRG-ROM bank at 0x8000:\r\n    this.load32kRomBank(value & 3, 0x8000);\r\n\r\n    // Swap in the given VROM bank at 0x0000:\r\n    this.load8kVromBank(((value >> 2) & 3) * 2, 0x0000);\r\n  }\r\n};\r\n\r\n/**\r\n * Mapper 066 (GxROM)\r\n *\r\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_066\r\n * @example Doraemon, Dragon Power, Gumshoe, Thunder & Lightning,\r\n * Super Mario Bros. + Duck Hunt\r\n * @constructor\r\n */\r\nMappers[66] = function (nes) {\r\n  this.nes = nes;\r\n};\r\n\r\nMappers[66].prototype = new Mappers[0]();\r\n\r\nMappers[66].prototype.write = function (address, value) {\r\n  if (address < 0x8000) {\r\n    Mappers[0].prototype.write.apply(this, arguments);\r\n    return;\r\n  } else {\r\n    // Swap in the given PRG-ROM bank at 0x8000:\r\n    this.load32kRomBank((value >> 4) & 3, 0x8000);\r\n\r\n    // Swap in the given VROM bank at 0x0000:\r\n    this.load8kVromBank((value & 3) * 2, 0x0000);\r\n  }\r\n};\r\n\r\n/**\r\n * Mapper 094 (UN1ROM)\r\n *\r\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_094\r\n * @example Senjou no Ookami\r\n * @constructor\r\n */\r\nMappers[94] = function (nes) {\r\n  this.nes = nes;\r\n};\r\n\r\nMappers[94].prototype = new Mappers[0]();\r\n\r\nMappers[94].prototype.write = function (address, value) {\r\n  // Writes to addresses other than MMC registers are handled by NoMapper.\r\n  if (address < 0x8000) {\r\n    Mappers[0].prototype.write.apply(this, arguments);\r\n    return;\r\n  } else {\r\n    // This is a ROM bank select command.\r\n    // Swap in the given ROM bank at 0x8000:\r\n    this.loadRomBank(value >> 2, 0x8000);\r\n  }\r\n};\r\n\r\nMappers[94].prototype.loadROM = function () {\r\n  if (!this.nes.rom.valid) {\r\n    throw new Error(\"UN1ROM: Invalid ROM! Unable to load.\");\r\n  }\r\n\r\n  // Load PRG-ROM:\r\n  this.loadRomBank(0, 0x8000);\r\n  this.loadRomBank(this.nes.rom.romCount - 1, 0xc000);\r\n\r\n  // Load CHR-ROM:\r\n  this.loadCHRROM();\r\n\r\n  // Do Reset-Interrupt:\r\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\r\n};\r\n\r\n/**\r\n * Mapper 140\r\n *\r\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_140\r\n * @example Bio Senshi Dan - Increaser Tono Tatakai\r\n * @constructor\r\n */\r\nMappers[140] = function (nes) {\r\n  this.nes = nes;\r\n};\r\n\r\nMappers[140].prototype = new Mappers[0]();\r\n\r\nMappers[140].prototype.write = function (address, value) {\r\n  if (address < 0x6000 || address > 0x7fff) {\r\n    Mappers[0].prototype.write.apply(this, arguments);\r\n    return;\r\n  } else {\r\n    // Swap in the given PRG-ROM bank at 0x8000:\r\n    this.load32kRomBank((value >> 4) & 3, 0x8000);\r\n\r\n    // Swap in the given VROM bank at 0x0000:\r\n    this.load8kVromBank((value & 0xf) * 2, 0x0000);\r\n  }\r\n};\r\n\r\n/**\r\n * Mapper 180\r\n *\r\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_180\r\n * @example Crazy Climber\r\n * @constructor\r\n */\r\nMappers[180] = function (nes) {\r\n  this.nes = nes;\r\n};\r\n\r\nMappers[180].prototype = new Mappers[0]();\r\n\r\nMappers[180].prototype.write = function (address, value) {\r\n  // Writes to addresses other than MMC registers are handled by NoMapper.\r\n  if (address < 0x8000) {\r\n    Mappers[0].prototype.write.apply(this, arguments);\r\n    return;\r\n  } else {\r\n    // This is a ROM bank select command.\r\n    // Swap in the given ROM bank at 0xc000:\r\n    this.loadRomBank(value, 0xc000);\r\n  }\r\n};\r\n\r\nMappers[180].prototype.loadROM = function () {\r\n  if (!this.nes.rom.valid) {\r\n    throw new Error(\"Mapper 180: Invalid ROM! Unable to load.\");\r\n  }\r\n\r\n  // Load PRG-ROM:\r\n  this.loadRomBank(0, 0x8000);\r\n  this.loadRomBank(this.nes.rom.romCount - 1, 0xc000);\r\n\r\n  // Load CHR-ROM:\r\n  this.loadCHRROM();\r\n\r\n  // Do Reset-Interrupt:\r\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\r\n};\r\n\r\nmodule.exports = Mappers;\r\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// jsnes.min.js","module.exports = {\r\n  copyArrayElements: function (src, srcPos, dest, destPos, length) {\r\n    for (var i = 0; i < length; ++i) {\r\n      dest[destPos + i] = src[srcPos + i];\r\n    }\r\n  },\r\n\r\n  copyArray: function (src) {\r\n    return src.slice(0);\r\n  },\r\n\r\n  fromJSON: function (obj, state) {\r\n    for (var i = 0; i < obj.JSON_PROPERTIES.length; i++) {\r\n      obj[obj.JSON_PROPERTIES[i]] = state[obj.JSON_PROPERTIES[i]];\r\n    }\r\n  },\r\n\r\n  toJSON: function (obj) {\r\n    var state = {};\r\n    for (var i = 0; i < obj.JSON_PROPERTIES.length; i++) {\r\n      state[obj.JSON_PROPERTIES[i]] = obj[obj.JSON_PROPERTIES[i]];\r\n    }\r\n    return state;\r\n  },\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/utils.js\n// module id = 0\n// module chunks = 0 1","var Controller = function () {\r\n  this.state = new Array(8);\r\n  for (var i = 0; i < this.state.length; i++) {\r\n    this.state[i] = 0x40;\r\n  }\r\n};\r\n\r\nController.BUTTON_A = 0;\r\nController.BUTTON_B = 1;\r\nController.BUTTON_SELECT = 2;\r\nController.BUTTON_START = 3;\r\nController.BUTTON_UP = 4;\r\nController.BUTTON_DOWN = 5;\r\nController.BUTTON_LEFT = 6;\r\nController.BUTTON_RIGHT = 7;\r\n\r\nController.prototype = {\r\n  buttonDown: function (key) {\r\n    this.state[key] = 0x41;\r\n  },\r\n\r\n  buttonUp: function (key) {\r\n    this.state[key] = 0x40;\r\n  },\r\n};\r\n\r\nmodule.exports = Controller;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controller.js\n// module id = 1\n// module chunks = 0 1","var Tile = function () {\r\n  // Tile data:\r\n  this.pix = new Array(64);\r\n\r\n  this.fbIndex = null;\r\n  this.tIndex = null;\r\n  this.x = null;\r\n  this.y = null;\r\n  this.w = null;\r\n  this.h = null;\r\n  this.incX = null;\r\n  this.incY = null;\r\n  this.palIndex = null;\r\n  this.tpri = null;\r\n  this.c = null;\r\n  this.initialized = false;\r\n  this.opaque = new Array(8);\r\n};\r\n\r\nTile.prototype = {\r\n  setBuffer: function (scanline) {\r\n    for (this.y = 0; this.y < 8; this.y++) {\r\n      this.setScanline(this.y, scanline[this.y], scanline[this.y + 8]);\r\n    }\r\n  },\r\n\r\n  setScanline: function (sline, b1, b2) {\r\n    this.initialized = true;\r\n    this.tIndex = sline << 3;\r\n    for (this.x = 0; this.x < 8; this.x++) {\r\n      this.pix[this.tIndex + this.x] =\r\n        ((b1 >> (7 - this.x)) & 1) + (((b2 >> (7 - this.x)) & 1) << 1);\r\n      if (this.pix[this.tIndex + this.x] === 0) {\r\n        this.opaque[sline] = false;\r\n      }\r\n    }\r\n  },\r\n\r\n  render: function (\r\n    buffer,\r\n    srcx1,\r\n    srcy1,\r\n    srcx2,\r\n    srcy2,\r\n    dx,\r\n    dy,\r\n    palAdd,\r\n    palette,\r\n    flipHorizontal,\r\n    flipVertical,\r\n    pri,\r\n    priTable\r\n  ) {\r\n    if (dx < -7 || dx >= 256 || dy < -7 || dy >= 240) {\r\n      return;\r\n    }\r\n\r\n    this.w = srcx2 - srcx1;\r\n    this.h = srcy2 - srcy1;\r\n\r\n    if (dx < 0) {\r\n      srcx1 -= dx;\r\n    }\r\n    if (dx + srcx2 >= 256) {\r\n      srcx2 = 256 - dx;\r\n    }\r\n\r\n    if (dy < 0) {\r\n      srcy1 -= dy;\r\n    }\r\n    if (dy + srcy2 >= 240) {\r\n      srcy2 = 240 - dy;\r\n    }\r\n\r\n    if (!flipHorizontal && !flipVertical) {\r\n      this.fbIndex = (dy << 8) + dx;\r\n      this.tIndex = 0;\r\n      for (this.y = 0; this.y < 8; this.y++) {\r\n        for (this.x = 0; this.x < 8; this.x++) {\r\n          if (\r\n            this.x >= srcx1 &&\r\n            this.x < srcx2 &&\r\n            this.y >= srcy1 &&\r\n            this.y < srcy2\r\n          ) {\r\n            this.palIndex = this.pix[this.tIndex];\r\n            this.tpri = priTable[this.fbIndex];\r\n            if (this.palIndex !== 0 && pri <= (this.tpri & 0xff)) {\r\n              //console.log(\"Rendering upright tile to buffer\");\r\n              buffer[this.fbIndex] = palette[this.palIndex + palAdd];\r\n              this.tpri = (this.tpri & 0xf00) | pri;\r\n              priTable[this.fbIndex] = this.tpri;\r\n            }\r\n          }\r\n          this.fbIndex++;\r\n          this.tIndex++;\r\n        }\r\n        this.fbIndex -= 8;\r\n        this.fbIndex += 256;\r\n      }\r\n    } else if (flipHorizontal && !flipVertical) {\r\n      this.fbIndex = (dy << 8) + dx;\r\n      this.tIndex = 7;\r\n      for (this.y = 0; this.y < 8; this.y++) {\r\n        for (this.x = 0; this.x < 8; this.x++) {\r\n          if (\r\n            this.x >= srcx1 &&\r\n            this.x < srcx2 &&\r\n            this.y >= srcy1 &&\r\n            this.y < srcy2\r\n          ) {\r\n            this.palIndex = this.pix[this.tIndex];\r\n            this.tpri = priTable[this.fbIndex];\r\n            if (this.palIndex !== 0 && pri <= (this.tpri & 0xff)) {\r\n              buffer[this.fbIndex] = palette[this.palIndex + palAdd];\r\n              this.tpri = (this.tpri & 0xf00) | pri;\r\n              priTable[this.fbIndex] = this.tpri;\r\n            }\r\n          }\r\n          this.fbIndex++;\r\n          this.tIndex--;\r\n        }\r\n        this.fbIndex -= 8;\r\n        this.fbIndex += 256;\r\n        this.tIndex += 16;\r\n      }\r\n    } else if (flipVertical && !flipHorizontal) {\r\n      this.fbIndex = (dy << 8) + dx;\r\n      this.tIndex = 56;\r\n      for (this.y = 0; this.y < 8; this.y++) {\r\n        for (this.x = 0; this.x < 8; this.x++) {\r\n          if (\r\n            this.x >= srcx1 &&\r\n            this.x < srcx2 &&\r\n            this.y >= srcy1 &&\r\n            this.y < srcy2\r\n          ) {\r\n            this.palIndex = this.pix[this.tIndex];\r\n            this.tpri = priTable[this.fbIndex];\r\n            if (this.palIndex !== 0 && pri <= (this.tpri & 0xff)) {\r\n              buffer[this.fbIndex] = palette[this.palIndex + palAdd];\r\n              this.tpri = (this.tpri & 0xf00) | pri;\r\n              priTable[this.fbIndex] = this.tpri;\r\n            }\r\n          }\r\n          this.fbIndex++;\r\n          this.tIndex++;\r\n        }\r\n        this.fbIndex -= 8;\r\n        this.fbIndex += 256;\r\n        this.tIndex -= 16;\r\n      }\r\n    } else {\r\n      this.fbIndex = (dy << 8) + dx;\r\n      this.tIndex = 63;\r\n      for (this.y = 0; this.y < 8; this.y++) {\r\n        for (this.x = 0; this.x < 8; this.x++) {\r\n          if (\r\n            this.x >= srcx1 &&\r\n            this.x < srcx2 &&\r\n            this.y >= srcy1 &&\r\n            this.y < srcy2\r\n          ) {\r\n            this.palIndex = this.pix[this.tIndex];\r\n            this.tpri = priTable[this.fbIndex];\r\n            if (this.palIndex !== 0 && pri <= (this.tpri & 0xff)) {\r\n              buffer[this.fbIndex] = palette[this.palIndex + palAdd];\r\n              this.tpri = (this.tpri & 0xf00) | pri;\r\n              priTable[this.fbIndex] = this.tpri;\r\n            }\r\n          }\r\n          this.fbIndex++;\r\n          this.tIndex--;\r\n        }\r\n        this.fbIndex -= 8;\r\n        this.fbIndex += 256;\r\n      }\r\n    }\r\n  },\r\n\r\n  isTransparent: function (x, y) {\r\n    return this.pix[(y << 3) + x] === 0;\r\n  },\r\n\r\n  toJSON: function () {\r\n    return {\r\n      opaque: this.opaque,\r\n      pix: this.pix,\r\n    };\r\n  },\r\n\r\n  fromJSON: function (s) {\r\n    this.opaque = s.opaque;\r\n    this.pix = s.pix;\r\n  },\r\n};\r\n\r\nmodule.exports = Tile;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/tile.js\n// module id = 2\n// module chunks = 0 1","module.exports = {\r\n  Controller: require(\"./controller\"),\r\n  NES: require(\"./nes\"),\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/index.js\n// module id = 3\n// module chunks = 0 1","var CPU = require(\"./cpu\");\r\nvar Controller = require(\"./controller\");\r\nvar PPU = require(\"./ppu\");\r\nvar PAPU = require(\"./papu\");\r\nvar ROM = require(\"./rom\");\r\n\r\nvar NES = function (opts) {\r\n  this.opts = {\r\n    onFrame: function () {},\r\n    onAudioSample: null,\r\n    onStatusUpdate: function () {},\r\n    onBatteryRamWrite: function () {},\r\n\r\n    // FIXME: not actually used except for in PAPU\r\n    preferredFrameRate: 60,\r\n\r\n    emulateSound: true,\r\n    sampleRate: 48000, // Sound sample rate in hz\r\n  };\r\n  if (typeof opts !== \"undefined\") {\r\n    var key;\r\n    for (key in this.opts) {\r\n      if (typeof opts[key] !== \"undefined\") {\r\n        this.opts[key] = opts[key];\r\n      }\r\n    }\r\n  }\r\n\r\n  this.frameTime = 1000 / this.opts.preferredFrameRate;\r\n\r\n  this.ui = {\r\n    writeFrame: this.opts.onFrame,\r\n    updateStatus: this.opts.onStatusUpdate,\r\n  };\r\n  this.cpu = new CPU(this);\r\n  this.ppu = new PPU(this);\r\n  this.papu = new PAPU(this);\r\n  this.mmap = null; // set in loadROM()\r\n  this.controllers = {\r\n    1: new Controller(),\r\n    2: new Controller(),\r\n  };\r\n\r\n  this.ui.updateStatus(\"Ready to load a ROM.\");\r\n\r\n  this.frame = this.frame.bind(this);\r\n  this.buttonDown = this.buttonDown.bind(this);\r\n  this.buttonUp = this.buttonUp.bind(this);\r\n  this.zapperMove = this.zapperMove.bind(this);\r\n  this.zapperFireDown = this.zapperFireDown.bind(this);\r\n  this.zapperFireUp = this.zapperFireUp.bind(this);\r\n};\r\n\r\nNES.prototype = {\r\n  fpsFrameCount: 0,\r\n  romData: null,\r\n\r\n  // Resets the system\r\n  reset: function () {\r\n    if (this.mmap !== null) {\r\n      this.mmap.reset();\r\n    }\r\n\r\n    this.cpu.reset();\r\n    this.ppu.reset();\r\n    this.papu.reset();\r\n\r\n    this.lastFpsTime = null;\r\n    this.fpsFrameCount = 0;\r\n  },\r\n\r\n  frame: function () {\r\n    this.ppu.startFrame();\r\n    var cycles = 0;\r\n    var emulateSound = this.opts.emulateSound;\r\n    var cpu = this.cpu;\r\n    var ppu = this.ppu;\r\n    var papu = this.papu;\r\n    FRAMELOOP: for (;;) {\r\n      if (cpu.cyclesToHalt === 0) {\r\n        // Execute a CPU instruction\r\n        cycles = cpu.emulate();\r\n        if (emulateSound) {\r\n          papu.clockFrameCounter(cycles);\r\n        }\r\n        cycles *= 3;\r\n      } else {\r\n        if (cpu.cyclesToHalt > 8) {\r\n          cycles = 24;\r\n          if (emulateSound) {\r\n            papu.clockFrameCounter(8);\r\n          }\r\n          cpu.cyclesToHalt -= 8;\r\n        } else {\r\n          cycles = cpu.cyclesToHalt * 3;\r\n          if (emulateSound) {\r\n            papu.clockFrameCounter(cpu.cyclesToHalt);\r\n          }\r\n          cpu.cyclesToHalt = 0;\r\n        }\r\n      }\r\n\r\n      for (; cycles > 0; cycles--) {\r\n        if (\r\n          ppu.curX === ppu.spr0HitX &&\r\n          ppu.f_spVisibility === 1 &&\r\n          ppu.scanline - 21 === ppu.spr0HitY\r\n        ) {\r\n          // Set sprite 0 hit flag:\r\n          ppu.setStatusFlag(ppu.STATUS_SPRITE0HIT, true);\r\n        }\r\n\r\n        if (ppu.requestEndFrame) {\r\n          ppu.nmiCounter--;\r\n          if (ppu.nmiCounter === 0) {\r\n            ppu.requestEndFrame = false;\r\n            ppu.startVBlank();\r\n            break FRAMELOOP;\r\n          }\r\n        }\r\n\r\n        ppu.curX++;\r\n        if (ppu.curX === 341) {\r\n          ppu.curX = 0;\r\n          ppu.endScanline();\r\n        }\r\n      }\r\n    }\r\n    this.fpsFrameCount++;\r\n  },\r\n\r\n  buttonDown: function (controller, button) {\r\n    this.controllers[controller].buttonDown(button);\r\n  },\r\n\r\n  buttonUp: function (controller, button) {\r\n    this.controllers[controller].buttonUp(button);\r\n  },\r\n\r\n  zapperMove: function (x, y) {\r\n    if (!this.mmap) return;\r\n    this.mmap.zapperX = x;\r\n    this.mmap.zapperY = y;\r\n  },\r\n\r\n  zapperFireDown: function () {\r\n    if (!this.mmap) return;\r\n    this.mmap.zapperFired = true;\r\n  },\r\n\r\n  zapperFireUp: function () {\r\n    if (!this.mmap) return;\r\n    this.mmap.zapperFired = false;\r\n  },\r\n\r\n  getFPS: function () {\r\n    var now = +new Date();\r\n    var fps = null;\r\n    if (this.lastFpsTime) {\r\n      fps = this.fpsFrameCount / ((now - this.lastFpsTime) / 1000);\r\n    }\r\n    this.fpsFrameCount = 0;\r\n    this.lastFpsTime = now;\r\n    return fps;\r\n  },\r\n\r\n  reloadROM: function () {\r\n    if (this.romData !== null) {\r\n      this.loadROM(this.romData);\r\n    }\r\n  },\r\n\r\n  // Loads a ROM file into the CPU and PPU.\r\n  // The ROM file is validated first.\r\n  loadROM: function (data) {\r\n    // Load ROM file:\r\n    this.rom = new ROM(this);\r\n    this.rom.load(data);\r\n\r\n    this.reset();\r\n    this.mmap = this.rom.createMapper();\r\n    this.mmap.loadROM();\r\n    this.ppu.setMirroring(this.rom.getMirroringType());\r\n    this.romData = data;\r\n  },\r\n\r\n  setFramerate: function (rate) {\r\n    this.opts.preferredFrameRate = rate;\r\n    this.frameTime = 1000 / rate;\r\n    this.papu.setSampleRate(this.opts.sampleRate, false);\r\n  },\r\n\r\n  getState: function () {\r\n    return {\r\n      cpu: this.cpu.toJSON(),\r\n      mmap: this.mmap.toJSON(),\r\n      ppu: this.ppu.toJSON(),\r\n    };\r\n  },\r\n  \r\n  loadState: function (s) {\r\n    this.cpu.fromJSON(s.cpu);\r\n    this.mmap.fromJSON(s.mmap);\r\n    this.ppu.fromJSON(s.ppu);\r\n  },\r\n};\r\n\r\nmodule.exports = NES;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/nes.js\n// module id = 4\n// module chunks = 0 1","var utils = require(\"./utils\");\r\n\r\nvar CPU = function (nes) {\r\n  this.nes = nes;\r\n\r\n  // Keep Chrome happy\r\n  this.mem = null;\r\n  this.REG_ACC = null;\r\n  this.REG_X = null;\r\n  this.REG_Y = null;\r\n  this.REG_SP = null;\r\n  this.REG_PC = null;\r\n  this.REG_PC_NEW = null;\r\n  this.REG_STATUS = null;\r\n  this.F_CARRY = null;\r\n  this.F_DECIMAL = null;\r\n  this.F_INTERRUPT = null;\r\n  this.F_INTERRUPT_NEW = null;\r\n  this.F_OVERFLOW = null;\r\n  this.F_SIGN = null;\r\n  this.F_ZERO = null;\r\n  this.F_NOTUSED = null;\r\n  this.F_NOTUSED_NEW = null;\r\n  this.F_BRK = null;\r\n  this.F_BRK_NEW = null;\r\n  this.opdata = null;\r\n  this.cyclesToHalt = null;\r\n  this.crash = null;\r\n  this.irqRequested = null;\r\n  this.irqType = null;\r\n\r\n  this.reset();\r\n};\r\n\r\nCPU.prototype = {\r\n  // IRQ Types\r\n  IRQ_NORMAL: 0,\r\n  IRQ_NMI: 1,\r\n  IRQ_RESET: 2,\r\n\r\n  reset: function () {\r\n    // Main memory\r\n    this.mem = new Array(0x10000);\r\n\r\n    for (var i = 0; i < 0x2000; i++) {\r\n      this.mem[i] = 0xff;\r\n    }\r\n    for (var p = 0; p < 4; p++) {\r\n      var j = p * 0x800;\r\n      this.mem[j + 0x008] = 0xf7;\r\n      this.mem[j + 0x009] = 0xef;\r\n      this.mem[j + 0x00a] = 0xdf;\r\n      this.mem[j + 0x00f] = 0xbf;\r\n    }\r\n    for (var k = 0x2001; k < this.mem.length; k++) {\r\n      this.mem[k] = 0;\r\n    }\r\n\r\n    // CPU Registers:\r\n    this.REG_ACC = 0;\r\n    this.REG_X = 0;\r\n    this.REG_Y = 0;\r\n    // Reset Stack pointer:\r\n    this.REG_SP = 0x01ff;\r\n    // Reset Program counter:\r\n    this.REG_PC = 0x8000 - 1;\r\n    this.REG_PC_NEW = 0x8000 - 1;\r\n    // Reset Status register:\r\n    this.REG_STATUS = 0x28;\r\n\r\n    this.setStatus(0x28);\r\n\r\n    // Set flags:\r\n    this.F_CARRY = 0;\r\n    this.F_DECIMAL = 0;\r\n    this.F_INTERRUPT = 1;\r\n    this.F_INTERRUPT_NEW = 1;\r\n    this.F_OVERFLOW = 0;\r\n    this.F_SIGN = 0;\r\n    this.F_ZERO = 1;\r\n\r\n    this.F_NOTUSED = 1;\r\n    this.F_NOTUSED_NEW = 1;\r\n    this.F_BRK = 1;\r\n    this.F_BRK_NEW = 1;\r\n\r\n    this.opdata = new OpData().opdata;\r\n    this.cyclesToHalt = 0;\r\n\r\n    // Reset crash flag:\r\n    this.crash = false;\r\n\r\n    // Interrupt notification:\r\n    this.irqRequested = false;\r\n    this.irqType = null;\r\n  },\r\n\r\n  // Emulates a single CPU instruction, returns the number of cycles\r\n  emulate: function () {\r\n    var temp;\r\n    var add;\r\n\r\n    // Check interrupts:\r\n    if (this.irqRequested) {\r\n      temp =\r\n        this.F_CARRY |\r\n        ((this.F_ZERO === 0 ? 1 : 0) << 1) |\r\n        (this.F_INTERRUPT << 2) |\r\n        (this.F_DECIMAL << 3) |\r\n        (this.F_BRK << 4) |\r\n        (this.F_NOTUSED << 5) |\r\n        (this.F_OVERFLOW << 6) |\r\n        (this.F_SIGN << 7);\r\n\r\n      this.REG_PC_NEW = this.REG_PC;\r\n      this.F_INTERRUPT_NEW = this.F_INTERRUPT;\r\n      switch (this.irqType) {\r\n        case 0: {\r\n          // Normal IRQ:\r\n          if (this.F_INTERRUPT !== 0) {\r\n            // console.log(\"Interrupt was masked.\");\r\n            break;\r\n          }\r\n          this.doIrq(temp);\r\n          // console.log(\"Did normal IRQ. I=\"+this.F_INTERRUPT);\r\n          break;\r\n        }\r\n        case 1: {\r\n          // NMI:\r\n          this.doNonMaskableInterrupt(temp);\r\n          break;\r\n        }\r\n        case 2: {\r\n          // Reset:\r\n          this.doResetInterrupt();\r\n          break;\r\n        }\r\n      }\r\n\r\n      this.REG_PC = this.REG_PC_NEW;\r\n      this.F_INTERRUPT = this.F_INTERRUPT_NEW;\r\n      this.F_BRK = this.F_BRK_NEW;\r\n      this.irqRequested = false;\r\n    }\r\n\r\n    var opinf = this.opdata[this.nes.mmap.load(this.REG_PC + 1)];\r\n    var cycleCount = opinf >> 24;\r\n    var cycleAdd = 0;\r\n\r\n    // Find address mode:\r\n    var addrMode = (opinf >> 8) & 0xff;\r\n\r\n    // Increment PC by number of op bytes:\r\n    var opaddr = this.REG_PC;\r\n    this.REG_PC += (opinf >> 16) & 0xff;\r\n\r\n    var addr = 0;\r\n    switch (addrMode) {\r\n      case 0: {\r\n        // Zero Page mode. Use the address given after the opcode,\r\n        // but without high byte.\r\n        addr = this.load(opaddr + 2);\r\n        break;\r\n      }\r\n      case 1: {\r\n        // Relative mode.\r\n        addr = this.load(opaddr + 2);\r\n        if (addr < 0x80) {\r\n          addr += this.REG_PC;\r\n        } else {\r\n          addr += this.REG_PC - 256;\r\n        }\r\n        break;\r\n      }\r\n      case 2: {\r\n        // Ignore. Address is implied in instruction.\r\n        break;\r\n      }\r\n      case 3: {\r\n        // Absolute mode. Use the two bytes following the opcode as\r\n        // an address.\r\n        addr = this.load16bit(opaddr + 2);\r\n        break;\r\n      }\r\n      case 4: {\r\n        // Accumulator mode. The address is in the accumulator\r\n        // register.\r\n        addr = this.REG_ACC;\r\n        break;\r\n      }\r\n      case 5: {\r\n        // Immediate mode. The value is given after the opcode.\r\n        addr = this.REG_PC;\r\n        break;\r\n      }\r\n      case 6: {\r\n        // Zero Page Indexed mode, X as index. Use the address given\r\n        // after the opcode, then add the\r\n        // X register to it to get the final address.\r\n        addr = (this.load(opaddr + 2) + this.REG_X) & 0xff;\r\n        break;\r\n      }\r\n      case 7: {\r\n        // Zero Page Indexed mode, Y as index. Use the address given\r\n        // after the opcode, then add the\r\n        // Y register to it to get the final address.\r\n        addr = (this.load(opaddr + 2) + this.REG_Y) & 0xff;\r\n        break;\r\n      }\r\n      case 8: {\r\n        // Absolute Indexed Mode, X as index. Same as zero page\r\n        // indexed, but with the high byte.\r\n        addr = this.load16bit(opaddr + 2);\r\n        if ((addr & 0xff00) !== ((addr + this.REG_X) & 0xff00)) {\r\n          cycleAdd = 1;\r\n        }\r\n        addr += this.REG_X;\r\n        break;\r\n      }\r\n      case 9: {\r\n        // Absolute Indexed Mode, Y as index. Same as zero page\r\n        // indexed, but with the high byte.\r\n        addr = this.load16bit(opaddr + 2);\r\n        if ((addr & 0xff00) !== ((addr + this.REG_Y) & 0xff00)) {\r\n          cycleAdd = 1;\r\n        }\r\n        addr += this.REG_Y;\r\n        break;\r\n      }\r\n      case 10: {\r\n        // Pre-indexed Indirect mode. Find the 16-bit address\r\n        // starting at the given location plus\r\n        // the current X register. The value is the contents of that\r\n        // address.\r\n        addr = this.load(opaddr + 2);\r\n        if ((addr & 0xff00) !== ((addr + this.REG_X) & 0xff00)) {\r\n          cycleAdd = 1;\r\n        }\r\n        addr += this.REG_X;\r\n        addr &= 0xff;\r\n        addr = this.load16bit(addr);\r\n        break;\r\n      }\r\n      case 11: {\r\n        // Post-indexed Indirect mode. Find the 16-bit address\r\n        // contained in the given location\r\n        // (and the one following). Add to that address the contents\r\n        // of the Y register. Fetch the value\r\n        // stored at that adress.\r\n        addr = this.load16bit(this.load(opaddr + 2));\r\n        if ((addr & 0xff00) !== ((addr + this.REG_Y) & 0xff00)) {\r\n          cycleAdd = 1;\r\n        }\r\n        addr += this.REG_Y;\r\n        break;\r\n      }\r\n      case 12: {\r\n        // Indirect Absolute mode. Find the 16-bit address contained\r\n        // at the given location.\r\n        addr = this.load16bit(opaddr + 2); // Find op\r\n        if (addr < 0x1fff) {\r\n          addr =\r\n            this.mem[addr] +\r\n            (this.mem[(addr & 0xff00) | (((addr & 0xff) + 1) & 0xff)] << 8); // Read from address given in op\r\n        } else {\r\n          addr =\r\n            this.nes.mmap.load(addr) +\r\n            (this.nes.mmap.load(\r\n              (addr & 0xff00) | (((addr & 0xff) + 1) & 0xff)\r\n            ) <<\r\n              8);\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    // Wrap around for addresses above 0xFFFF:\r\n    addr &= 0xffff;\r\n\r\n    // ----------------------------------------------------------------------------------------------------\r\n    // Decode & execute instruction:\r\n    // ----------------------------------------------------------------------------------------------------\r\n\r\n    // This should be compiled to a jump table.\r\n    switch (opinf & 0xff) {\r\n      case 0: {\r\n        // *******\r\n        // * ADC *\r\n        // *******\r\n\r\n        // Add with carry.\r\n        temp = this.REG_ACC + this.load(addr) + this.F_CARRY;\r\n\r\n        if (\r\n          ((this.REG_ACC ^ this.load(addr)) & 0x80) === 0 &&\r\n          ((this.REG_ACC ^ temp) & 0x80) !== 0\r\n        ) {\r\n          this.F_OVERFLOW = 1;\r\n        } else {\r\n          this.F_OVERFLOW = 0;\r\n        }\r\n        this.F_CARRY = temp > 255 ? 1 : 0;\r\n        this.F_SIGN = (temp >> 7) & 1;\r\n        this.F_ZERO = temp & 0xff;\r\n        this.REG_ACC = temp & 255;\r\n        cycleCount += cycleAdd;\r\n        break;\r\n      }\r\n      case 1: {\r\n        // *******\r\n        // * AND *\r\n        // *******\r\n\r\n        // AND memory with accumulator.\r\n        this.REG_ACC = this.REG_ACC & this.load(addr);\r\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\r\n        this.F_ZERO = this.REG_ACC;\r\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\r\n        break;\r\n      }\r\n      case 2: {\r\n        // *******\r\n        // * ASL *\r\n        // *******\r\n\r\n        // Shift left one bit\r\n        if (addrMode === 4) {\r\n          // ADDR_ACC = 4\r\n\r\n          this.F_CARRY = (this.REG_ACC >> 7) & 1;\r\n          this.REG_ACC = (this.REG_ACC << 1) & 255;\r\n          this.F_SIGN = (this.REG_ACC >> 7) & 1;\r\n          this.F_ZERO = this.REG_ACC;\r\n        } else {\r\n          temp = this.load(addr);\r\n          this.F_CARRY = (temp >> 7) & 1;\r\n          temp = (temp << 1) & 255;\r\n          this.F_SIGN = (temp >> 7) & 1;\r\n          this.F_ZERO = temp;\r\n          this.write(addr, temp);\r\n        }\r\n        break;\r\n      }\r\n      case 3: {\r\n        // *******\r\n        // * BCC *\r\n        // *******\r\n\r\n        // Branch on carry clear\r\n        if (this.F_CARRY === 0) {\r\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\r\n          this.REG_PC = addr;\r\n        }\r\n        break;\r\n      }\r\n      case 4: {\r\n        // *******\r\n        // * BCS *\r\n        // *******\r\n\r\n        // Branch on carry set\r\n        if (this.F_CARRY === 1) {\r\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\r\n          this.REG_PC = addr;\r\n        }\r\n        break;\r\n      }\r\n      case 5: {\r\n        // *******\r\n        // * BEQ *\r\n        // *******\r\n\r\n        // Branch on zero\r\n        if (this.F_ZERO === 0) {\r\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\r\n          this.REG_PC = addr;\r\n        }\r\n        break;\r\n      }\r\n      case 6: {\r\n        // *******\r\n        // * BIT *\r\n        // *******\r\n\r\n        temp = this.load(addr);\r\n        this.F_SIGN = (temp >> 7) & 1;\r\n        this.F_OVERFLOW = (temp >> 6) & 1;\r\n        temp &= this.REG_ACC;\r\n        this.F_ZERO = temp;\r\n        break;\r\n      }\r\n      case 7: {\r\n        // *******\r\n        // * BMI *\r\n        // *******\r\n\r\n        // Branch on negative result\r\n        if (this.F_SIGN === 1) {\r\n          cycleCount++;\r\n          this.REG_PC = addr;\r\n        }\r\n        break;\r\n      }\r\n      case 8: {\r\n        // *******\r\n        // * BNE *\r\n        // *******\r\n\r\n        // Branch on not zero\r\n        if (this.F_ZERO !== 0) {\r\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\r\n          this.REG_PC = addr;\r\n        }\r\n        break;\r\n      }\r\n      case 9: {\r\n        // *******\r\n        // * BPL *\r\n        // *******\r\n\r\n        // Branch on positive result\r\n        if (this.F_SIGN === 0) {\r\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\r\n          this.REG_PC = addr;\r\n        }\r\n        break;\r\n      }\r\n      case 10: {\r\n        // *******\r\n        // * BRK *\r\n        // *******\r\n\r\n        this.REG_PC += 2;\r\n        this.push((this.REG_PC >> 8) & 255);\r\n        this.push(this.REG_PC & 255);\r\n        this.F_BRK = 1;\r\n\r\n        this.push(\r\n          this.F_CARRY |\r\n            ((this.F_ZERO === 0 ? 1 : 0) << 1) |\r\n            (this.F_INTERRUPT << 2) |\r\n            (this.F_DECIMAL << 3) |\r\n            (this.F_BRK << 4) |\r\n            (this.F_NOTUSED << 5) |\r\n            (this.F_OVERFLOW << 6) |\r\n            (this.F_SIGN << 7)\r\n        );\r\n\r\n        this.F_INTERRUPT = 1;\r\n        //this.REG_PC = load(0xFFFE) | (load(0xFFFF) << 8);\r\n        this.REG_PC = this.load16bit(0xfffe);\r\n        this.REG_PC--;\r\n        break;\r\n      }\r\n      case 11: {\r\n        // *******\r\n        // * BVC *\r\n        // *******\r\n\r\n        // Branch on overflow clear\r\n        if (this.F_OVERFLOW === 0) {\r\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\r\n          this.REG_PC = addr;\r\n        }\r\n        break;\r\n      }\r\n      case 12: {\r\n        // *******\r\n        // * BVS *\r\n        // *******\r\n\r\n        // Branch on overflow set\r\n        if (this.F_OVERFLOW === 1) {\r\n          cycleCount += (opaddr & 0xff00) !== (addr & 0xff00) ? 2 : 1;\r\n          this.REG_PC = addr;\r\n        }\r\n        break;\r\n      }\r\n      case 13: {\r\n        // *******\r\n        // * CLC *\r\n        // *******\r\n\r\n        // Clear carry flag\r\n        this.F_CARRY = 0;\r\n        break;\r\n      }\r\n      case 14: {\r\n        // *******\r\n        // * CLD *\r\n        // *******\r\n\r\n        // Clear decimal flag\r\n        this.F_DECIMAL = 0;\r\n        break;\r\n      }\r\n      case 15: {\r\n        // *******\r\n        // * CLI *\r\n        // *******\r\n\r\n        // Clear interrupt flag\r\n        this.F_INTERRUPT = 0;\r\n        break;\r\n      }\r\n      case 16: {\r\n        // *******\r\n        // * CLV *\r\n        // *******\r\n\r\n        // Clear overflow flag\r\n        this.F_OVERFLOW = 0;\r\n        break;\r\n      }\r\n      case 17: {\r\n        // *******\r\n        // * CMP *\r\n        // *******\r\n\r\n        // Compare memory and accumulator:\r\n        temp = this.REG_ACC - this.load(addr);\r\n        this.F_CARRY = temp >= 0 ? 1 : 0;\r\n        this.F_SIGN = (temp >> 7) & 1;\r\n        this.F_ZERO = temp & 0xff;\r\n        cycleCount += cycleAdd;\r\n        break;\r\n      }\r\n      case 18: {\r\n        // *******\r\n        // * CPX *\r\n        // *******\r\n\r\n        // Compare memory and index X:\r\n        temp = this.REG_X - this.load(addr);\r\n        this.F_CARRY = temp >= 0 ? 1 : 0;\r\n        this.F_SIGN = (temp >> 7) & 1;\r\n        this.F_ZERO = temp & 0xff;\r\n        break;\r\n      }\r\n      case 19: {\r\n        // *******\r\n        // * CPY *\r\n        // *******\r\n\r\n        // Compare memory and index Y:\r\n        temp = this.REG_Y - this.load(addr);\r\n        this.F_CARRY = temp >= 0 ? 1 : 0;\r\n        this.F_SIGN = (temp >> 7) & 1;\r\n        this.F_ZERO = temp & 0xff;\r\n        break;\r\n      }\r\n      case 20: {\r\n        // *******\r\n        // * DEC *\r\n        // *******\r\n\r\n        // Decrement memory by one:\r\n        temp = (this.load(addr) - 1) & 0xff;\r\n        this.F_SIGN = (temp >> 7) & 1;\r\n        this.F_ZERO = temp;\r\n        this.write(addr, temp);\r\n        break;\r\n      }\r\n      case 21: {\r\n        // *******\r\n        // * DEX *\r\n        // *******\r\n\r\n        // Decrement index X by one:\r\n        this.REG_X = (this.REG_X - 1) & 0xff;\r\n        this.F_SIGN = (this.REG_X >> 7) & 1;\r\n        this.F_ZERO = this.REG_X;\r\n        break;\r\n      }\r\n      case 22: {\r\n        // *******\r\n        // * DEY *\r\n        // *******\r\n\r\n        // Decrement index Y by one:\r\n        this.REG_Y = (this.REG_Y - 1) & 0xff;\r\n        this.F_SIGN = (this.REG_Y >> 7) & 1;\r\n        this.F_ZERO = this.REG_Y;\r\n        break;\r\n      }\r\n      case 23: {\r\n        // *******\r\n        // * EOR *\r\n        // *******\r\n\r\n        // XOR Memory with accumulator, store in accumulator:\r\n        this.REG_ACC = (this.load(addr) ^ this.REG_ACC) & 0xff;\r\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\r\n        this.F_ZERO = this.REG_ACC;\r\n        cycleCount += cycleAdd;\r\n        break;\r\n      }\r\n      case 24: {\r\n        // *******\r\n        // * INC *\r\n        // *******\r\n\r\n        // Increment memory by one:\r\n        temp = (this.load(addr) + 1) & 0xff;\r\n        this.F_SIGN = (temp >> 7) & 1;\r\n        this.F_ZERO = temp;\r\n        this.write(addr, temp & 0xff);\r\n        break;\r\n      }\r\n      case 25: {\r\n        // *******\r\n        // * INX *\r\n        // *******\r\n\r\n        // Increment index X by one:\r\n        this.REG_X = (this.REG_X + 1) & 0xff;\r\n        this.F_SIGN = (this.REG_X >> 7) & 1;\r\n        this.F_ZERO = this.REG_X;\r\n        break;\r\n      }\r\n      case 26: {\r\n        // *******\r\n        // * INY *\r\n        // *******\r\n\r\n        // Increment index Y by one:\r\n        this.REG_Y++;\r\n        this.REG_Y &= 0xff;\r\n        this.F_SIGN = (this.REG_Y >> 7) & 1;\r\n        this.F_ZERO = this.REG_Y;\r\n        break;\r\n      }\r\n      case 27: {\r\n        // *******\r\n        // * JMP *\r\n        // *******\r\n\r\n        // Jump to new location:\r\n        this.REG_PC = addr - 1;\r\n        break;\r\n      }\r\n      case 28: {\r\n        // *******\r\n        // * JSR *\r\n        // *******\r\n\r\n        // Jump to new location, saving return address.\r\n        // Push return address on stack:\r\n        this.push((this.REG_PC >> 8) & 255);\r\n        this.push(this.REG_PC & 255);\r\n        this.REG_PC = addr - 1;\r\n        break;\r\n      }\r\n      case 29: {\r\n        // *******\r\n        // * LDA *\r\n        // *******\r\n\r\n        // Load accumulator with memory:\r\n        this.REG_ACC = this.load(addr);\r\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\r\n        this.F_ZERO = this.REG_ACC;\r\n        cycleCount += cycleAdd;\r\n        break;\r\n      }\r\n      case 30: {\r\n        // *******\r\n        // * LDX *\r\n        // *******\r\n\r\n        // Load index X with memory:\r\n        this.REG_X = this.load(addr);\r\n        this.F_SIGN = (this.REG_X >> 7) & 1;\r\n        this.F_ZERO = this.REG_X;\r\n        cycleCount += cycleAdd;\r\n        break;\r\n      }\r\n      case 31: {\r\n        // *******\r\n        // * LDY *\r\n        // *******\r\n\r\n        // Load index Y with memory:\r\n        this.REG_Y = this.load(addr);\r\n        this.F_SIGN = (this.REG_Y >> 7) & 1;\r\n        this.F_ZERO = this.REG_Y;\r\n        cycleCount += cycleAdd;\r\n        break;\r\n      }\r\n      case 32: {\r\n        // *******\r\n        // * LSR *\r\n        // *******\r\n\r\n        // Shift right one bit:\r\n        if (addrMode === 4) {\r\n          // ADDR_ACC\r\n\r\n          temp = this.REG_ACC & 0xff;\r\n          this.F_CARRY = temp & 1;\r\n          temp >>= 1;\r\n          this.REG_ACC = temp;\r\n        } else {\r\n          temp = this.load(addr) & 0xff;\r\n          this.F_CARRY = temp & 1;\r\n          temp >>= 1;\r\n          this.write(addr, temp);\r\n        }\r\n        this.F_SIGN = 0;\r\n        this.F_ZERO = temp;\r\n        break;\r\n      }\r\n      case 33: {\r\n        // *******\r\n        // * NOP *\r\n        // *******\r\n\r\n        // No OPeration.\r\n        // Ignore.\r\n        break;\r\n      }\r\n      case 34: {\r\n        // *******\r\n        // * ORA *\r\n        // *******\r\n\r\n        // OR memory with accumulator, store in accumulator.\r\n        temp = (this.load(addr) | this.REG_ACC) & 255;\r\n        this.F_SIGN = (temp >> 7) & 1;\r\n        this.F_ZERO = temp;\r\n        this.REG_ACC = temp;\r\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\r\n        break;\r\n      }\r\n      case 35: {\r\n        // *******\r\n        // * PHA *\r\n        // *******\r\n\r\n        // Push accumulator on stack\r\n        this.push(this.REG_ACC);\r\n        break;\r\n      }\r\n      case 36: {\r\n        // *******\r\n        // * PHP *\r\n        // *******\r\n\r\n        // Push processor status on stack\r\n        this.F_BRK = 1;\r\n        this.push(\r\n          this.F_CARRY |\r\n            ((this.F_ZERO === 0 ? 1 : 0) << 1) |\r\n            (this.F_INTERRUPT << 2) |\r\n            (this.F_DECIMAL << 3) |\r\n            (this.F_BRK << 4) |\r\n            (this.F_NOTUSED << 5) |\r\n            (this.F_OVERFLOW << 6) |\r\n            (this.F_SIGN << 7)\r\n        );\r\n        break;\r\n      }\r\n      case 37: {\r\n        // *******\r\n        // * PLA *\r\n        // *******\r\n\r\n        // Pull accumulator from stack\r\n        this.REG_ACC = this.pull();\r\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\r\n        this.F_ZERO = this.REG_ACC;\r\n        break;\r\n      }\r\n      case 38: {\r\n        // *******\r\n        // * PLP *\r\n        // *******\r\n\r\n        // Pull processor status from stack\r\n        temp = this.pull();\r\n        this.F_CARRY = temp & 1;\r\n        this.F_ZERO = ((temp >> 1) & 1) === 1 ? 0 : 1;\r\n        this.F_INTERRUPT = (temp >> 2) & 1;\r\n        this.F_DECIMAL = (temp >> 3) & 1;\r\n        this.F_BRK = (temp >> 4) & 1;\r\n        this.F_NOTUSED = (temp >> 5) & 1;\r\n        this.F_OVERFLOW = (temp >> 6) & 1;\r\n        this.F_SIGN = (temp >> 7) & 1;\r\n\r\n        this.F_NOTUSED = 1;\r\n        break;\r\n      }\r\n      case 39: {\r\n        // *******\r\n        // * ROL *\r\n        // *******\r\n\r\n        // Rotate one bit left\r\n        if (addrMode === 4) {\r\n          // ADDR_ACC = 4\r\n\r\n          temp = this.REG_ACC;\r\n          add = this.F_CARRY;\r\n          this.F_CARRY = (temp >> 7) & 1;\r\n          temp = ((temp << 1) & 0xff) + add;\r\n          this.REG_ACC = temp;\r\n        } else {\r\n          temp = this.load(addr);\r\n          add = this.F_CARRY;\r\n          this.F_CARRY = (temp >> 7) & 1;\r\n          temp = ((temp << 1) & 0xff) + add;\r\n          this.write(addr, temp);\r\n        }\r\n        this.F_SIGN = (temp >> 7) & 1;\r\n        this.F_ZERO = temp;\r\n        break;\r\n      }\r\n      case 40: {\r\n        // *******\r\n        // * ROR *\r\n        // *******\r\n\r\n        // Rotate one bit right\r\n        if (addrMode === 4) {\r\n          // ADDR_ACC = 4\r\n\r\n          add = this.F_CARRY << 7;\r\n          this.F_CARRY = this.REG_ACC & 1;\r\n          temp = (this.REG_ACC >> 1) + add;\r\n          this.REG_ACC = temp;\r\n        } else {\r\n          temp = this.load(addr);\r\n          add = this.F_CARRY << 7;\r\n          this.F_CARRY = temp & 1;\r\n          temp = (temp >> 1) + add;\r\n          this.write(addr, temp);\r\n        }\r\n        this.F_SIGN = (temp >> 7) & 1;\r\n        this.F_ZERO = temp;\r\n        break;\r\n      }\r\n      case 41: {\r\n        // *******\r\n        // * RTI *\r\n        // *******\r\n\r\n        // Return from interrupt. Pull status and PC from stack.\r\n\r\n        temp = this.pull();\r\n        this.F_CARRY = temp & 1;\r\n        this.F_ZERO = ((temp >> 1) & 1) === 0 ? 1 : 0;\r\n        this.F_INTERRUPT = (temp >> 2) & 1;\r\n        this.F_DECIMAL = (temp >> 3) & 1;\r\n        this.F_BRK = (temp >> 4) & 1;\r\n        this.F_NOTUSED = (temp >> 5) & 1;\r\n        this.F_OVERFLOW = (temp >> 6) & 1;\r\n        this.F_SIGN = (temp >> 7) & 1;\r\n\r\n        this.REG_PC = this.pull();\r\n        this.REG_PC += this.pull() << 8;\r\n        if (this.REG_PC === 0xffff) {\r\n          return;\r\n        }\r\n        this.REG_PC--;\r\n        this.F_NOTUSED = 1;\r\n        break;\r\n      }\r\n      case 42: {\r\n        // *******\r\n        // * RTS *\r\n        // *******\r\n\r\n        // Return from subroutine. Pull PC from stack.\r\n\r\n        this.REG_PC = this.pull();\r\n        this.REG_PC += this.pull() << 8;\r\n\r\n        if (this.REG_PC === 0xffff) {\r\n          return; // return from NSF play routine:\r\n        }\r\n        break;\r\n      }\r\n      case 43: {\r\n        // *******\r\n        // * SBC *\r\n        // *******\r\n\r\n        temp = this.REG_ACC - this.load(addr) - (1 - this.F_CARRY);\r\n        this.F_SIGN = (temp >> 7) & 1;\r\n        this.F_ZERO = temp & 0xff;\r\n        if (\r\n          ((this.REG_ACC ^ temp) & 0x80) !== 0 &&\r\n          ((this.REG_ACC ^ this.load(addr)) & 0x80) !== 0\r\n        ) {\r\n          this.F_OVERFLOW = 1;\r\n        } else {\r\n          this.F_OVERFLOW = 0;\r\n        }\r\n        this.F_CARRY = temp < 0 ? 0 : 1;\r\n        this.REG_ACC = temp & 0xff;\r\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\r\n        break;\r\n      }\r\n      case 44: {\r\n        // *******\r\n        // * SEC *\r\n        // *******\r\n\r\n        // Set carry flag\r\n        this.F_CARRY = 1;\r\n        break;\r\n      }\r\n      case 45: {\r\n        // *******\r\n        // * SED *\r\n        // *******\r\n\r\n        // Set decimal mode\r\n        this.F_DECIMAL = 1;\r\n        break;\r\n      }\r\n      case 46: {\r\n        // *******\r\n        // * SEI *\r\n        // *******\r\n\r\n        // Set interrupt disable status\r\n        this.F_INTERRUPT = 1;\r\n        break;\r\n      }\r\n      case 47: {\r\n        // *******\r\n        // * STA *\r\n        // *******\r\n\r\n        // Store accumulator in memory\r\n        this.write(addr, this.REG_ACC);\r\n        break;\r\n      }\r\n      case 48: {\r\n        // *******\r\n        // * STX *\r\n        // *******\r\n\r\n        // Store index X in memory\r\n        this.write(addr, this.REG_X);\r\n        break;\r\n      }\r\n      case 49: {\r\n        // *******\r\n        // * STY *\r\n        // *******\r\n\r\n        // Store index Y in memory:\r\n        this.write(addr, this.REG_Y);\r\n        break;\r\n      }\r\n      case 50: {\r\n        // *******\r\n        // * TAX *\r\n        // *******\r\n\r\n        // Transfer accumulator to index X:\r\n        this.REG_X = this.REG_ACC;\r\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\r\n        this.F_ZERO = this.REG_ACC;\r\n        break;\r\n      }\r\n      case 51: {\r\n        // *******\r\n        // * TAY *\r\n        // *******\r\n\r\n        // Transfer accumulator to index Y:\r\n        this.REG_Y = this.REG_ACC;\r\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\r\n        this.F_ZERO = this.REG_ACC;\r\n        break;\r\n      }\r\n      case 52: {\r\n        // *******\r\n        // * TSX *\r\n        // *******\r\n\r\n        // Transfer stack pointer to index X:\r\n        this.REG_X = this.REG_SP - 0x0100;\r\n        this.F_SIGN = (this.REG_SP >> 7) & 1;\r\n        this.F_ZERO = this.REG_X;\r\n        break;\r\n      }\r\n      case 53: {\r\n        // *******\r\n        // * TXA *\r\n        // *******\r\n\r\n        // Transfer index X to accumulator:\r\n        this.REG_ACC = this.REG_X;\r\n        this.F_SIGN = (this.REG_X >> 7) & 1;\r\n        this.F_ZERO = this.REG_X;\r\n        break;\r\n      }\r\n      case 54: {\r\n        // *******\r\n        // * TXS *\r\n        // *******\r\n\r\n        // Transfer index X to stack pointer:\r\n        this.REG_SP = this.REG_X + 0x0100;\r\n        this.stackWrap();\r\n        break;\r\n      }\r\n      case 55: {\r\n        // *******\r\n        // * TYA *\r\n        // *******\r\n\r\n        // Transfer index Y to accumulator:\r\n        this.REG_ACC = this.REG_Y;\r\n        this.F_SIGN = (this.REG_Y >> 7) & 1;\r\n        this.F_ZERO = this.REG_Y;\r\n        break;\r\n      }\r\n      case 56: {\r\n        // *******\r\n        // * ALR *\r\n        // *******\r\n\r\n        // Shift right one bit after ANDing:\r\n        temp = this.REG_ACC & this.load(addr);\r\n        this.F_CARRY = temp & 1;\r\n        this.REG_ACC = this.F_ZERO = temp >> 1;\r\n        this.F_SIGN = 0;\r\n        break;\r\n      }\r\n      case 57: {\r\n        // *******\r\n        // * ANC *\r\n        // *******\r\n\r\n        // AND accumulator, setting carry to bit 7 result.\r\n        this.REG_ACC = this.F_ZERO = this.REG_ACC & this.load(addr);\r\n        this.F_CARRY = this.F_SIGN = (this.REG_ACC >> 7) & 1;\r\n        break;\r\n      }\r\n      case 58: {\r\n        // *******\r\n        // * ARR *\r\n        // *******\r\n\r\n        // Rotate right one bit after ANDing:\r\n        temp = this.REG_ACC & this.load(addr);\r\n        this.REG_ACC = this.F_ZERO = (temp >> 1) + (this.F_CARRY << 7);\r\n        this.F_SIGN = this.F_CARRY;\r\n        this.F_CARRY = (temp >> 7) & 1;\r\n        this.F_OVERFLOW = ((temp >> 7) ^ (temp >> 6)) & 1;\r\n        break;\r\n      }\r\n      case 59: {\r\n        // *******\r\n        // * AXS *\r\n        // *******\r\n\r\n        // Set X to (X AND A) - value.\r\n        temp = (this.REG_X & this.REG_ACC) - this.load(addr);\r\n        this.F_SIGN = (temp >> 7) & 1;\r\n        this.F_ZERO = temp & 0xff;\r\n        if (\r\n          ((this.REG_X ^ temp) & 0x80) !== 0 &&\r\n          ((this.REG_X ^ this.load(addr)) & 0x80) !== 0\r\n        ) {\r\n          this.F_OVERFLOW = 1;\r\n        } else {\r\n          this.F_OVERFLOW = 0;\r\n        }\r\n        this.F_CARRY = temp < 0 ? 0 : 1;\r\n        this.REG_X = temp & 0xff;\r\n        break;\r\n      }\r\n      case 60: {\r\n        // *******\r\n        // * LAX *\r\n        // *******\r\n\r\n        // Load A and X with memory:\r\n        this.REG_ACC = this.REG_X = this.F_ZERO = this.load(addr);\r\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\r\n        cycleCount += cycleAdd;\r\n        break;\r\n      }\r\n      case 61: {\r\n        // *******\r\n        // * SAX *\r\n        // *******\r\n\r\n        // Store A AND X in memory:\r\n        this.write(addr, this.REG_ACC & this.REG_X);\r\n        break;\r\n      }\r\n      case 62: {\r\n        // *******\r\n        // * DCP *\r\n        // *******\r\n\r\n        // Decrement memory by one:\r\n        temp = (this.load(addr) - 1) & 0xff;\r\n        this.write(addr, temp);\r\n\r\n        // Then compare with the accumulator:\r\n        temp = this.REG_ACC - temp;\r\n        this.F_CARRY = temp >= 0 ? 1 : 0;\r\n        this.F_SIGN = (temp >> 7) & 1;\r\n        this.F_ZERO = temp & 0xff;\r\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\r\n        break;\r\n      }\r\n      case 63: {\r\n        // *******\r\n        // * ISC *\r\n        // *******\r\n\r\n        // Increment memory by one:\r\n        temp = (this.load(addr) + 1) & 0xff;\r\n        this.write(addr, temp);\r\n\r\n        // Then subtract from the accumulator:\r\n        temp = this.REG_ACC - temp - (1 - this.F_CARRY);\r\n        this.F_SIGN = (temp >> 7) & 1;\r\n        this.F_ZERO = temp & 0xff;\r\n        if (\r\n          ((this.REG_ACC ^ temp) & 0x80) !== 0 &&\r\n          ((this.REG_ACC ^ this.load(addr)) & 0x80) !== 0\r\n        ) {\r\n          this.F_OVERFLOW = 1;\r\n        } else {\r\n          this.F_OVERFLOW = 0;\r\n        }\r\n        this.F_CARRY = temp < 0 ? 0 : 1;\r\n        this.REG_ACC = temp & 0xff;\r\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\r\n        break;\r\n      }\r\n      case 64: {\r\n        // *******\r\n        // * RLA *\r\n        // *******\r\n\r\n        // Rotate one bit left\r\n        temp = this.load(addr);\r\n        add = this.F_CARRY;\r\n        this.F_CARRY = (temp >> 7) & 1;\r\n        temp = ((temp << 1) & 0xff) + add;\r\n        this.write(addr, temp);\r\n\r\n        // Then AND with the accumulator.\r\n        this.REG_ACC = this.REG_ACC & temp;\r\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\r\n        this.F_ZERO = this.REG_ACC;\r\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\r\n        break;\r\n      }\r\n      case 65: {\r\n        // *******\r\n        // * RRA *\r\n        // *******\r\n\r\n        // Rotate one bit right\r\n        temp = this.load(addr);\r\n        add = this.F_CARRY << 7;\r\n        this.F_CARRY = temp & 1;\r\n        temp = (temp >> 1) + add;\r\n        this.write(addr, temp);\r\n\r\n        // Then add to the accumulator\r\n        temp = this.REG_ACC + this.load(addr) + this.F_CARRY;\r\n\r\n        if (\r\n          ((this.REG_ACC ^ this.load(addr)) & 0x80) === 0 &&\r\n          ((this.REG_ACC ^ temp) & 0x80) !== 0\r\n        ) {\r\n          this.F_OVERFLOW = 1;\r\n        } else {\r\n          this.F_OVERFLOW = 0;\r\n        }\r\n        this.F_CARRY = temp > 255 ? 1 : 0;\r\n        this.F_SIGN = (temp >> 7) & 1;\r\n        this.F_ZERO = temp & 0xff;\r\n        this.REG_ACC = temp & 255;\r\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\r\n        break;\r\n      }\r\n      case 66: {\r\n        // *******\r\n        // * SLO *\r\n        // *******\r\n\r\n        // Shift one bit left\r\n        temp = this.load(addr);\r\n        this.F_CARRY = (temp >> 7) & 1;\r\n        temp = (temp << 1) & 255;\r\n        this.write(addr, temp);\r\n\r\n        // Then OR with the accumulator.\r\n        this.REG_ACC = this.REG_ACC | temp;\r\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\r\n        this.F_ZERO = this.REG_ACC;\r\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\r\n        break;\r\n      }\r\n      case 67: {\r\n        // *******\r\n        // * SRE *\r\n        // *******\r\n\r\n        // Shift one bit right\r\n        temp = this.load(addr) & 0xff;\r\n        this.F_CARRY = temp & 1;\r\n        temp >>= 1;\r\n        this.write(addr, temp);\r\n\r\n        // Then XOR with the accumulator.\r\n        this.REG_ACC = this.REG_ACC ^ temp;\r\n        this.F_SIGN = (this.REG_ACC >> 7) & 1;\r\n        this.F_ZERO = this.REG_ACC;\r\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\r\n        break;\r\n      }\r\n      case 68: {\r\n        // *******\r\n        // * SKB *\r\n        // *******\r\n\r\n        // Do nothing\r\n        break;\r\n      }\r\n      case 69: {\r\n        // *******\r\n        // * IGN *\r\n        // *******\r\n\r\n        // Do nothing but load.\r\n        // TODO: Properly implement the double-reads.\r\n        this.load(addr);\r\n        if (addrMode !== 11) cycleCount += cycleAdd; // PostIdxInd = 11\r\n        break;\r\n      }\r\n\r\n      default: {\r\n        // *******\r\n        // * ??? *\r\n        // *******\r\n\t\tconsole.error(\"Game crashed, invalid opcode at address $\" + opaddr.toString(16));\r\n        break;\r\n      }\r\n    } // end of switch\r\n\r\n    return cycleCount;\r\n  },\r\n\r\n  load: function (addr) {\r\n    if (addr < 0x2000) {\r\n      return this.mem[addr & 0x7ff];\r\n    } else {\r\n      return this.nes.mmap.load(addr);\r\n    }\r\n  },\r\n\r\n  load16bit: function (addr) {\r\n    if (addr < 0x1fff) {\r\n      return this.mem[addr & 0x7ff] | (this.mem[(addr + 1) & 0x7ff] << 8);\r\n    } else {\r\n      return this.nes.mmap.load(addr) | (this.nes.mmap.load(addr + 1) << 8);\r\n    }\r\n  },\r\n\r\n  write: function (addr, val) {\r\n    if (addr < 0x2000) {\r\n      this.mem[addr & 0x7ff] = val;\r\n    } else {\r\n      this.nes.mmap.write(addr, val);\r\n    }\r\n  },\r\n\r\n  requestIrq: function (type) {\r\n    if (this.irqRequested) {\r\n      if (type === this.IRQ_NORMAL) {\r\n        return;\r\n      }\r\n      // console.log(\"too fast irqs. type=\"+type);\r\n    }\r\n    this.irqRequested = true;\r\n    this.irqType = type;\r\n  },\r\n\r\n  push: function (value) {\r\n    this.nes.mmap.write(this.REG_SP, value);\r\n    this.REG_SP--;\r\n    this.REG_SP = 0x0100 | (this.REG_SP & 0xff);\r\n  },\r\n\r\n  stackWrap: function () {\r\n    this.REG_SP = 0x0100 | (this.REG_SP & 0xff);\r\n  },\r\n\r\n  pull: function () {\r\n    this.REG_SP++;\r\n    this.REG_SP = 0x0100 | (this.REG_SP & 0xff);\r\n    return this.nes.mmap.load(this.REG_SP);\r\n  },\r\n\r\n  pageCrossed: function (addr1, addr2) {\r\n    return (addr1 & 0xff00) !== (addr2 & 0xff00);\r\n  },\r\n\r\n  haltCycles: function (cycles) {\r\n    this.cyclesToHalt += cycles;\r\n  },\r\n\r\n  doNonMaskableInterrupt: function (status) {\r\n    if ((this.nes.mmap.load(0x2000) & 128) !== 0) {\r\n      // Check whether VBlank Interrupts are enabled\r\n\r\n      this.REG_PC_NEW++;\r\n      this.push((this.REG_PC_NEW >> 8) & 0xff);\r\n      this.push(this.REG_PC_NEW & 0xff);\r\n      //this.F_INTERRUPT_NEW = 1;\r\n      this.push(status);\r\n\r\n      this.REG_PC_NEW =\r\n        this.nes.mmap.load(0xfffa) | (this.nes.mmap.load(0xfffb) << 8);\r\n      this.REG_PC_NEW--;\r\n    }\r\n  },\r\n\r\n  doResetInterrupt: function () {\r\n    this.REG_PC_NEW =\r\n      this.nes.mmap.load(0xfffc) | (this.nes.mmap.load(0xfffd) << 8);\r\n    this.REG_PC_NEW--;\r\n  },\r\n\r\n  doIrq: function (status) {\r\n    this.REG_PC_NEW++;\r\n    this.push((this.REG_PC_NEW >> 8) & 0xff);\r\n    this.push(this.REG_PC_NEW & 0xff);\r\n    this.push(status);\r\n    this.F_INTERRUPT_NEW = 1;\r\n    this.F_BRK_NEW = 0;\r\n\r\n    this.REG_PC_NEW =\r\n      this.nes.mmap.load(0xfffe) | (this.nes.mmap.load(0xffff) << 8);\r\n    this.REG_PC_NEW--;\r\n  },\r\n\r\n  getStatus: function () {\r\n    return (\r\n      this.F_CARRY |\r\n      (this.F_ZERO << 1) |\r\n      (this.F_INTERRUPT << 2) |\r\n      (this.F_DECIMAL << 3) |\r\n      (this.F_BRK << 4) |\r\n      (this.F_NOTUSED << 5) |\r\n      (this.F_OVERFLOW << 6) |\r\n      (this.F_SIGN << 7)\r\n    );\r\n  },\r\n\r\n  setStatus: function (st) {\r\n    this.F_CARRY = st & 1;\r\n    this.F_ZERO = (st >> 1) & 1;\r\n    this.F_INTERRUPT = (st >> 2) & 1;\r\n    this.F_DECIMAL = (st >> 3) & 1;\r\n    this.F_BRK = (st >> 4) & 1;\r\n    this.F_NOTUSED = (st >> 5) & 1;\r\n    this.F_OVERFLOW = (st >> 6) & 1;\r\n    this.F_SIGN = (st >> 7) & 1;\r\n  },\r\n\r\n  JSON_PROPERTIES: [\r\n    \"mem\",\r\n    \"cyclesToHalt\",\r\n    \"irqRequested\",\r\n    \"irqType\",\r\n    // Registers\r\n    \"REG_ACC\",\r\n    \"REG_X\",\r\n    \"REG_Y\",\r\n    \"REG_SP\",\r\n    \"REG_PC\",\r\n    \"REG_PC_NEW\",\r\n    \"REG_STATUS\",\r\n    // Status\r\n    \"F_CARRY\",\r\n    \"F_DECIMAL\",\r\n    \"F_INTERRUPT\",\r\n    \"F_INTERRUPT_NEW\",\r\n    \"F_OVERFLOW\",\r\n    \"F_SIGN\",\r\n    \"F_ZERO\",\r\n    \"F_NOTUSED\",\r\n    \"F_NOTUSED_NEW\",\r\n    \"F_BRK\",\r\n    \"F_BRK_NEW\",\r\n  ],\r\n\r\n  toJSON: function () {\r\n    return utils.toJSON(this);\r\n  },\r\n\r\n  fromJSON: function (s) {\r\n    utils.fromJSON(this, s);\r\n  },\r\n};\r\n\r\n// Generates and provides an array of details about instructions\r\nvar OpData = function () {\r\n  this.opdata = new Array(256);\r\n\r\n  // Set all to invalid instruction (to detect crashes):\r\n  for (var i = 0; i < 256; i++) this.opdata[i] = 0xff;\r\n\r\n  // Now fill in all valid opcodes:\r\n\r\n  // ADC:\r\n  this.setOp(this.INS_ADC, 0x69, this.ADDR_IMM, 2, 2);\r\n  this.setOp(this.INS_ADC, 0x65, this.ADDR_ZP, 2, 3);\r\n  this.setOp(this.INS_ADC, 0x75, this.ADDR_ZPX, 2, 4);\r\n  this.setOp(this.INS_ADC, 0x6d, this.ADDR_ABS, 3, 4);\r\n  this.setOp(this.INS_ADC, 0x7d, this.ADDR_ABSX, 3, 4);\r\n  this.setOp(this.INS_ADC, 0x79, this.ADDR_ABSY, 3, 4);\r\n  this.setOp(this.INS_ADC, 0x61, this.ADDR_PREIDXIND, 2, 6);\r\n  this.setOp(this.INS_ADC, 0x71, this.ADDR_POSTIDXIND, 2, 5);\r\n\r\n  // AND:\r\n  this.setOp(this.INS_AND, 0x29, this.ADDR_IMM, 2, 2);\r\n  this.setOp(this.INS_AND, 0x25, this.ADDR_ZP, 2, 3);\r\n  this.setOp(this.INS_AND, 0x35, this.ADDR_ZPX, 2, 4);\r\n  this.setOp(this.INS_AND, 0x2d, this.ADDR_ABS, 3, 4);\r\n  this.setOp(this.INS_AND, 0x3d, this.ADDR_ABSX, 3, 4);\r\n  this.setOp(this.INS_AND, 0x39, this.ADDR_ABSY, 3, 4);\r\n  this.setOp(this.INS_AND, 0x21, this.ADDR_PREIDXIND, 2, 6);\r\n  this.setOp(this.INS_AND, 0x31, this.ADDR_POSTIDXIND, 2, 5);\r\n\r\n  // ASL:\r\n  this.setOp(this.INS_ASL, 0x0a, this.ADDR_ACC, 1, 2);\r\n  this.setOp(this.INS_ASL, 0x06, this.ADDR_ZP, 2, 5);\r\n  this.setOp(this.INS_ASL, 0x16, this.ADDR_ZPX, 2, 6);\r\n  this.setOp(this.INS_ASL, 0x0e, this.ADDR_ABS, 3, 6);\r\n  this.setOp(this.INS_ASL, 0x1e, this.ADDR_ABSX, 3, 7);\r\n\r\n  // BCC:\r\n  this.setOp(this.INS_BCC, 0x90, this.ADDR_REL, 2, 2);\r\n\r\n  // BCS:\r\n  this.setOp(this.INS_BCS, 0xb0, this.ADDR_REL, 2, 2);\r\n\r\n  // BEQ:\r\n  this.setOp(this.INS_BEQ, 0xf0, this.ADDR_REL, 2, 2);\r\n\r\n  // BIT:\r\n  this.setOp(this.INS_BIT, 0x24, this.ADDR_ZP, 2, 3);\r\n  this.setOp(this.INS_BIT, 0x2c, this.ADDR_ABS, 3, 4);\r\n\r\n  // BMI:\r\n  this.setOp(this.INS_BMI, 0x30, this.ADDR_REL, 2, 2);\r\n\r\n  // BNE:\r\n  this.setOp(this.INS_BNE, 0xd0, this.ADDR_REL, 2, 2);\r\n\r\n  // BPL:\r\n  this.setOp(this.INS_BPL, 0x10, this.ADDR_REL, 2, 2);\r\n\r\n  // BRK:\r\n  this.setOp(this.INS_BRK, 0x00, this.ADDR_IMP, 1, 7);\r\n\r\n  // BVC:\r\n  this.setOp(this.INS_BVC, 0x50, this.ADDR_REL, 2, 2);\r\n\r\n  // BVS:\r\n  this.setOp(this.INS_BVS, 0x70, this.ADDR_REL, 2, 2);\r\n\r\n  // CLC:\r\n  this.setOp(this.INS_CLC, 0x18, this.ADDR_IMP, 1, 2);\r\n\r\n  // CLD:\r\n  this.setOp(this.INS_CLD, 0xd8, this.ADDR_IMP, 1, 2);\r\n\r\n  // CLI:\r\n  this.setOp(this.INS_CLI, 0x58, this.ADDR_IMP, 1, 2);\r\n\r\n  // CLV:\r\n  this.setOp(this.INS_CLV, 0xb8, this.ADDR_IMP, 1, 2);\r\n\r\n  // CMP:\r\n  this.setOp(this.INS_CMP, 0xc9, this.ADDR_IMM, 2, 2);\r\n  this.setOp(this.INS_CMP, 0xc5, this.ADDR_ZP, 2, 3);\r\n  this.setOp(this.INS_CMP, 0xd5, this.ADDR_ZPX, 2, 4);\r\n  this.setOp(this.INS_CMP, 0xcd, this.ADDR_ABS, 3, 4);\r\n  this.setOp(this.INS_CMP, 0xdd, this.ADDR_ABSX, 3, 4);\r\n  this.setOp(this.INS_CMP, 0xd9, this.ADDR_ABSY, 3, 4);\r\n  this.setOp(this.INS_CMP, 0xc1, this.ADDR_PREIDXIND, 2, 6);\r\n  this.setOp(this.INS_CMP, 0xd1, this.ADDR_POSTIDXIND, 2, 5);\r\n\r\n  // CPX:\r\n  this.setOp(this.INS_CPX, 0xe0, this.ADDR_IMM, 2, 2);\r\n  this.setOp(this.INS_CPX, 0xe4, this.ADDR_ZP, 2, 3);\r\n  this.setOp(this.INS_CPX, 0xec, this.ADDR_ABS, 3, 4);\r\n\r\n  // CPY:\r\n  this.setOp(this.INS_CPY, 0xc0, this.ADDR_IMM, 2, 2);\r\n  this.setOp(this.INS_CPY, 0xc4, this.ADDR_ZP, 2, 3);\r\n  this.setOp(this.INS_CPY, 0xcc, this.ADDR_ABS, 3, 4);\r\n\r\n  // DEC:\r\n  this.setOp(this.INS_DEC, 0xc6, this.ADDR_ZP, 2, 5);\r\n  this.setOp(this.INS_DEC, 0xd6, this.ADDR_ZPX, 2, 6);\r\n  this.setOp(this.INS_DEC, 0xce, this.ADDR_ABS, 3, 6);\r\n  this.setOp(this.INS_DEC, 0xde, this.ADDR_ABSX, 3, 7);\r\n\r\n  // DEX:\r\n  this.setOp(this.INS_DEX, 0xca, this.ADDR_IMP, 1, 2);\r\n\r\n  // DEY:\r\n  this.setOp(this.INS_DEY, 0x88, this.ADDR_IMP, 1, 2);\r\n\r\n  // EOR:\r\n  this.setOp(this.INS_EOR, 0x49, this.ADDR_IMM, 2, 2);\r\n  this.setOp(this.INS_EOR, 0x45, this.ADDR_ZP, 2, 3);\r\n  this.setOp(this.INS_EOR, 0x55, this.ADDR_ZPX, 2, 4);\r\n  this.setOp(this.INS_EOR, 0x4d, this.ADDR_ABS, 3, 4);\r\n  this.setOp(this.INS_EOR, 0x5d, this.ADDR_ABSX, 3, 4);\r\n  this.setOp(this.INS_EOR, 0x59, this.ADDR_ABSY, 3, 4);\r\n  this.setOp(this.INS_EOR, 0x41, this.ADDR_PREIDXIND, 2, 6);\r\n  this.setOp(this.INS_EOR, 0x51, this.ADDR_POSTIDXIND, 2, 5);\r\n\r\n  // INC:\r\n  this.setOp(this.INS_INC, 0xe6, this.ADDR_ZP, 2, 5);\r\n  this.setOp(this.INS_INC, 0xf6, this.ADDR_ZPX, 2, 6);\r\n  this.setOp(this.INS_INC, 0xee, this.ADDR_ABS, 3, 6);\r\n  this.setOp(this.INS_INC, 0xfe, this.ADDR_ABSX, 3, 7);\r\n\r\n  // INX:\r\n  this.setOp(this.INS_INX, 0xe8, this.ADDR_IMP, 1, 2);\r\n\r\n  // INY:\r\n  this.setOp(this.INS_INY, 0xc8, this.ADDR_IMP, 1, 2);\r\n\r\n  // JMP:\r\n  this.setOp(this.INS_JMP, 0x4c, this.ADDR_ABS, 3, 3);\r\n  this.setOp(this.INS_JMP, 0x6c, this.ADDR_INDABS, 3, 5);\r\n\r\n  // JSR:\r\n  this.setOp(this.INS_JSR, 0x20, this.ADDR_ABS, 3, 6);\r\n\r\n  // LDA:\r\n  this.setOp(this.INS_LDA, 0xa9, this.ADDR_IMM, 2, 2);\r\n  this.setOp(this.INS_LDA, 0xa5, this.ADDR_ZP, 2, 3);\r\n  this.setOp(this.INS_LDA, 0xb5, this.ADDR_ZPX, 2, 4);\r\n  this.setOp(this.INS_LDA, 0xad, this.ADDR_ABS, 3, 4);\r\n  this.setOp(this.INS_LDA, 0xbd, this.ADDR_ABSX, 3, 4);\r\n  this.setOp(this.INS_LDA, 0xb9, this.ADDR_ABSY, 3, 4);\r\n  this.setOp(this.INS_LDA, 0xa1, this.ADDR_PREIDXIND, 2, 6);\r\n  this.setOp(this.INS_LDA, 0xb1, this.ADDR_POSTIDXIND, 2, 5);\r\n\r\n  // LDX:\r\n  this.setOp(this.INS_LDX, 0xa2, this.ADDR_IMM, 2, 2);\r\n  this.setOp(this.INS_LDX, 0xa6, this.ADDR_ZP, 2, 3);\r\n  this.setOp(this.INS_LDX, 0xb6, this.ADDR_ZPY, 2, 4);\r\n  this.setOp(this.INS_LDX, 0xae, this.ADDR_ABS, 3, 4);\r\n  this.setOp(this.INS_LDX, 0xbe, this.ADDR_ABSY, 3, 4);\r\n\r\n  // LDY:\r\n  this.setOp(this.INS_LDY, 0xa0, this.ADDR_IMM, 2, 2);\r\n  this.setOp(this.INS_LDY, 0xa4, this.ADDR_ZP, 2, 3);\r\n  this.setOp(this.INS_LDY, 0xb4, this.ADDR_ZPX, 2, 4);\r\n  this.setOp(this.INS_LDY, 0xac, this.ADDR_ABS, 3, 4);\r\n  this.setOp(this.INS_LDY, 0xbc, this.ADDR_ABSX, 3, 4);\r\n\r\n  // LSR:\r\n  this.setOp(this.INS_LSR, 0x4a, this.ADDR_ACC, 1, 2);\r\n  this.setOp(this.INS_LSR, 0x46, this.ADDR_ZP, 2, 5);\r\n  this.setOp(this.INS_LSR, 0x56, this.ADDR_ZPX, 2, 6);\r\n  this.setOp(this.INS_LSR, 0x4e, this.ADDR_ABS, 3, 6);\r\n  this.setOp(this.INS_LSR, 0x5e, this.ADDR_ABSX, 3, 7);\r\n\r\n  // NOP:\r\n  this.setOp(this.INS_NOP, 0x1a, this.ADDR_IMP, 1, 2);\r\n  this.setOp(this.INS_NOP, 0x3a, this.ADDR_IMP, 1, 2);\r\n  this.setOp(this.INS_NOP, 0x5a, this.ADDR_IMP, 1, 2);\r\n  this.setOp(this.INS_NOP, 0x7a, this.ADDR_IMP, 1, 2);\r\n  this.setOp(this.INS_NOP, 0xda, this.ADDR_IMP, 1, 2);\r\n  this.setOp(this.INS_NOP, 0xea, this.ADDR_IMP, 1, 2);\r\n  this.setOp(this.INS_NOP, 0xfa, this.ADDR_IMP, 1, 2);\r\n\r\n  // ORA:\r\n  this.setOp(this.INS_ORA, 0x09, this.ADDR_IMM, 2, 2);\r\n  this.setOp(this.INS_ORA, 0x05, this.ADDR_ZP, 2, 3);\r\n  this.setOp(this.INS_ORA, 0x15, this.ADDR_ZPX, 2, 4);\r\n  this.setOp(this.INS_ORA, 0x0d, this.ADDR_ABS, 3, 4);\r\n  this.setOp(this.INS_ORA, 0x1d, this.ADDR_ABSX, 3, 4);\r\n  this.setOp(this.INS_ORA, 0x19, this.ADDR_ABSY, 3, 4);\r\n  this.setOp(this.INS_ORA, 0x01, this.ADDR_PREIDXIND, 2, 6);\r\n  this.setOp(this.INS_ORA, 0x11, this.ADDR_POSTIDXIND, 2, 5);\r\n\r\n  // PHA:\r\n  this.setOp(this.INS_PHA, 0x48, this.ADDR_IMP, 1, 3);\r\n\r\n  // PHP:\r\n  this.setOp(this.INS_PHP, 0x08, this.ADDR_IMP, 1, 3);\r\n\r\n  // PLA:\r\n  this.setOp(this.INS_PLA, 0x68, this.ADDR_IMP, 1, 4);\r\n\r\n  // PLP:\r\n  this.setOp(this.INS_PLP, 0x28, this.ADDR_IMP, 1, 4);\r\n\r\n  // ROL:\r\n  this.setOp(this.INS_ROL, 0x2a, this.ADDR_ACC, 1, 2);\r\n  this.setOp(this.INS_ROL, 0x26, this.ADDR_ZP, 2, 5);\r\n  this.setOp(this.INS_ROL, 0x36, this.ADDR_ZPX, 2, 6);\r\n  this.setOp(this.INS_ROL, 0x2e, this.ADDR_ABS, 3, 6);\r\n  this.setOp(this.INS_ROL, 0x3e, this.ADDR_ABSX, 3, 7);\r\n\r\n  // ROR:\r\n  this.setOp(this.INS_ROR, 0x6a, this.ADDR_ACC, 1, 2);\r\n  this.setOp(this.INS_ROR, 0x66, this.ADDR_ZP, 2, 5);\r\n  this.setOp(this.INS_ROR, 0x76, this.ADDR_ZPX, 2, 6);\r\n  this.setOp(this.INS_ROR, 0x6e, this.ADDR_ABS, 3, 6);\r\n  this.setOp(this.INS_ROR, 0x7e, this.ADDR_ABSX, 3, 7);\r\n\r\n  // RTI:\r\n  this.setOp(this.INS_RTI, 0x40, this.ADDR_IMP, 1, 6);\r\n\r\n  // RTS:\r\n  this.setOp(this.INS_RTS, 0x60, this.ADDR_IMP, 1, 6);\r\n\r\n  // SBC:\r\n  this.setOp(this.INS_SBC, 0xe9, this.ADDR_IMM, 2, 2);\r\n  this.setOp(this.INS_SBC, 0xe5, this.ADDR_ZP, 2, 3);\r\n  this.setOp(this.INS_SBC, 0xf5, this.ADDR_ZPX, 2, 4);\r\n  this.setOp(this.INS_SBC, 0xed, this.ADDR_ABS, 3, 4);\r\n  this.setOp(this.INS_SBC, 0xfd, this.ADDR_ABSX, 3, 4);\r\n  this.setOp(this.INS_SBC, 0xf9, this.ADDR_ABSY, 3, 4);\r\n  this.setOp(this.INS_SBC, 0xe1, this.ADDR_PREIDXIND, 2, 6);\r\n  this.setOp(this.INS_SBC, 0xf1, this.ADDR_POSTIDXIND, 2, 5);\r\n\r\n  // SEC:\r\n  this.setOp(this.INS_SEC, 0x38, this.ADDR_IMP, 1, 2);\r\n\r\n  // SED:\r\n  this.setOp(this.INS_SED, 0xf8, this.ADDR_IMP, 1, 2);\r\n\r\n  // SEI:\r\n  this.setOp(this.INS_SEI, 0x78, this.ADDR_IMP, 1, 2);\r\n\r\n  // STA:\r\n  this.setOp(this.INS_STA, 0x85, this.ADDR_ZP, 2, 3);\r\n  this.setOp(this.INS_STA, 0x95, this.ADDR_ZPX, 2, 4);\r\n  this.setOp(this.INS_STA, 0x8d, this.ADDR_ABS, 3, 4);\r\n  this.setOp(this.INS_STA, 0x9d, this.ADDR_ABSX, 3, 5);\r\n  this.setOp(this.INS_STA, 0x99, this.ADDR_ABSY, 3, 5);\r\n  this.setOp(this.INS_STA, 0x81, this.ADDR_PREIDXIND, 2, 6);\r\n  this.setOp(this.INS_STA, 0x91, this.ADDR_POSTIDXIND, 2, 6);\r\n\r\n  // STX:\r\n  this.setOp(this.INS_STX, 0x86, this.ADDR_ZP, 2, 3);\r\n  this.setOp(this.INS_STX, 0x96, this.ADDR_ZPY, 2, 4);\r\n  this.setOp(this.INS_STX, 0x8e, this.ADDR_ABS, 3, 4);\r\n\r\n  // STY:\r\n  this.setOp(this.INS_STY, 0x84, this.ADDR_ZP, 2, 3);\r\n  this.setOp(this.INS_STY, 0x94, this.ADDR_ZPX, 2, 4);\r\n  this.setOp(this.INS_STY, 0x8c, this.ADDR_ABS, 3, 4);\r\n\r\n  // TAX:\r\n  this.setOp(this.INS_TAX, 0xaa, this.ADDR_IMP, 1, 2);\r\n\r\n  // TAY:\r\n  this.setOp(this.INS_TAY, 0xa8, this.ADDR_IMP, 1, 2);\r\n\r\n  // TSX:\r\n  this.setOp(this.INS_TSX, 0xba, this.ADDR_IMP, 1, 2);\r\n\r\n  // TXA:\r\n  this.setOp(this.INS_TXA, 0x8a, this.ADDR_IMP, 1, 2);\r\n\r\n  // TXS:\r\n  this.setOp(this.INS_TXS, 0x9a, this.ADDR_IMP, 1, 2);\r\n\r\n  // TYA:\r\n  this.setOp(this.INS_TYA, 0x98, this.ADDR_IMP, 1, 2);\r\n\r\n  // ALR:\r\n  this.setOp(this.INS_ALR, 0x4b, this.ADDR_IMM, 2, 2);\r\n\r\n  // ANC:\r\n  this.setOp(this.INS_ANC, 0x0b, this.ADDR_IMM, 2, 2);\r\n  this.setOp(this.INS_ANC, 0x2b, this.ADDR_IMM, 2, 2);\r\n\r\n  // ARR:\r\n  this.setOp(this.INS_ARR, 0x6b, this.ADDR_IMM, 2, 2);\r\n\r\n  // AXS:\r\n  this.setOp(this.INS_AXS, 0xcb, this.ADDR_IMM, 2, 2);\r\n\r\n  // LAX:\r\n  this.setOp(this.INS_LAX, 0xa3, this.ADDR_PREIDXIND, 2, 6);\r\n  this.setOp(this.INS_LAX, 0xa7, this.ADDR_ZP, 2, 3);\r\n  this.setOp(this.INS_LAX, 0xaf, this.ADDR_ABS, 3, 4);\r\n  this.setOp(this.INS_LAX, 0xb3, this.ADDR_POSTIDXIND, 2, 5);\r\n  this.setOp(this.INS_LAX, 0xb7, this.ADDR_ZPY, 2, 4);\r\n  this.setOp(this.INS_LAX, 0xbf, this.ADDR_ABSY, 3, 4);\r\n\r\n  // SAX:\r\n  this.setOp(this.INS_SAX, 0x83, this.ADDR_PREIDXIND, 2, 6);\r\n  this.setOp(this.INS_SAX, 0x87, this.ADDR_ZP, 2, 3);\r\n  this.setOp(this.INS_SAX, 0x8f, this.ADDR_ABS, 3, 4);\r\n  this.setOp(this.INS_SAX, 0x97, this.ADDR_ZPY, 2, 4);\r\n\r\n  // DCP:\r\n  this.setOp(this.INS_DCP, 0xc3, this.ADDR_PREIDXIND, 2, 8);\r\n  this.setOp(this.INS_DCP, 0xc7, this.ADDR_ZP, 2, 5);\r\n  this.setOp(this.INS_DCP, 0xcf, this.ADDR_ABS, 3, 6);\r\n  this.setOp(this.INS_DCP, 0xd3, this.ADDR_POSTIDXIND, 2, 8);\r\n  this.setOp(this.INS_DCP, 0xd7, this.ADDR_ZPX, 2, 6);\r\n  this.setOp(this.INS_DCP, 0xdb, this.ADDR_ABSY, 3, 7);\r\n  this.setOp(this.INS_DCP, 0xdf, this.ADDR_ABSX, 3, 7);\r\n\r\n  // ISC:\r\n  this.setOp(this.INS_ISC, 0xe3, this.ADDR_PREIDXIND, 2, 8);\r\n  this.setOp(this.INS_ISC, 0xe7, this.ADDR_ZP, 2, 5);\r\n  this.setOp(this.INS_ISC, 0xef, this.ADDR_ABS, 3, 6);\r\n  this.setOp(this.INS_ISC, 0xf3, this.ADDR_POSTIDXIND, 2, 8);\r\n  this.setOp(this.INS_ISC, 0xf7, this.ADDR_ZPX, 2, 6);\r\n  this.setOp(this.INS_ISC, 0xfb, this.ADDR_ABSY, 3, 7);\r\n  this.setOp(this.INS_ISC, 0xff, this.ADDR_ABSX, 3, 7);\r\n\r\n  // RLA:\r\n  this.setOp(this.INS_RLA, 0x23, this.ADDR_PREIDXIND, 2, 8);\r\n  this.setOp(this.INS_RLA, 0x27, this.ADDR_ZP, 2, 5);\r\n  this.setOp(this.INS_RLA, 0x2f, this.ADDR_ABS, 3, 6);\r\n  this.setOp(this.INS_RLA, 0x33, this.ADDR_POSTIDXIND, 2, 8);\r\n  this.setOp(this.INS_RLA, 0x37, this.ADDR_ZPX, 2, 6);\r\n  this.setOp(this.INS_RLA, 0x3b, this.ADDR_ABSY, 3, 7);\r\n  this.setOp(this.INS_RLA, 0x3f, this.ADDR_ABSX, 3, 7);\r\n\r\n  // RRA:\r\n  this.setOp(this.INS_RRA, 0x63, this.ADDR_PREIDXIND, 2, 8);\r\n  this.setOp(this.INS_RRA, 0x67, this.ADDR_ZP, 2, 5);\r\n  this.setOp(this.INS_RRA, 0x6f, this.ADDR_ABS, 3, 6);\r\n  this.setOp(this.INS_RRA, 0x73, this.ADDR_POSTIDXIND, 2, 8);\r\n  this.setOp(this.INS_RRA, 0x77, this.ADDR_ZPX, 2, 6);\r\n  this.setOp(this.INS_RRA, 0x7b, this.ADDR_ABSY, 3, 7);\r\n  this.setOp(this.INS_RRA, 0x7f, this.ADDR_ABSX, 3, 7);\r\n\r\n  // SLO:\r\n  this.setOp(this.INS_SLO, 0x03, this.ADDR_PREIDXIND, 2, 8);\r\n  this.setOp(this.INS_SLO, 0x07, this.ADDR_ZP, 2, 5);\r\n  this.setOp(this.INS_SLO, 0x0f, this.ADDR_ABS, 3, 6);\r\n  this.setOp(this.INS_SLO, 0x13, this.ADDR_POSTIDXIND, 2, 8);\r\n  this.setOp(this.INS_SLO, 0x17, this.ADDR_ZPX, 2, 6);\r\n  this.setOp(this.INS_SLO, 0x1b, this.ADDR_ABSY, 3, 7);\r\n  this.setOp(this.INS_SLO, 0x1f, this.ADDR_ABSX, 3, 7);\r\n\r\n  // SRE:\r\n  this.setOp(this.INS_SRE, 0x43, this.ADDR_PREIDXIND, 2, 8);\r\n  this.setOp(this.INS_SRE, 0x47, this.ADDR_ZP, 2, 5);\r\n  this.setOp(this.INS_SRE, 0x4f, this.ADDR_ABS, 3, 6);\r\n  this.setOp(this.INS_SRE, 0x53, this.ADDR_POSTIDXIND, 2, 8);\r\n  this.setOp(this.INS_SRE, 0x57, this.ADDR_ZPX, 2, 6);\r\n  this.setOp(this.INS_SRE, 0x5b, this.ADDR_ABSY, 3, 7);\r\n  this.setOp(this.INS_SRE, 0x5f, this.ADDR_ABSX, 3, 7);\r\n\r\n  // SKB:\r\n  this.setOp(this.INS_SKB, 0x80, this.ADDR_IMM, 2, 2);\r\n  this.setOp(this.INS_SKB, 0x82, this.ADDR_IMM, 2, 2);\r\n  this.setOp(this.INS_SKB, 0x89, this.ADDR_IMM, 2, 2);\r\n  this.setOp(this.INS_SKB, 0xc2, this.ADDR_IMM, 2, 2);\r\n  this.setOp(this.INS_SKB, 0xe2, this.ADDR_IMM, 2, 2);\r\n\r\n  // SKB:\r\n  this.setOp(this.INS_IGN, 0x0c, this.ADDR_ABS, 3, 4);\r\n  this.setOp(this.INS_IGN, 0x1c, this.ADDR_ABSX, 3, 4);\r\n  this.setOp(this.INS_IGN, 0x3c, this.ADDR_ABSX, 3, 4);\r\n  this.setOp(this.INS_IGN, 0x5c, this.ADDR_ABSX, 3, 4);\r\n  this.setOp(this.INS_IGN, 0x7c, this.ADDR_ABSX, 3, 4);\r\n  this.setOp(this.INS_IGN, 0xdc, this.ADDR_ABSX, 3, 4);\r\n  this.setOp(this.INS_IGN, 0xfc, this.ADDR_ABSX, 3, 4);\r\n  this.setOp(this.INS_IGN, 0x04, this.ADDR_ZP, 2, 3);\r\n  this.setOp(this.INS_IGN, 0x44, this.ADDR_ZP, 2, 3);\r\n  this.setOp(this.INS_IGN, 0x64, this.ADDR_ZP, 2, 3);\r\n  this.setOp(this.INS_IGN, 0x14, this.ADDR_ZPX, 2, 4);\r\n  this.setOp(this.INS_IGN, 0x34, this.ADDR_ZPX, 2, 4);\r\n  this.setOp(this.INS_IGN, 0x54, this.ADDR_ZPX, 2, 4);\r\n  this.setOp(this.INS_IGN, 0x74, this.ADDR_ZPX, 2, 4);\r\n  this.setOp(this.INS_IGN, 0xd4, this.ADDR_ZPX, 2, 4);\r\n  this.setOp(this.INS_IGN, 0xf4, this.ADDR_ZPX, 2, 4);\r\n\r\n  // prettier-ignore\r\n  this.cycTable = new Array(\r\n    /*0x00*/ 7,6,2,8,3,3,5,5,3,2,2,2,4,4,6,6,\r\n    /*0x10*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\r\n    /*0x20*/ 6,6,2,8,3,3,5,5,4,2,2,2,4,4,6,6,\r\n    /*0x30*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\r\n    /*0x40*/ 6,6,2,8,3,3,5,5,3,2,2,2,3,4,6,6,\r\n    /*0x50*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\r\n    /*0x60*/ 6,6,2,8,3,3,5,5,4,2,2,2,5,4,6,6,\r\n    /*0x70*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\r\n    /*0x80*/ 2,6,2,6,3,3,3,3,2,2,2,2,4,4,4,4,\r\n    /*0x90*/ 2,6,2,6,4,4,4,4,2,5,2,5,5,5,5,5,\r\n    /*0xA0*/ 2,6,2,6,3,3,3,3,2,2,2,2,4,4,4,4,\r\n    /*0xB0*/ 2,5,2,5,4,4,4,4,2,4,2,4,4,4,4,4,\r\n    /*0xC0*/ 2,6,2,8,3,3,5,5,2,2,2,2,4,4,6,6,\r\n    /*0xD0*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\r\n    /*0xE0*/ 2,6,3,8,3,3,5,5,2,2,2,2,4,4,6,6,\r\n    /*0xF0*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7\r\n  );\r\n\r\n  this.instname = new Array(70);\r\n\r\n  // Instruction Names:\r\n  this.instname[0] = \"ADC\";\r\n  this.instname[1] = \"AND\";\r\n  this.instname[2] = \"ASL\";\r\n  this.instname[3] = \"BCC\";\r\n  this.instname[4] = \"BCS\";\r\n  this.instname[5] = \"BEQ\";\r\n  this.instname[6] = \"BIT\";\r\n  this.instname[7] = \"BMI\";\r\n  this.instname[8] = \"BNE\";\r\n  this.instname[9] = \"BPL\";\r\n  this.instname[10] = \"BRK\";\r\n  this.instname[11] = \"BVC\";\r\n  this.instname[12] = \"BVS\";\r\n  this.instname[13] = \"CLC\";\r\n  this.instname[14] = \"CLD\";\r\n  this.instname[15] = \"CLI\";\r\n  this.instname[16] = \"CLV\";\r\n  this.instname[17] = \"CMP\";\r\n  this.instname[18] = \"CPX\";\r\n  this.instname[19] = \"CPY\";\r\n  this.instname[20] = \"DEC\";\r\n  this.instname[21] = \"DEX\";\r\n  this.instname[22] = \"DEY\";\r\n  this.instname[23] = \"EOR\";\r\n  this.instname[24] = \"INC\";\r\n  this.instname[25] = \"INX\";\r\n  this.instname[26] = \"INY\";\r\n  this.instname[27] = \"JMP\";\r\n  this.instname[28] = \"JSR\";\r\n  this.instname[29] = \"LDA\";\r\n  this.instname[30] = \"LDX\";\r\n  this.instname[31] = \"LDY\";\r\n  this.instname[32] = \"LSR\";\r\n  this.instname[33] = \"NOP\";\r\n  this.instname[34] = \"ORA\";\r\n  this.instname[35] = \"PHA\";\r\n  this.instname[36] = \"PHP\";\r\n  this.instname[37] = \"PLA\";\r\n  this.instname[38] = \"PLP\";\r\n  this.instname[39] = \"ROL\";\r\n  this.instname[40] = \"ROR\";\r\n  this.instname[41] = \"RTI\";\r\n  this.instname[42] = \"RTS\";\r\n  this.instname[43] = \"SBC\";\r\n  this.instname[44] = \"SEC\";\r\n  this.instname[45] = \"SED\";\r\n  this.instname[46] = \"SEI\";\r\n  this.instname[47] = \"STA\";\r\n  this.instname[48] = \"STX\";\r\n  this.instname[49] = \"STY\";\r\n  this.instname[50] = \"TAX\";\r\n  this.instname[51] = \"TAY\";\r\n  this.instname[52] = \"TSX\";\r\n  this.instname[53] = \"TXA\";\r\n  this.instname[54] = \"TXS\";\r\n  this.instname[55] = \"TYA\";\r\n  this.instname[56] = \"ALR\";\r\n  this.instname[57] = \"ANC\";\r\n  this.instname[58] = \"ARR\";\r\n  this.instname[59] = \"AXS\";\r\n  this.instname[60] = \"LAX\";\r\n  this.instname[61] = \"SAX\";\r\n  this.instname[62] = \"DCP\";\r\n  this.instname[63] = \"ISC\";\r\n  this.instname[64] = \"RLA\";\r\n  this.instname[65] = \"RRA\";\r\n  this.instname[66] = \"SLO\";\r\n  this.instname[67] = \"SRE\";\r\n  this.instname[68] = \"SKB\";\r\n  this.instname[69] = \"IGN\";\r\n\r\n  this.addrDesc = new Array(\r\n    \"Zero Page           \",\r\n    \"Relative            \",\r\n    \"Implied             \",\r\n    \"Absolute            \",\r\n    \"Accumulator         \",\r\n    \"Immediate           \",\r\n    \"Zero Page,X         \",\r\n    \"Zero Page,Y         \",\r\n    \"Absolute,X          \",\r\n    \"Absolute,Y          \",\r\n    \"Preindexed Indirect \",\r\n    \"Postindexed Indirect\",\r\n    \"Indirect Absolute   \"\r\n  );\r\n};\r\n\r\nOpData.prototype = {\r\n  INS_ADC: 0,\r\n  INS_AND: 1,\r\n  INS_ASL: 2,\r\n\r\n  INS_BCC: 3,\r\n  INS_BCS: 4,\r\n  INS_BEQ: 5,\r\n  INS_BIT: 6,\r\n  INS_BMI: 7,\r\n  INS_BNE: 8,\r\n  INS_BPL: 9,\r\n  INS_BRK: 10,\r\n  INS_BVC: 11,\r\n  INS_BVS: 12,\r\n\r\n  INS_CLC: 13,\r\n  INS_CLD: 14,\r\n  INS_CLI: 15,\r\n  INS_CLV: 16,\r\n  INS_CMP: 17,\r\n  INS_CPX: 18,\r\n  INS_CPY: 19,\r\n\r\n  INS_DEC: 20,\r\n  INS_DEX: 21,\r\n  INS_DEY: 22,\r\n\r\n  INS_EOR: 23,\r\n\r\n  INS_INC: 24,\r\n  INS_INX: 25,\r\n  INS_INY: 26,\r\n\r\n  INS_JMP: 27,\r\n  INS_JSR: 28,\r\n\r\n  INS_LDA: 29,\r\n  INS_LDX: 30,\r\n  INS_LDY: 31,\r\n  INS_LSR: 32,\r\n\r\n  INS_NOP: 33,\r\n\r\n  INS_ORA: 34,\r\n\r\n  INS_PHA: 35,\r\n  INS_PHP: 36,\r\n  INS_PLA: 37,\r\n  INS_PLP: 38,\r\n\r\n  INS_ROL: 39,\r\n  INS_ROR: 40,\r\n  INS_RTI: 41,\r\n  INS_RTS: 42,\r\n\r\n  INS_SBC: 43,\r\n  INS_SEC: 44,\r\n  INS_SED: 45,\r\n  INS_SEI: 46,\r\n  INS_STA: 47,\r\n  INS_STX: 48,\r\n  INS_STY: 49,\r\n\r\n  INS_TAX: 50,\r\n  INS_TAY: 51,\r\n  INS_TSX: 52,\r\n  INS_TXA: 53,\r\n  INS_TXS: 54,\r\n  INS_TYA: 55,\r\n\r\n  INS_ALR: 56,\r\n  INS_ANC: 57,\r\n  INS_ARR: 58,\r\n  INS_AXS: 59,\r\n  INS_LAX: 60,\r\n  INS_SAX: 61,\r\n  INS_DCP: 62,\r\n  INS_ISC: 63,\r\n  INS_RLA: 64,\r\n  INS_RRA: 65,\r\n  INS_SLO: 66,\r\n  INS_SRE: 67,\r\n  INS_SKB: 68,\r\n  INS_IGN: 69,\r\n\r\n  INS_DUMMY: 70, // dummy instruction used for 'halting' the processor some cycles\r\n\r\n  // -------------------------------- //\r\n\r\n  // Addressing modes:\r\n  ADDR_ZP: 0,\r\n  ADDR_REL: 1,\r\n  ADDR_IMP: 2,\r\n  ADDR_ABS: 3,\r\n  ADDR_ACC: 4,\r\n  ADDR_IMM: 5,\r\n  ADDR_ZPX: 6,\r\n  ADDR_ZPY: 7,\r\n  ADDR_ABSX: 8,\r\n  ADDR_ABSY: 9,\r\n  ADDR_PREIDXIND: 10,\r\n  ADDR_POSTIDXIND: 11,\r\n  ADDR_INDABS: 12,\r\n\r\n  setOp: function (inst, op, addr, size, cycles) {\r\n    this.opdata[op] =\r\n      (inst & 0xff) |\r\n      ((addr & 0xff) << 8) |\r\n      ((size & 0xff) << 16) |\r\n      ((cycles & 0xff) << 24);\r\n  },\r\n};\r\n\r\nmodule.exports = CPU;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/cpu.js\n// module id = 5\n// module chunks = 0 1","var Tile = require(\"./tile\");\r\nvar utils = require(\"./utils\");\r\n\r\nvar PPU = function (nes) {\r\n  this.nes = nes;\r\n\r\n  // Keep Chrome happy\r\n  this.vramMem = null;\r\n  this.spriteMem = null;\r\n  this.vramAddress = null;\r\n  this.vramTmpAddress = null;\r\n  this.vramBufferedReadValue = null;\r\n  this.firstWrite = null;\r\n  this.sramAddress = null;\r\n  this.currentMirroring = null;\r\n  this.requestEndFrame = null;\r\n  this.nmiOk = null;\r\n  this.dummyCycleToggle = null;\r\n  this.validTileData = null;\r\n  this.nmiCounter = null;\r\n  this.scanlineAlreadyRendered = null;\r\n  this.f_nmiOnVblank = null;\r\n  this.f_spriteSize = null;\r\n  this.f_bgPatternTable = null;\r\n  this.f_spPatternTable = null;\r\n  this.f_addrInc = null;\r\n  this.f_nTblAddress = null;\r\n  this.f_color = null;\r\n  this.f_spVisibility = null;\r\n  this.f_bgVisibility = null;\r\n  this.f_spClipping = null;\r\n  this.f_bgClipping = null;\r\n  this.f_dispType = null;\r\n  this.cntFV = null;\r\n  this.cntV = null;\r\n  this.cntH = null;\r\n  this.cntVT = null;\r\n  this.cntHT = null;\r\n  this.regFV = null;\r\n  this.regV = null;\r\n  this.regH = null;\r\n  this.regVT = null;\r\n  this.regHT = null;\r\n  this.regFH = null;\r\n  this.regS = null;\r\n  this.curNt = null;\r\n  this.attrib = null;\r\n  this.buffer = null;\r\n  this.bgbuffer = null;\r\n  this.pixrendered = null;\r\n\r\n  this.validTileData = null;\r\n  this.scantile = null;\r\n  this.scanline = null;\r\n  this.lastRenderedScanline = null;\r\n  this.curX = null;\r\n  this.sprX = null;\r\n  this.sprY = null;\r\n  this.sprTile = null;\r\n  this.sprCol = null;\r\n  this.vertFlip = null;\r\n  this.horiFlip = null;\r\n  this.bgPriority = null;\r\n  this.spr0HitX = null;\r\n  this.spr0HitY = null;\r\n  this.hitSpr0 = null;\r\n  this.sprPalette = null;\r\n  this.imgPalette = null;\r\n  this.ptTile = null;\r\n  this.ntable1 = null;\r\n  this.currentMirroring = null;\r\n  this.nameTable = null;\r\n  this.vramMirrorTable = null;\r\n  this.palTable = null;\r\n\r\n  // Rendering Options:\r\n  this.showSpr0Hit = false;\r\n  this.clipToTvSize = true;\r\n\r\n  this.reset();\r\n};\r\n\r\nPPU.prototype = {\r\n  // Status flags:\r\n  STATUS_VRAMWRITE: 4,\r\n  STATUS_SLSPRITECOUNT: 5,\r\n  STATUS_SPRITE0HIT: 6,\r\n  STATUS_VBLANK: 7,\r\n\r\n  reset: function () {\r\n    var i;\r\n\r\n    // Memory\r\n    this.vramMem = new Array(0x8000);\r\n    this.spriteMem = new Array(0x100);\r\n    for (i = 0; i < this.vramMem.length; i++) {\r\n      this.vramMem[i] = 0;\r\n    }\r\n    for (i = 0; i < this.spriteMem.length; i++) {\r\n      this.spriteMem[i] = 0;\r\n    }\r\n\r\n    // VRAM I/O:\r\n    this.vramAddress = null;\r\n    this.vramTmpAddress = null;\r\n    this.vramBufferedReadValue = 0;\r\n    this.firstWrite = true; // VRAM/Scroll Hi/Lo latch\r\n\r\n    // SPR-RAM I/O:\r\n    this.sramAddress = 0; // 8-bit only.\r\n\r\n    this.currentMirroring = -1;\r\n    this.requestEndFrame = false;\r\n    this.nmiOk = false;\r\n    this.dummyCycleToggle = false;\r\n    this.validTileData = false;\r\n    this.nmiCounter = 0;\r\n    this.scanlineAlreadyRendered = null;\r\n\r\n    // Control Flags Register 1:\r\n    this.f_nmiOnVblank = 0; // NMI on VBlank. 0=disable, 1=enable\r\n    this.f_spriteSize = 0; // Sprite size. 0=8x8, 1=8x16\r\n    this.f_bgPatternTable = 0; // Background Pattern Table address. 0=0x0000,1=0x1000\r\n    this.f_spPatternTable = 0; // Sprite Pattern Table address. 0=0x0000,1=0x1000\r\n    this.f_addrInc = 0; // PPU Address Increment. 0=1,1=32\r\n    this.f_nTblAddress = 0; // Name Table Address. 0=0x2000,1=0x2400,2=0x2800,3=0x2C00\r\n\r\n    // Control Flags Register 2:\r\n    this.f_color = 0; // Background color. 0=black, 1=blue, 2=green, 4=red\r\n    this.f_spVisibility = 0; // Sprite visibility. 0=not displayed,1=displayed\r\n    this.f_bgVisibility = 0; // Background visibility. 0=Not Displayed,1=displayed\r\n    this.f_spClipping = 0; // Sprite clipping. 0=Sprites invisible in left 8-pixel column,1=No clipping\r\n    this.f_bgClipping = 0; // Background clipping. 0=BG invisible in left 8-pixel column, 1=No clipping\r\n    this.f_dispType = 0; // Display type. 0=color, 1=monochrome\r\n\r\n    // Counters:\r\n    this.cntFV = 0;\r\n    this.cntV = 0;\r\n    this.cntH = 0;\r\n    this.cntVT = 0;\r\n    this.cntHT = 0;\r\n\r\n    // Registers:\r\n    this.regFV = 0;\r\n    this.regV = 0;\r\n    this.regH = 0;\r\n    this.regVT = 0;\r\n    this.regHT = 0;\r\n    this.regFH = 0;\r\n    this.regS = 0;\r\n\r\n    // These are temporary variables used in rendering and sound procedures.\r\n    // Their states outside of those procedures can be ignored.\r\n    // TODO: the use of this is a bit weird, investigate\r\n    this.curNt = null;\r\n\r\n    // Variables used when rendering:\r\n    this.attrib = new Array(32);\r\n    this.buffer = new Array(256 * 240);\r\n    this.bgbuffer = new Array(256 * 240);\r\n    this.pixrendered = new Array(256 * 240);\r\n\r\n    this.validTileData = null;\r\n\r\n    this.scantile = new Array(32);\r\n\r\n    // Initialize misc vars:\r\n    this.scanline = 0;\r\n    this.lastRenderedScanline = -1;\r\n    this.curX = 0;\r\n\r\n    // Sprite data:\r\n    this.sprX = new Array(64); // X coordinate\r\n    this.sprY = new Array(64); // Y coordinate\r\n    this.sprTile = new Array(64); // Tile Index (into pattern table)\r\n    this.sprCol = new Array(64); // Upper two bits of color\r\n    this.vertFlip = new Array(64); // Vertical Flip\r\n    this.horiFlip = new Array(64); // Horizontal Flip\r\n    this.bgPriority = new Array(64); // Background priority\r\n    this.spr0HitX = 0; // Sprite #0 hit X coordinate\r\n    this.spr0HitY = 0; // Sprite #0 hit Y coordinate\r\n    this.hitSpr0 = false;\r\n\r\n    // Palette data:\r\n    this.sprPalette = new Array(16);\r\n    this.imgPalette = new Array(16);\r\n\r\n    // Create pattern table tile buffers:\r\n    this.ptTile = new Array(512);\r\n    for (i = 0; i < 512; i++) {\r\n      this.ptTile[i] = new Tile();\r\n    }\r\n\r\n    // Create nametable buffers:\r\n    // Name table data:\r\n    this.ntable1 = new Array(4);\r\n    this.currentMirroring = -1;\r\n    this.nameTable = new Array(4);\r\n    for (i = 0; i < 4; i++) {\r\n      this.nameTable[i] = new NameTable(32, 32, \"Nt\" + i);\r\n    }\r\n\r\n    // Initialize mirroring lookup table:\r\n    this.vramMirrorTable = new Array(0x8000);\r\n    for (i = 0; i < 0x8000; i++) {\r\n      this.vramMirrorTable[i] = i;\r\n    }\r\n\r\n    this.palTable = new PaletteTable();\r\n    this.palTable.loadNTSCPalette();\r\n    //this.palTable.loadDefaultPalette();\r\n\r\n    this.updateControlReg1(0);\r\n    this.updateControlReg2(0);\r\n  },\r\n\r\n  // Sets Nametable mirroring.\r\n  setMirroring: function (mirroring) {\r\n    if (mirroring === this.currentMirroring) {\r\n      return;\r\n    }\r\n\r\n    this.currentMirroring = mirroring;\r\n    this.triggerRendering();\r\n\r\n    // Remove mirroring:\r\n    if (this.vramMirrorTable === null) {\r\n      this.vramMirrorTable = new Array(0x8000);\r\n    }\r\n    for (var i = 0; i < 0x8000; i++) {\r\n      this.vramMirrorTable[i] = i;\r\n    }\r\n\r\n    // Palette mirroring:\r\n    this.defineMirrorRegion(0x3f20, 0x3f00, 0x20);\r\n    this.defineMirrorRegion(0x3f40, 0x3f00, 0x20);\r\n    this.defineMirrorRegion(0x3f80, 0x3f00, 0x20);\r\n    this.defineMirrorRegion(0x3fc0, 0x3f00, 0x20);\r\n\r\n    // Additional mirroring:\r\n    this.defineMirrorRegion(0x3000, 0x2000, 0xf00);\r\n    this.defineMirrorRegion(0x4000, 0x0000, 0x4000);\r\n\r\n    if (mirroring === this.nes.rom.HORIZONTAL_MIRRORING) {\r\n      // Horizontal mirroring.\r\n\r\n      this.ntable1[0] = 0;\r\n      this.ntable1[1] = 0;\r\n      this.ntable1[2] = 1;\r\n      this.ntable1[3] = 1;\r\n\r\n      this.defineMirrorRegion(0x2400, 0x2000, 0x400);\r\n      this.defineMirrorRegion(0x2c00, 0x2800, 0x400);\r\n    } else if (mirroring === this.nes.rom.VERTICAL_MIRRORING) {\r\n      // Vertical mirroring.\r\n\r\n      this.ntable1[0] = 0;\r\n      this.ntable1[1] = 1;\r\n      this.ntable1[2] = 0;\r\n      this.ntable1[3] = 1;\r\n\r\n      this.defineMirrorRegion(0x2800, 0x2000, 0x400);\r\n      this.defineMirrorRegion(0x2c00, 0x2400, 0x400);\r\n    } else if (mirroring === this.nes.rom.SINGLESCREEN_MIRRORING) {\r\n      // Single Screen mirroring\r\n\r\n      this.ntable1[0] = 0;\r\n      this.ntable1[1] = 0;\r\n      this.ntable1[2] = 0;\r\n      this.ntable1[3] = 0;\r\n\r\n      this.defineMirrorRegion(0x2400, 0x2000, 0x400);\r\n      this.defineMirrorRegion(0x2800, 0x2000, 0x400);\r\n      this.defineMirrorRegion(0x2c00, 0x2000, 0x400);\r\n    } else if (mirroring === this.nes.rom.SINGLESCREEN_MIRRORING2) {\r\n      this.ntable1[0] = 1;\r\n      this.ntable1[1] = 1;\r\n      this.ntable1[2] = 1;\r\n      this.ntable1[3] = 1;\r\n\r\n      this.defineMirrorRegion(0x2400, 0x2400, 0x400);\r\n      this.defineMirrorRegion(0x2800, 0x2400, 0x400);\r\n      this.defineMirrorRegion(0x2c00, 0x2400, 0x400);\r\n    } else {\r\n      // Assume Four-screen mirroring.\r\n\r\n      this.ntable1[0] = 0;\r\n      this.ntable1[1] = 1;\r\n      this.ntable1[2] = 2;\r\n      this.ntable1[3] = 3;\r\n    }\r\n  },\r\n\r\n  // Define a mirrored area in the address lookup table.\r\n  // Assumes the regions don't overlap.\r\n  // The 'to' region is the region that is physically in memory.\r\n  defineMirrorRegion: function (fromStart, toStart, size) {\r\n    for (var i = 0; i < size; i++) {\r\n      this.vramMirrorTable[fromStart + i] = toStart + i;\r\n    }\r\n  },\r\n\r\n  startVBlank: function () {\r\n    // Do NMI:\r\n    this.nes.cpu.requestIrq(this.nes.cpu.IRQ_NMI);\r\n\r\n    // Make sure everything is rendered:\r\n    if (this.lastRenderedScanline < 239) {\r\n      this.renderFramePartially(\r\n        this.lastRenderedScanline + 1,\r\n        240 - this.lastRenderedScanline\r\n      );\r\n    }\r\n\r\n    // End frame:\r\n    this.endFrame();\r\n\r\n    // Reset scanline counter:\r\n    this.lastRenderedScanline = -1;\r\n  },\r\n\r\n  endScanline: function () {\r\n    switch (this.scanline) {\r\n      case 19:\r\n        // Dummy scanline.\r\n        // May be variable length:\r\n        if (this.dummyCycleToggle) {\r\n          // Remove dead cycle at end of scanline,\r\n          // for next scanline:\r\n          this.curX = 1;\r\n          this.dummyCycleToggle = !this.dummyCycleToggle;\r\n        }\r\n        break;\r\n\r\n      case 20:\r\n        // Clear VBlank flag:\r\n        this.setStatusFlag(this.STATUS_VBLANK, false);\r\n\r\n        // Clear Sprite #0 hit flag:\r\n        this.setStatusFlag(this.STATUS_SPRITE0HIT, false);\r\n        this.hitSpr0 = false;\r\n        this.spr0HitX = -1;\r\n        this.spr0HitY = -1;\r\n\r\n        if (this.f_bgVisibility === 1 || this.f_spVisibility === 1) {\r\n          // Update counters:\r\n          this.cntFV = this.regFV;\r\n          this.cntV = this.regV;\r\n          this.cntH = this.regH;\r\n          this.cntVT = this.regVT;\r\n          this.cntHT = this.regHT;\r\n\r\n          if (this.f_bgVisibility === 1) {\r\n            // Render dummy scanline:\r\n            this.renderBgScanline(false, 0);\r\n          }\r\n        }\r\n\r\n        if (this.f_bgVisibility === 1 && this.f_spVisibility === 1) {\r\n          // Check sprite 0 hit for first scanline:\r\n          this.checkSprite0(0);\r\n        }\r\n\r\n        if (this.f_bgVisibility === 1 || this.f_spVisibility === 1) {\r\n          // Clock mapper IRQ Counter:\r\n          this.nes.mmap.clockIrqCounter();\r\n        }\r\n        break;\r\n\r\n      case 261:\r\n        // Dead scanline, no rendering.\r\n        // Set VINT:\r\n        this.setStatusFlag(this.STATUS_VBLANK, true);\r\n        this.requestEndFrame = true;\r\n        this.nmiCounter = 9;\r\n\r\n        // Wrap around:\r\n        this.scanline = -1; // will be incremented to 0\r\n\r\n        break;\r\n\r\n      default:\r\n        if (this.scanline >= 21 && this.scanline <= 260) {\r\n          // Render normally:\r\n          if (this.f_bgVisibility === 1) {\r\n            if (!this.scanlineAlreadyRendered) {\r\n              // update scroll:\r\n              this.cntHT = this.regHT;\r\n              this.cntH = this.regH;\r\n              this.renderBgScanline(true, this.scanline + 1 - 21);\r\n            }\r\n            this.scanlineAlreadyRendered = false;\r\n\r\n            // Check for sprite 0 (next scanline):\r\n            if (!this.hitSpr0 && this.f_spVisibility === 1) {\r\n              if (\r\n                this.sprX[0] >= -7 &&\r\n                this.sprX[0] < 256 &&\r\n                this.sprY[0] + 1 <= this.scanline - 20 &&\r\n                this.sprY[0] + 1 + (this.f_spriteSize === 0 ? 8 : 16) >=\r\n                  this.scanline - 20\r\n              ) {\r\n                if (this.checkSprite0(this.scanline - 20)) {\r\n                  this.hitSpr0 = true;\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          if (this.f_bgVisibility === 1 || this.f_spVisibility === 1) {\r\n            // Clock mapper IRQ Counter:\r\n            this.nes.mmap.clockIrqCounter();\r\n          }\r\n        }\r\n    }\r\n\r\n    this.scanline++;\r\n    this.regsToAddress();\r\n    this.cntsToAddress();\r\n  },\r\n\r\n  startFrame: function () {\r\n    // Set background color:\r\n    var bgColor = 0;\r\n\r\n    if (this.f_dispType === 0) {\r\n      // Color display.\r\n      // f_color determines color emphasis.\r\n      // Use first entry of image palette as BG color.\r\n      bgColor = this.imgPalette[0];\r\n    } else {\r\n      // Monochrome display.\r\n      // f_color determines the bg color.\r\n      switch (this.f_color) {\r\n        case 0:\r\n          // Black\r\n          bgColor = 0x00000;\r\n          break;\r\n        case 1:\r\n          // Green\r\n          bgColor = 0x00ff00;\r\n          break;\r\n        case 2:\r\n          // Blue\r\n          bgColor = 0xff0000;\r\n          break;\r\n        case 3:\r\n          // Invalid. Use black.\r\n          bgColor = 0x000000;\r\n          break;\r\n        case 4:\r\n          // Red\r\n          bgColor = 0x0000ff;\r\n          break;\r\n        default:\r\n          // Invalid. Use black.\r\n          bgColor = 0x0;\r\n      }\r\n    }\r\n\r\n    var buffer = this.buffer;\r\n    var i;\r\n    for (i = 0; i < 256 * 240; i++) {\r\n      buffer[i] = bgColor;\r\n    }\r\n    var pixrendered = this.pixrendered;\r\n    for (i = 0; i < pixrendered.length; i++) {\r\n      pixrendered[i] = 65;\r\n    }\r\n  },\r\n\r\n  endFrame: function () {\r\n    var i, x, y;\r\n    var buffer = this.buffer;\r\n\r\n    // Draw spr#0 hit coordinates:\r\n    if (this.showSpr0Hit) {\r\n      // Spr 0 position:\r\n      if (\r\n        this.sprX[0] >= 0 &&\r\n        this.sprX[0] < 256 &&\r\n        this.sprY[0] >= 0 &&\r\n        this.sprY[0] < 240\r\n      ) {\r\n        for (i = 0; i < 256; i++) {\r\n          buffer[(this.sprY[0] << 8) + i] = 0xff5555;\r\n        }\r\n        for (i = 0; i < 240; i++) {\r\n          buffer[(i << 8) + this.sprX[0]] = 0xff5555;\r\n        }\r\n      }\r\n      // Hit position:\r\n      if (\r\n        this.spr0HitX >= 0 &&\r\n        this.spr0HitX < 256 &&\r\n        this.spr0HitY >= 0 &&\r\n        this.spr0HitY < 240\r\n      ) {\r\n        for (i = 0; i < 256; i++) {\r\n          buffer[(this.spr0HitY << 8) + i] = 0x55ff55;\r\n        }\r\n        for (i = 0; i < 240; i++) {\r\n          buffer[(i << 8) + this.spr0HitX] = 0x55ff55;\r\n        }\r\n      }\r\n    }\r\n\r\n    // This is a bit lazy..\r\n    // if either the sprites or the background should be clipped,\r\n    // both are clipped after rendering is finished.\r\n    if (\r\n      this.clipToTvSize ||\r\n      this.f_bgClipping === 0 ||\r\n      this.f_spClipping === 0\r\n    ) {\r\n      // Clip left 8-pixels column:\r\n      for (y = 0; y < 240; y++) {\r\n        for (x = 0; x < 8; x++) {\r\n          buffer[(y << 8) + x] = 0;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.clipToTvSize) {\r\n      // Clip right 8-pixels column too:\r\n      for (y = 0; y < 240; y++) {\r\n        for (x = 0; x < 8; x++) {\r\n          buffer[(y << 8) + 255 - x] = 0;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Clip top and bottom 8 pixels:\r\n    if (this.clipToTvSize) {\r\n      for (y = 0; y < 8; y++) {\r\n        for (x = 0; x < 256; x++) {\r\n          buffer[(y << 8) + x] = 0;\r\n          buffer[((239 - y) << 8) + x] = 0;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.nes.ui.writeFrame(buffer);\r\n  },\r\n\r\n  updateControlReg1: function (value) {\r\n    this.triggerRendering();\r\n\r\n    this.f_nmiOnVblank = (value >> 7) & 1;\r\n    this.f_spriteSize = (value >> 5) & 1;\r\n    this.f_bgPatternTable = (value >> 4) & 1;\r\n    this.f_spPatternTable = (value >> 3) & 1;\r\n    this.f_addrInc = (value >> 2) & 1;\r\n    this.f_nTblAddress = value & 3;\r\n\r\n    this.regV = (value >> 1) & 1;\r\n    this.regH = value & 1;\r\n    this.regS = (value >> 4) & 1;\r\n  },\r\n\r\n  updateControlReg2: function (value) {\r\n    this.triggerRendering();\r\n\r\n    this.f_color = (value >> 5) & 7;\r\n    this.f_spVisibility = (value >> 4) & 1;\r\n    this.f_bgVisibility = (value >> 3) & 1;\r\n    this.f_spClipping = (value >> 2) & 1;\r\n    this.f_bgClipping = (value >> 1) & 1;\r\n    this.f_dispType = value & 1;\r\n\r\n    if (this.f_dispType === 0) {\r\n      this.palTable.setEmphasis(this.f_color);\r\n    }\r\n    this.updatePalettes();\r\n  },\r\n\r\n  setStatusFlag: function (flag, value) {\r\n    var n = 1 << flag;\r\n    this.nes.cpu.mem[0x2002] =\r\n      (this.nes.cpu.mem[0x2002] & (255 - n)) | (value ? n : 0);\r\n  },\r\n\r\n  // CPU Register $2002:\r\n  // Read the Status Register.\r\n  readStatusRegister: function () {\r\n    var tmp = this.nes.cpu.mem[0x2002];\r\n\r\n    // Reset scroll & VRAM Address toggle:\r\n    this.firstWrite = true;\r\n\r\n    // Clear VBlank flag:\r\n    this.setStatusFlag(this.STATUS_VBLANK, false);\r\n\r\n    // Fetch status data:\r\n    return tmp;\r\n  },\r\n\r\n  // CPU Register $2003:\r\n  // Write the SPR-RAM address that is used for sramWrite (Register 0x2004 in CPU memory map)\r\n  writeSRAMAddress: function (address) {\r\n    this.sramAddress = address;\r\n  },\r\n\r\n  // CPU Register $2004 (R):\r\n  // Read from SPR-RAM (Sprite RAM).\r\n  // The address should be set first.\r\n  sramLoad: function () {\r\n    /*short tmp = sprMem.load(sramAddress);\r\n        sramAddress++; // Increment address\r\n        sramAddress%=0x100;\r\n        return tmp;*/\r\n    return this.spriteMem[this.sramAddress];\r\n  },\r\n\r\n  // CPU Register $2004 (W):\r\n  // Write to SPR-RAM (Sprite RAM).\r\n  // The address should be set first.\r\n  sramWrite: function (value) {\r\n    this.spriteMem[this.sramAddress] = value;\r\n    this.spriteRamWriteUpdate(this.sramAddress, value);\r\n    this.sramAddress++; // Increment address\r\n    this.sramAddress %= 0x100;\r\n  },\r\n\r\n  // CPU Register $2005:\r\n  // Write to scroll registers.\r\n  // The first write is the vertical offset, the second is the\r\n  // horizontal offset:\r\n  scrollWrite: function (value) {\r\n    this.triggerRendering();\r\n\r\n    if (this.firstWrite) {\r\n      // First write, horizontal scroll:\r\n      this.regHT = (value >> 3) & 31;\r\n      this.regFH = value & 7;\r\n    } else {\r\n      // Second write, vertical scroll:\r\n      this.regFV = value & 7;\r\n      this.regVT = (value >> 3) & 31;\r\n    }\r\n    this.firstWrite = !this.firstWrite;\r\n  },\r\n\r\n  // CPU Register $2006:\r\n  // Sets the adress used when reading/writing from/to VRAM.\r\n  // The first write sets the high byte, the second the low byte.\r\n  writeVRAMAddress: function (address) {\r\n    if (this.firstWrite) {\r\n      this.regFV = (address >> 4) & 3;\r\n      this.regV = (address >> 3) & 1;\r\n      this.regH = (address >> 2) & 1;\r\n      this.regVT = (this.regVT & 7) | ((address & 3) << 3);\r\n    } else {\r\n      this.triggerRendering();\r\n\r\n      this.regVT = (this.regVT & 24) | ((address >> 5) & 7);\r\n      this.regHT = address & 31;\r\n\r\n      this.cntFV = this.regFV;\r\n      this.cntV = this.regV;\r\n      this.cntH = this.regH;\r\n      this.cntVT = this.regVT;\r\n      this.cntHT = this.regHT;\r\n\r\n      this.checkSprite0(this.scanline - 20);\r\n    }\r\n\r\n    this.firstWrite = !this.firstWrite;\r\n\r\n    // Invoke mapper latch:\r\n    this.cntsToAddress();\r\n    if (this.vramAddress < 0x2000) {\r\n      this.nes.mmap.latchAccess(this.vramAddress);\r\n    }\r\n  },\r\n\r\n  // CPU Register $2007(R):\r\n  // Read from PPU memory. The address should be set first.\r\n  vramLoad: function () {\r\n    var tmp;\r\n\r\n    this.cntsToAddress();\r\n    this.regsToAddress();\r\n\r\n    // If address is in range 0x0000-0x3EFF, return buffered values:\r\n    if (this.vramAddress <= 0x3eff) {\r\n      tmp = this.vramBufferedReadValue;\r\n\r\n      // Update buffered value:\r\n      if (this.vramAddress < 0x2000) {\r\n        this.vramBufferedReadValue = this.vramMem[this.vramAddress];\r\n      } else {\r\n        this.vramBufferedReadValue = this.mirroredLoad(this.vramAddress);\r\n      }\r\n\r\n      // Mapper latch access:\r\n      if (this.vramAddress < 0x2000) {\r\n        this.nes.mmap.latchAccess(this.vramAddress);\r\n      }\r\n\r\n      // Increment by either 1 or 32, depending on d2 of Control Register 1:\r\n      this.vramAddress += this.f_addrInc === 1 ? 32 : 1;\r\n\r\n      this.cntsFromAddress();\r\n      this.regsFromAddress();\r\n\r\n      return tmp; // Return the previous buffered value.\r\n    }\r\n\r\n    // No buffering in this mem range. Read normally.\r\n    tmp = this.mirroredLoad(this.vramAddress);\r\n\r\n    // Increment by either 1 or 32, depending on d2 of Control Register 1:\r\n    this.vramAddress += this.f_addrInc === 1 ? 32 : 1;\r\n\r\n    this.cntsFromAddress();\r\n    this.regsFromAddress();\r\n\r\n    return tmp;\r\n  },\r\n\r\n  // CPU Register $2007(W):\r\n  // Write to PPU memory. The address should be set first.\r\n  vramWrite: function (value) {\r\n    this.triggerRendering();\r\n    this.cntsToAddress();\r\n    this.regsToAddress();\r\n\r\n    if (this.vramAddress >= 0x2000) {\r\n      // Mirroring is used.\r\n      this.mirroredWrite(this.vramAddress, value);\r\n    } else {\r\n      // Write normally.\r\n      this.writeMem(this.vramAddress, value);\r\n\r\n      // Invoke mapper latch:\r\n      this.nes.mmap.latchAccess(this.vramAddress);\r\n    }\r\n\r\n    // Increment by either 1 or 32, depending on d2 of Control Register 1:\r\n    this.vramAddress += this.f_addrInc === 1 ? 32 : 1;\r\n    this.regsFromAddress();\r\n    this.cntsFromAddress();\r\n  },\r\n\r\n  // CPU Register $4014:\r\n  // Write 256 bytes of main memory\r\n  // into Sprite RAM.\r\n  sramDMA: function (value) {\r\n    var baseAddress = value * 0x100;\r\n    var data;\r\n    for (var i = this.sramAddress; i < 256; i++) {\r\n      data = this.nes.cpu.mem[baseAddress + i];\r\n      this.spriteMem[i] = data;\r\n      this.spriteRamWriteUpdate(i, data);\r\n    }\r\n\r\n    this.nes.cpu.haltCycles(513);\r\n  },\r\n\r\n  // Updates the scroll registers from a new VRAM address.\r\n  regsFromAddress: function () {\r\n    var address = (this.vramTmpAddress >> 8) & 0xff;\r\n    this.regFV = (address >> 4) & 7;\r\n    this.regV = (address >> 3) & 1;\r\n    this.regH = (address >> 2) & 1;\r\n    this.regVT = (this.regVT & 7) | ((address & 3) << 3);\r\n\r\n    address = this.vramTmpAddress & 0xff;\r\n    this.regVT = (this.regVT & 24) | ((address >> 5) & 7);\r\n    this.regHT = address & 31;\r\n  },\r\n\r\n  // Updates the scroll registers from a new VRAM address.\r\n  cntsFromAddress: function () {\r\n    var address = (this.vramAddress >> 8) & 0xff;\r\n    this.cntFV = (address >> 4) & 3;\r\n    this.cntV = (address >> 3) & 1;\r\n    this.cntH = (address >> 2) & 1;\r\n    this.cntVT = (this.cntVT & 7) | ((address & 3) << 3);\r\n\r\n    address = this.vramAddress & 0xff;\r\n    this.cntVT = (this.cntVT & 24) | ((address >> 5) & 7);\r\n    this.cntHT = address & 31;\r\n  },\r\n\r\n  regsToAddress: function () {\r\n    var b1 = (this.regFV & 7) << 4;\r\n    b1 |= (this.regV & 1) << 3;\r\n    b1 |= (this.regH & 1) << 2;\r\n    b1 |= (this.regVT >> 3) & 3;\r\n\r\n    var b2 = (this.regVT & 7) << 5;\r\n    b2 |= this.regHT & 31;\r\n\r\n    this.vramTmpAddress = ((b1 << 8) | b2) & 0x7fff;\r\n  },\r\n\r\n  cntsToAddress: function () {\r\n    var b1 = (this.cntFV & 7) << 4;\r\n    b1 |= (this.cntV & 1) << 3;\r\n    b1 |= (this.cntH & 1) << 2;\r\n    b1 |= (this.cntVT >> 3) & 3;\r\n\r\n    var b2 = (this.cntVT & 7) << 5;\r\n    b2 |= this.cntHT & 31;\r\n\r\n    this.vramAddress = ((b1 << 8) | b2) & 0x7fff;\r\n  },\r\n\r\n  incTileCounter: function (count) {\r\n    for (var i = count; i !== 0; i--) {\r\n      this.cntHT++;\r\n      if (this.cntHT === 32) {\r\n        this.cntHT = 0;\r\n        this.cntVT++;\r\n        if (this.cntVT >= 30) {\r\n          this.cntH++;\r\n          if (this.cntH === 2) {\r\n            this.cntH = 0;\r\n            this.cntV++;\r\n            if (this.cntV === 2) {\r\n              this.cntV = 0;\r\n              this.cntFV++;\r\n              this.cntFV &= 0x7;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  // Reads from memory, taking into account\r\n  // mirroring/mapping of address ranges.\r\n  mirroredLoad: function (address) {\r\n    return this.vramMem[this.vramMirrorTable[address]];\r\n  },\r\n\r\n  // Writes to memory, taking into account\r\n  // mirroring/mapping of address ranges.\r\n  mirroredWrite: function (address, value) {\r\n    if (address >= 0x3f00 && address < 0x3f20) {\r\n      // Palette write mirroring.\r\n      if (address === 0x3f00 || address === 0x3f10) {\r\n        this.writeMem(0x3f00, value);\r\n        this.writeMem(0x3f10, value);\r\n      } else if (address === 0x3f04 || address === 0x3f14) {\r\n        this.writeMem(0x3f04, value);\r\n        this.writeMem(0x3f14, value);\r\n      } else if (address === 0x3f08 || address === 0x3f18) {\r\n        this.writeMem(0x3f08, value);\r\n        this.writeMem(0x3f18, value);\r\n      } else if (address === 0x3f0c || address === 0x3f1c) {\r\n        this.writeMem(0x3f0c, value);\r\n        this.writeMem(0x3f1c, value);\r\n      } else {\r\n        this.writeMem(address, value);\r\n      }\r\n    } else {\r\n      // Use lookup table for mirrored address:\r\n      if (address < this.vramMirrorTable.length) {\r\n        this.writeMem(this.vramMirrorTable[address], value);\r\n      } else {\r\n        throw new Error(\"Invalid VRAM address: \" + address.toString(16));\r\n      }\r\n    }\r\n  },\r\n\r\n  triggerRendering: function () {\r\n    if (this.scanline >= 21 && this.scanline <= 260) {\r\n      // Render sprites, and combine:\r\n      this.renderFramePartially(\r\n        this.lastRenderedScanline + 1,\r\n        this.scanline - 21 - this.lastRenderedScanline\r\n      );\r\n\r\n      // Set last rendered scanline:\r\n      this.lastRenderedScanline = this.scanline - 21;\r\n    }\r\n  },\r\n\r\n  renderFramePartially: function (startScan, scanCount) {\r\n    if (this.f_spVisibility === 1) {\r\n      this.renderSpritesPartially(startScan, scanCount, true);\r\n    }\r\n\r\n    if (this.f_bgVisibility === 1) {\r\n      var si = startScan << 8;\r\n      var ei = (startScan + scanCount) << 8;\r\n      if (ei > 0xf000) {\r\n        ei = 0xf000;\r\n      }\r\n      var buffer = this.buffer;\r\n      var bgbuffer = this.bgbuffer;\r\n      var pixrendered = this.pixrendered;\r\n      for (var destIndex = si; destIndex < ei; destIndex++) {\r\n        if (pixrendered[destIndex] > 0xff) {\r\n          buffer[destIndex] = bgbuffer[destIndex];\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.f_spVisibility === 1) {\r\n      this.renderSpritesPartially(startScan, scanCount, false);\r\n    }\r\n\r\n    this.validTileData = false;\r\n  },\r\n\r\n  renderBgScanline: function (bgbuffer, scan) {\r\n    var baseTile = this.regS === 0 ? 0 : 256;\r\n    var destIndex = (scan << 8) - this.regFH;\r\n\r\n    this.curNt = this.ntable1[this.cntV + this.cntV + this.cntH];\r\n\r\n    this.cntHT = this.regHT;\r\n    this.cntH = this.regH;\r\n    this.curNt = this.ntable1[this.cntV + this.cntV + this.cntH];\r\n\r\n    if (scan < 240 && scan - this.cntFV >= 0) {\r\n      var tscanoffset = this.cntFV << 3;\r\n      var scantile = this.scantile;\r\n      var attrib = this.attrib;\r\n      var ptTile = this.ptTile;\r\n      var nameTable = this.nameTable;\r\n      var imgPalette = this.imgPalette;\r\n      var pixrendered = this.pixrendered;\r\n      var targetBuffer = bgbuffer ? this.bgbuffer : this.buffer;\r\n\r\n      var t, tpix, att, col;\r\n\r\n      for (var tile = 0; tile < 32; tile++) {\r\n        if (scan >= 0) {\r\n          // Fetch tile & attrib data:\r\n          if (this.validTileData) {\r\n            // Get data from array:\r\n            t = scantile[tile];\r\n            if (typeof t === \"undefined\") {\r\n              continue;\r\n            }\r\n            tpix = t.pix;\r\n            att = attrib[tile];\r\n          } else {\r\n            // Fetch data:\r\n            t =\r\n              ptTile[\r\n                baseTile +\r\n                  nameTable[this.curNt].getTileIndex(this.cntHT, this.cntVT)\r\n              ];\r\n            if (typeof t === \"undefined\") {\r\n              continue;\r\n            }\r\n            tpix = t.pix;\r\n            att = nameTable[this.curNt].getAttrib(this.cntHT, this.cntVT);\r\n            scantile[tile] = t;\r\n            attrib[tile] = att;\r\n          }\r\n\r\n          // Render tile scanline:\r\n          var sx = 0;\r\n          var x = (tile << 3) - this.regFH;\r\n\r\n          if (x > -8) {\r\n            if (x < 0) {\r\n              destIndex -= x;\r\n              sx = -x;\r\n            }\r\n            if (t.opaque[this.cntFV]) {\r\n              for (; sx < 8; sx++) {\r\n                targetBuffer[destIndex] =\r\n                  imgPalette[tpix[tscanoffset + sx] + att];\r\n                pixrendered[destIndex] |= 256;\r\n                destIndex++;\r\n              }\r\n            } else {\r\n              for (; sx < 8; sx++) {\r\n                col = tpix[tscanoffset + sx];\r\n                if (col !== 0) {\r\n                  targetBuffer[destIndex] = imgPalette[col + att];\r\n                  pixrendered[destIndex] |= 256;\r\n                }\r\n                destIndex++;\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        // Increase Horizontal Tile Counter:\r\n        if (++this.cntHT === 32) {\r\n          this.cntHT = 0;\r\n          this.cntH++;\r\n          this.cntH %= 2;\r\n          this.curNt = this.ntable1[(this.cntV << 1) + this.cntH];\r\n        }\r\n      }\r\n\r\n      // Tile data for one row should now have been fetched,\r\n      // so the data in the array is valid.\r\n      this.validTileData = true;\r\n    }\r\n\r\n    // update vertical scroll:\r\n    this.cntFV++;\r\n    if (this.cntFV === 8) {\r\n      this.cntFV = 0;\r\n      this.cntVT++;\r\n      if (this.cntVT === 30) {\r\n        this.cntVT = 0;\r\n        this.cntV++;\r\n        this.cntV %= 2;\r\n        this.curNt = this.ntable1[(this.cntV << 1) + this.cntH];\r\n      } else if (this.cntVT === 32) {\r\n        this.cntVT = 0;\r\n      }\r\n\r\n      // Invalidate fetched data:\r\n      this.validTileData = false;\r\n    }\r\n  },\r\n\r\n  renderSpritesPartially: function (startscan, scancount, bgPri) {\r\n    if (this.f_spVisibility === 1) {\r\n      for (var i = 0; i < 64; i++) {\r\n        if (\r\n          this.bgPriority[i] === bgPri &&\r\n          this.sprX[i] >= 0 &&\r\n          this.sprX[i] < 256 &&\r\n          this.sprY[i] + 8 >= startscan &&\r\n          this.sprY[i] < startscan + scancount\r\n        ) {\r\n          // Show sprite.\r\n          if (this.f_spriteSize === 0) {\r\n            // 8x8 sprites\r\n\r\n            this.srcy1 = 0;\r\n            this.srcy2 = 8;\r\n\r\n            if (this.sprY[i] < startscan) {\r\n              this.srcy1 = startscan - this.sprY[i] - 1;\r\n            }\r\n\r\n            if (this.sprY[i] + 8 > startscan + scancount) {\r\n              this.srcy2 = startscan + scancount - this.sprY[i] + 1;\r\n            }\r\n\r\n            if (this.f_spPatternTable === 0) {\r\n              this.ptTile[this.sprTile[i]].render(\r\n                this.buffer,\r\n                0,\r\n                this.srcy1,\r\n                8,\r\n                this.srcy2,\r\n                this.sprX[i],\r\n                this.sprY[i] + 1,\r\n                this.sprCol[i],\r\n                this.sprPalette,\r\n                this.horiFlip[i],\r\n                this.vertFlip[i],\r\n                i,\r\n                this.pixrendered\r\n              );\r\n            } else {\r\n              this.ptTile[this.sprTile[i] + 256].render(\r\n                this.buffer,\r\n                0,\r\n                this.srcy1,\r\n                8,\r\n                this.srcy2,\r\n                this.sprX[i],\r\n                this.sprY[i] + 1,\r\n                this.sprCol[i],\r\n                this.sprPalette,\r\n                this.horiFlip[i],\r\n                this.vertFlip[i],\r\n                i,\r\n                this.pixrendered\r\n              );\r\n            }\r\n          } else {\r\n            // 8x16 sprites\r\n            var top = this.sprTile[i];\r\n            if ((top & 1) !== 0) {\r\n              top = this.sprTile[i] - 1 + 256;\r\n            }\r\n\r\n            var srcy1 = 0;\r\n            var srcy2 = 8;\r\n\r\n            if (this.sprY[i] < startscan) {\r\n              srcy1 = startscan - this.sprY[i] - 1;\r\n            }\r\n\r\n            if (this.sprY[i] + 8 > startscan + scancount) {\r\n              srcy2 = startscan + scancount - this.sprY[i];\r\n            }\r\n\r\n            this.ptTile[top + (this.vertFlip[i] ? 1 : 0)].render(\r\n              this.buffer,\r\n              0,\r\n              srcy1,\r\n              8,\r\n              srcy2,\r\n              this.sprX[i],\r\n              this.sprY[i] + 1,\r\n              this.sprCol[i],\r\n              this.sprPalette,\r\n              this.horiFlip[i],\r\n              this.vertFlip[i],\r\n              i,\r\n              this.pixrendered\r\n            );\r\n\r\n            srcy1 = 0;\r\n            srcy2 = 8;\r\n\r\n            if (this.sprY[i] + 8 < startscan) {\r\n              srcy1 = startscan - (this.sprY[i] + 8 + 1);\r\n            }\r\n\r\n            if (this.sprY[i] + 16 > startscan + scancount) {\r\n              srcy2 = startscan + scancount - (this.sprY[i] + 8);\r\n            }\r\n\r\n            this.ptTile[top + (this.vertFlip[i] ? 0 : 1)].render(\r\n              this.buffer,\r\n              0,\r\n              srcy1,\r\n              8,\r\n              srcy2,\r\n              this.sprX[i],\r\n              this.sprY[i] + 1 + 8,\r\n              this.sprCol[i],\r\n              this.sprPalette,\r\n              this.horiFlip[i],\r\n              this.vertFlip[i],\r\n              i,\r\n              this.pixrendered\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  checkSprite0: function (scan) {\r\n    this.spr0HitX = -1;\r\n    this.spr0HitY = -1;\r\n\r\n    var toffset;\r\n    var tIndexAdd = this.f_spPatternTable === 0 ? 0 : 256;\r\n    var x, y, t, i;\r\n    var bufferIndex;\r\n\r\n    x = this.sprX[0];\r\n    y = this.sprY[0] + 1;\r\n\r\n    if (this.f_spriteSize === 0) {\r\n      // 8x8 sprites.\r\n\r\n      // Check range:\r\n      if (y <= scan && y + 8 > scan && x >= -7 && x < 256) {\r\n        // Sprite is in range.\r\n        // Draw scanline:\r\n        t = this.ptTile[this.sprTile[0] + tIndexAdd];\r\n\r\n        if (this.vertFlip[0]) {\r\n          toffset = 7 - (scan - y);\r\n        } else {\r\n          toffset = scan - y;\r\n        }\r\n        toffset *= 8;\r\n\r\n        bufferIndex = scan * 256 + x;\r\n        if (this.horiFlip[0]) {\r\n          for (i = 7; i >= 0; i--) {\r\n            if (x >= 0 && x < 256) {\r\n              if (\r\n                bufferIndex >= 0 &&\r\n                bufferIndex < 61440 &&\r\n                this.pixrendered[bufferIndex] !== 0\r\n              ) {\r\n                if (t.pix[toffset + i] !== 0) {\r\n                  this.spr0HitX = bufferIndex % 256;\r\n                  this.spr0HitY = scan;\r\n                  return true;\r\n                }\r\n              }\r\n            }\r\n            x++;\r\n            bufferIndex++;\r\n          }\r\n        } else {\r\n          for (i = 0; i < 8; i++) {\r\n            if (x >= 0 && x < 256) {\r\n              if (\r\n                bufferIndex >= 0 &&\r\n                bufferIndex < 61440 &&\r\n                this.pixrendered[bufferIndex] !== 0\r\n              ) {\r\n                if (t.pix[toffset + i] !== 0) {\r\n                  this.spr0HitX = bufferIndex % 256;\r\n                  this.spr0HitY = scan;\r\n                  return true;\r\n                }\r\n              }\r\n            }\r\n            x++;\r\n            bufferIndex++;\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      // 8x16 sprites:\r\n\r\n      // Check range:\r\n      if (y <= scan && y + 16 > scan && x >= -7 && x < 256) {\r\n        // Sprite is in range.\r\n        // Draw scanline:\r\n\r\n        if (this.vertFlip[0]) {\r\n          toffset = 15 - (scan - y);\r\n        } else {\r\n          toffset = scan - y;\r\n        }\r\n\r\n        if (toffset < 8) {\r\n          // first half of sprite.\r\n          t = this.ptTile[\r\n            this.sprTile[0] +\r\n              (this.vertFlip[0] ? 1 : 0) +\r\n              ((this.sprTile[0] & 1) !== 0 ? 255 : 0)\r\n          ];\r\n        } else {\r\n          // second half of sprite.\r\n          t = this.ptTile[\r\n            this.sprTile[0] +\r\n              (this.vertFlip[0] ? 0 : 1) +\r\n              ((this.sprTile[0] & 1) !== 0 ? 255 : 0)\r\n          ];\r\n          if (this.vertFlip[0]) {\r\n            toffset = 15 - toffset;\r\n          } else {\r\n            toffset -= 8;\r\n          }\r\n        }\r\n        toffset *= 8;\r\n\r\n        bufferIndex = scan * 256 + x;\r\n        if (this.horiFlip[0]) {\r\n          for (i = 7; i >= 0; i--) {\r\n            if (x >= 0 && x < 256) {\r\n              if (\r\n                bufferIndex >= 0 &&\r\n                bufferIndex < 61440 &&\r\n                this.pixrendered[bufferIndex] !== 0\r\n              ) {\r\n                if (t.pix[toffset + i] !== 0) {\r\n                  this.spr0HitX = bufferIndex % 256;\r\n                  this.spr0HitY = scan;\r\n                  return true;\r\n                }\r\n              }\r\n            }\r\n            x++;\r\n            bufferIndex++;\r\n          }\r\n        } else {\r\n          for (i = 0; i < 8; i++) {\r\n            if (x >= 0 && x < 256) {\r\n              if (\r\n                bufferIndex >= 0 &&\r\n                bufferIndex < 61440 &&\r\n                this.pixrendered[bufferIndex] !== 0\r\n              ) {\r\n                if (t.pix[toffset + i] !== 0) {\r\n                  this.spr0HitX = bufferIndex % 256;\r\n                  this.spr0HitY = scan;\r\n                  return true;\r\n                }\r\n              }\r\n            }\r\n            x++;\r\n            bufferIndex++;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  },\r\n\r\n  // This will write to PPU memory, and\r\n  // update internally buffered data\r\n  // appropriately.\r\n  writeMem: function (address, value) {\r\n    this.vramMem[address] = value;\r\n\r\n    // Update internally buffered data:\r\n    if (address < 0x2000) {\r\n      this.vramMem[address] = value;\r\n      this.patternWrite(address, value);\r\n    } else if (address >= 0x2000 && address < 0x23c0) {\r\n      this.nameTableWrite(this.ntable1[0], address - 0x2000, value);\r\n    } else if (address >= 0x23c0 && address < 0x2400) {\r\n      this.attribTableWrite(this.ntable1[0], address - 0x23c0, value);\r\n    } else if (address >= 0x2400 && address < 0x27c0) {\r\n      this.nameTableWrite(this.ntable1[1], address - 0x2400, value);\r\n    } else if (address >= 0x27c0 && address < 0x2800) {\r\n      this.attribTableWrite(this.ntable1[1], address - 0x27c0, value);\r\n    } else if (address >= 0x2800 && address < 0x2bc0) {\r\n      this.nameTableWrite(this.ntable1[2], address - 0x2800, value);\r\n    } else if (address >= 0x2bc0 && address < 0x2c00) {\r\n      this.attribTableWrite(this.ntable1[2], address - 0x2bc0, value);\r\n    } else if (address >= 0x2c00 && address < 0x2fc0) {\r\n      this.nameTableWrite(this.ntable1[3], address - 0x2c00, value);\r\n    } else if (address >= 0x2fc0 && address < 0x3000) {\r\n      this.attribTableWrite(this.ntable1[3], address - 0x2fc0, value);\r\n    } else if (address >= 0x3f00 && address < 0x3f20) {\r\n      this.updatePalettes();\r\n    }\r\n  },\r\n\r\n  // Reads data from $3f00 to $f20\r\n  // into the two buffered palettes.\r\n  updatePalettes: function () {\r\n    var i;\r\n\r\n    for (i = 0; i < 16; i++) {\r\n      if (this.f_dispType === 0) {\r\n        this.imgPalette[i] = this.palTable.getEntry(\r\n          this.vramMem[0x3f00 + i] & 63\r\n        );\r\n      } else {\r\n        this.imgPalette[i] = this.palTable.getEntry(\r\n          this.vramMem[0x3f00 + i] & 32\r\n        );\r\n      }\r\n    }\r\n    for (i = 0; i < 16; i++) {\r\n      if (this.f_dispType === 0) {\r\n        this.sprPalette[i] = this.palTable.getEntry(\r\n          this.vramMem[0x3f10 + i] & 63\r\n        );\r\n      } else {\r\n        this.sprPalette[i] = this.palTable.getEntry(\r\n          this.vramMem[0x3f10 + i] & 32\r\n        );\r\n      }\r\n    }\r\n  },\r\n\r\n  // Updates the internal pattern\r\n  // table buffers with this new byte.\r\n  // In vNES, there is a version of this with 4 arguments which isn't used.\r\n  patternWrite: function (address, value) {\r\n    var tileIndex = Math.floor(address / 16);\r\n    var leftOver = address % 16;\r\n    if (leftOver < 8) {\r\n      this.ptTile[tileIndex].setScanline(\r\n        leftOver,\r\n        value,\r\n        this.vramMem[address + 8]\r\n      );\r\n    } else {\r\n      this.ptTile[tileIndex].setScanline(\r\n        leftOver - 8,\r\n        this.vramMem[address - 8],\r\n        value\r\n      );\r\n    }\r\n  },\r\n\r\n  // Updates the internal name table buffers\r\n  // with this new byte.\r\n  nameTableWrite: function (index, address, value) {\r\n    this.nameTable[index].tile[address] = value;\r\n\r\n    // Update Sprite #0 hit:\r\n    //updateSpr0Hit();\r\n    this.checkSprite0(this.scanline - 20);\r\n  },\r\n\r\n  // Updates the internal pattern\r\n  // table buffers with this new attribute\r\n  // table byte.\r\n  attribTableWrite: function (index, address, value) {\r\n    this.nameTable[index].writeAttrib(address, value);\r\n  },\r\n\r\n  // Updates the internally buffered sprite\r\n  // data with this new byte of info.\r\n  spriteRamWriteUpdate: function (address, value) {\r\n    var tIndex = Math.floor(address / 4);\r\n\r\n    if (tIndex === 0) {\r\n      //updateSpr0Hit();\r\n      this.checkSprite0(this.scanline - 20);\r\n    }\r\n\r\n    if (address % 4 === 0) {\r\n      // Y coordinate\r\n      this.sprY[tIndex] = value;\r\n    } else if (address % 4 === 1) {\r\n      // Tile index\r\n      this.sprTile[tIndex] = value;\r\n    } else if (address % 4 === 2) {\r\n      // Attributes\r\n      this.vertFlip[tIndex] = (value & 0x80) !== 0;\r\n      this.horiFlip[tIndex] = (value & 0x40) !== 0;\r\n      this.bgPriority[tIndex] = (value & 0x20) !== 0;\r\n      this.sprCol[tIndex] = (value & 3) << 2;\r\n    } else if (address % 4 === 3) {\r\n      // X coordinate\r\n      this.sprX[tIndex] = value;\r\n    }\r\n  },\r\n\r\n  doNMI: function () {\r\n    // Set VBlank flag:\r\n    this.setStatusFlag(this.STATUS_VBLANK, true);\r\n    //nes.getCpu().doNonMaskableInterrupt();\r\n    this.nes.cpu.requestIrq(this.nes.cpu.IRQ_NMI);\r\n  },\r\n\r\n  isPixelWhite: function (x, y) {\r\n    this.triggerRendering();\r\n    return this.nes.ppu.buffer[(y << 8) + x] === 0xffffff;\r\n  },\r\n\r\n  JSON_PROPERTIES: [\r\n    // Memory\r\n    \"vramMem\",\r\n    \"spriteMem\",\r\n    // Counters\r\n    \"cntFV\",\r\n    \"cntV\",\r\n    \"cntH\",\r\n    \"cntVT\",\r\n    \"cntHT\",\r\n    // Registers\r\n    \"regFV\",\r\n    \"regV\",\r\n    \"regH\",\r\n    \"regVT\",\r\n    \"regHT\",\r\n    \"regFH\",\r\n    \"regS\",\r\n    // VRAM addr\r\n    \"vramAddress\",\r\n    \"vramTmpAddress\",\r\n    // Control/Status registers\r\n    \"f_nmiOnVblank\",\r\n    \"f_spriteSize\",\r\n    \"f_bgPatternTable\",\r\n    \"f_spPatternTable\",\r\n    \"f_addrInc\",\r\n    \"f_nTblAddress\",\r\n    \"f_color\",\r\n    \"f_spVisibility\",\r\n    \"f_bgVisibility\",\r\n    \"f_spClipping\",\r\n    \"f_bgClipping\",\r\n    \"f_dispType\",\r\n    // VRAM I/O\r\n    \"vramBufferedReadValue\",\r\n    \"firstWrite\",\r\n    // Mirroring\r\n    \"currentMirroring\",\r\n    \"vramMirrorTable\",\r\n    \"ntable1\",\r\n    // SPR-RAM I/O\r\n    \"sramAddress\",\r\n    // Sprites. Most sprite data is rebuilt from spriteMem\r\n    \"hitSpr0\",\r\n    // Palettes\r\n    \"sprPalette\",\r\n    \"imgPalette\",\r\n    // Rendering progression\r\n    \"curX\",\r\n    \"scanline\",\r\n    \"lastRenderedScanline\",\r\n    \"curNt\",\r\n    \"scantile\",\r\n    // Used during rendering\r\n    \"attrib\",\r\n    \"buffer\",\r\n    \"bgbuffer\",\r\n    \"pixrendered\",\r\n    // Misc\r\n    \"requestEndFrame\",\r\n    \"nmiOk\",\r\n    \"dummyCycleToggle\",\r\n    \"nmiCounter\",\r\n    \"validTileData\",\r\n    \"scanlineAlreadyRendered\",\r\n  ],\r\n\r\n  toJSON: function () {\r\n    var i;\r\n    var state = utils.toJSON(this);\r\n\r\n    state.nameTable = [];\r\n    for (i = 0; i < this.nameTable.length; i++) {\r\n      state.nameTable[i] = this.nameTable[i].toJSON();\r\n    }\r\n\r\n    state.ptTile = [];\r\n    for (i = 0; i < this.ptTile.length; i++) {\r\n      state.ptTile[i] = this.ptTile[i].toJSON();\r\n    }\r\n\r\n    return state;\r\n  },\r\n\r\n  fromJSON: function (state) {\r\n    var i;\r\n\r\n    utils.fromJSON(this, state);\r\n\r\n    for (i = 0; i < this.nameTable.length; i++) {\r\n      this.nameTable[i].fromJSON(state.nameTable[i]);\r\n    }\r\n\r\n    for (i = 0; i < this.ptTile.length; i++) {\r\n      this.ptTile[i].fromJSON(state.ptTile[i]);\r\n    }\r\n\r\n    // Sprite data:\r\n    for (i = 0; i < this.spriteMem.length; i++) {\r\n      this.spriteRamWriteUpdate(i, this.spriteMem[i]);\r\n    }\r\n  },\r\n};\r\n\r\nvar NameTable = function (width, height, name) {\r\n  this.width = width;\r\n  this.height = height;\r\n  this.name = name;\r\n\r\n  this.tile = new Array(width * height);\r\n  this.attrib = new Array(width * height);\r\n  for (var i = 0; i < width * height; i++) {\r\n    this.tile[i] = 0;\r\n    this.attrib[i] = 0;\r\n  }\r\n};\r\n\r\nNameTable.prototype = {\r\n  getTileIndex: function (x, y) {\r\n    return this.tile[y * this.width + x];\r\n  },\r\n\r\n  getAttrib: function (x, y) {\r\n    return this.attrib[y * this.width + x];\r\n  },\r\n\r\n  writeAttrib: function (index, value) {\r\n    var basex = (index % 8) * 4;\r\n    var basey = Math.floor(index / 8) * 4;\r\n    var add;\r\n    var tx, ty;\r\n    var attindex;\r\n\r\n    for (var sqy = 0; sqy < 2; sqy++) {\r\n      for (var sqx = 0; sqx < 2; sqx++) {\r\n        add = (value >> (2 * (sqy * 2 + sqx))) & 3;\r\n        for (var y = 0; y < 2; y++) {\r\n          for (var x = 0; x < 2; x++) {\r\n            tx = basex + sqx * 2 + x;\r\n            ty = basey + sqy * 2 + y;\r\n            attindex = ty * this.width + tx;\r\n            this.attrib[attindex] = (add << 2) & 12;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  toJSON: function () {\r\n    return {\r\n      tile: this.tile,\r\n      attrib: this.attrib,\r\n    };\r\n  },\r\n\r\n  fromJSON: function (s) {\r\n    this.tile = s.tile;\r\n    this.attrib = s.attrib;\r\n  },\r\n};\r\n\r\nvar PaletteTable = function () {\r\n  this.curTable = new Array(64);\r\n  this.emphTable = new Array(8);\r\n  this.currentEmph = -1;\r\n};\r\n\r\nPaletteTable.prototype = {\r\n  reset: function () {\r\n    this.setEmphasis(0);\r\n  },\r\n\r\n  loadNTSCPalette: function () {\r\n    // prettier-ignore\r\n    this.curTable = [0x525252, 0xB40000, 0xA00000, 0xB1003D, 0x740069, 0x00005B, 0x00005F, 0x001840, 0x002F10, 0x084A08, 0x006700, 0x124200, 0x6D2800, 0x000000, 0x000000, 0x000000, 0xC4D5E7, 0xFF4000, 0xDC0E22, 0xFF476B, 0xD7009F, 0x680AD7, 0x0019BC, 0x0054B1, 0x006A5B, 0x008C03, 0x00AB00, 0x2C8800, 0xA47200, 0x000000, 0x000000, 0x000000, 0xF8F8F8, 0xFFAB3C, 0xFF7981, 0xFF5BC5, 0xFF48F2, 0xDF49FF, 0x476DFF, 0x00B4F7, 0x00E0FF, 0x00E375, 0x03F42B, 0x78B82E, 0xE5E218, 0x787878, 0x000000, 0x000000, 0xFFFFFF, 0xFFF2BE, 0xF8B8B8, 0xF8B8D8, 0xFFB6FF, 0xFFC3FF, 0xC7D1FF, 0x9ADAFF, 0x88EDF8, 0x83FFDD, 0xB8F8B8, 0xF5F8AC, 0xFFFFB0, 0xF8D8F8, 0x000000, 0x000000];\r\n    this.makeTables();\r\n    this.setEmphasis(0);\r\n  },\r\n\r\n  loadPALPalette: function () {\r\n    // prettier-ignore\r\n    this.curTable = [0x525252, 0xB40000, 0xA00000, 0xB1003D, 0x740069, 0x00005B, 0x00005F, 0x001840, 0x002F10, 0x084A08, 0x006700, 0x124200, 0x6D2800, 0x000000, 0x000000, 0x000000, 0xC4D5E7, 0xFF4000, 0xDC0E22, 0xFF476B, 0xD7009F, 0x680AD7, 0x0019BC, 0x0054B1, 0x006A5B, 0x008C03, 0x00AB00, 0x2C8800, 0xA47200, 0x000000, 0x000000, 0x000000, 0xF8F8F8, 0xFFAB3C, 0xFF7981, 0xFF5BC5, 0xFF48F2, 0xDF49FF, 0x476DFF, 0x00B4F7, 0x00E0FF, 0x00E375, 0x03F42B, 0x78B82E, 0xE5E218, 0x787878, 0x000000, 0x000000, 0xFFFFFF, 0xFFF2BE, 0xF8B8B8, 0xF8B8D8, 0xFFB6FF, 0xFFC3FF, 0xC7D1FF, 0x9ADAFF, 0x88EDF8, 0x83FFDD, 0xB8F8B8, 0xF5F8AC, 0xFFFFB0, 0xF8D8F8, 0x000000, 0x000000];\r\n    this.makeTables();\r\n    this.setEmphasis(0);\r\n  },\r\n\r\n  makeTables: function () {\r\n    var r, g, b, col, i, rFactor, gFactor, bFactor;\r\n\r\n    // Calculate a table for each possible emphasis setting:\r\n    for (var emph = 0; emph < 8; emph++) {\r\n      // Determine color component factors:\r\n      rFactor = 1.0;\r\n      gFactor = 1.0;\r\n      bFactor = 1.0;\r\n\r\n      if ((emph & 1) !== 0) {\r\n        rFactor = 0.75;\r\n        bFactor = 0.75;\r\n      }\r\n      if ((emph & 2) !== 0) {\r\n        rFactor = 0.75;\r\n        gFactor = 0.75;\r\n      }\r\n      if ((emph & 4) !== 0) {\r\n        gFactor = 0.75;\r\n        bFactor = 0.75;\r\n      }\r\n\r\n      this.emphTable[emph] = new Array(64);\r\n\r\n      // Calculate table:\r\n      for (i = 0; i < 64; i++) {\r\n        col = this.curTable[i];\r\n        r = Math.floor(this.getRed(col) * rFactor);\r\n        g = Math.floor(this.getGreen(col) * gFactor);\r\n        b = Math.floor(this.getBlue(col) * bFactor);\r\n        this.emphTable[emph][i] = this.getRgb(r, g, b);\r\n      }\r\n    }\r\n  },\r\n\r\n  setEmphasis: function (emph) {\r\n    if (emph !== this.currentEmph) {\r\n      this.currentEmph = emph;\r\n      for (var i = 0; i < 64; i++) {\r\n        this.curTable[i] = this.emphTable[emph][i];\r\n      }\r\n    }\r\n  },\r\n\r\n  getEntry: function (yiq) {\r\n    return this.curTable[yiq];\r\n  },\r\n\r\n  getRed: function (rgb) {\r\n    return (rgb >> 16) & 0xff;\r\n  },\r\n\r\n  getGreen: function (rgb) {\r\n    return (rgb >> 8) & 0xff;\r\n  },\r\n\r\n  getBlue: function (rgb) {\r\n    return rgb & 0xff;\r\n  },\r\n\r\n  getRgb: function (r, g, b) {\r\n    return (r << 16) | (g << 8) | b;\r\n  },\r\n\r\n  loadDefaultPalette: function () {\r\n    this.curTable[0] = this.getRgb(117, 117, 117);\r\n    this.curTable[1] = this.getRgb(39, 27, 143);\r\n    this.curTable[2] = this.getRgb(0, 0, 171);\r\n    this.curTable[3] = this.getRgb(71, 0, 159);\r\n    this.curTable[4] = this.getRgb(143, 0, 119);\r\n    this.curTable[5] = this.getRgb(171, 0, 19);\r\n    this.curTable[6] = this.getRgb(167, 0, 0);\r\n    this.curTable[7] = this.getRgb(127, 11, 0);\r\n    this.curTable[8] = this.getRgb(67, 47, 0);\r\n    this.curTable[9] = this.getRgb(0, 71, 0);\r\n    this.curTable[10] = this.getRgb(0, 81, 0);\r\n    this.curTable[11] = this.getRgb(0, 63, 23);\r\n    this.curTable[12] = this.getRgb(27, 63, 95);\r\n    this.curTable[13] = this.getRgb(0, 0, 0);\r\n    this.curTable[14] = this.getRgb(0, 0, 0);\r\n    this.curTable[15] = this.getRgb(0, 0, 0);\r\n    this.curTable[16] = this.getRgb(188, 188, 188);\r\n    this.curTable[17] = this.getRgb(0, 115, 239);\r\n    this.curTable[18] = this.getRgb(35, 59, 239);\r\n    this.curTable[19] = this.getRgb(131, 0, 243);\r\n    this.curTable[20] = this.getRgb(191, 0, 191);\r\n    this.curTable[21] = this.getRgb(231, 0, 91);\r\n    this.curTable[22] = this.getRgb(219, 43, 0);\r\n    this.curTable[23] = this.getRgb(203, 79, 15);\r\n    this.curTable[24] = this.getRgb(139, 115, 0);\r\n    this.curTable[25] = this.getRgb(0, 151, 0);\r\n    this.curTable[26] = this.getRgb(0, 171, 0);\r\n    this.curTable[27] = this.getRgb(0, 147, 59);\r\n    this.curTable[28] = this.getRgb(0, 131, 139);\r\n    this.curTable[29] = this.getRgb(0, 0, 0);\r\n    this.curTable[30] = this.getRgb(0, 0, 0);\r\n    this.curTable[31] = this.getRgb(0, 0, 0);\r\n    this.curTable[32] = this.getRgb(255, 255, 255);\r\n    this.curTable[33] = this.getRgb(63, 191, 255);\r\n    this.curTable[34] = this.getRgb(95, 151, 255);\r\n    this.curTable[35] = this.getRgb(167, 139, 253);\r\n    this.curTable[36] = this.getRgb(247, 123, 255);\r\n    this.curTable[37] = this.getRgb(255, 119, 183);\r\n    this.curTable[38] = this.getRgb(255, 119, 99);\r\n    this.curTable[39] = this.getRgb(255, 155, 59);\r\n    this.curTable[40] = this.getRgb(243, 191, 63);\r\n    this.curTable[41] = this.getRgb(131, 211, 19);\r\n    this.curTable[42] = this.getRgb(79, 223, 75);\r\n    this.curTable[43] = this.getRgb(88, 248, 152);\r\n    this.curTable[44] = this.getRgb(0, 235, 219);\r\n    this.curTable[45] = this.getRgb(0, 0, 0);\r\n    this.curTable[46] = this.getRgb(0, 0, 0);\r\n    this.curTable[47] = this.getRgb(0, 0, 0);\r\n    this.curTable[48] = this.getRgb(255, 255, 255);\r\n    this.curTable[49] = this.getRgb(171, 231, 255);\r\n    this.curTable[50] = this.getRgb(199, 215, 255);\r\n    this.curTable[51] = this.getRgb(215, 203, 255);\r\n    this.curTable[52] = this.getRgb(255, 199, 255);\r\n    this.curTable[53] = this.getRgb(255, 199, 219);\r\n    this.curTable[54] = this.getRgb(255, 191, 179);\r\n    this.curTable[55] = this.getRgb(255, 219, 171);\r\n    this.curTable[56] = this.getRgb(255, 231, 163);\r\n    this.curTable[57] = this.getRgb(227, 255, 163);\r\n    this.curTable[58] = this.getRgb(171, 243, 191);\r\n    this.curTable[59] = this.getRgb(179, 255, 207);\r\n    this.curTable[60] = this.getRgb(159, 255, 243);\r\n    this.curTable[61] = this.getRgb(0, 0, 0);\r\n    this.curTable[62] = this.getRgb(0, 0, 0);\r\n    this.curTable[63] = this.getRgb(0, 0, 0);\r\n\r\n    this.makeTables();\r\n    this.setEmphasis(0);\r\n  },\r\n};\r\n\r\nmodule.exports = PPU;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/ppu.js\n// module id = 6\n// module chunks = 0 1","var CPU_FREQ_NTSC = 1789772.5; //1789772.72727272d;\r\n// var CPU_FREQ_PAL = 1773447.4;\r\n\r\nvar PAPU = function (nes) {\r\n  this.nes = nes;\r\n\r\n  this.square1 = new ChannelSquare(this, true);\r\n  this.square2 = new ChannelSquare(this, false);\r\n  this.triangle = new ChannelTriangle(this);\r\n  this.noise = new ChannelNoise(this);\r\n  this.dmc = new ChannelDM(this);\r\n\r\n  this.frameIrqCounter = null;\r\n  this.frameIrqCounterMax = 4;\r\n  this.initCounter = 2048;\r\n  this.channelEnableValue = null;\r\n\r\n  this.sampleRate = 44100;\r\n\r\n  this.lengthLookup = null;\r\n  this.dmcFreqLookup = null;\r\n  this.noiseWavelengthLookup = null;\r\n  this.square_table = null;\r\n  this.tnd_table = null;\r\n\r\n  this.frameIrqEnabled = false;\r\n  this.frameIrqActive = null;\r\n  this.frameClockNow = null;\r\n  this.startedPlaying = false;\r\n  this.recordOutput = false;\r\n  this.initingHardware = false;\r\n\r\n  this.masterFrameCounter = null;\r\n  this.derivedFrameCounter = null;\r\n  this.countSequence = null;\r\n  this.sampleTimer = null;\r\n  this.frameTime = null;\r\n  this.sampleTimerMax = null;\r\n  this.sampleCount = null;\r\n  this.triValue = 0;\r\n\r\n  this.smpSquare1 = null;\r\n  this.smpSquare2 = null;\r\n  this.smpTriangle = null;\r\n  this.smpDmc = null;\r\n  this.accCount = null;\r\n\r\n  // DC removal vars:\r\n  this.prevSampleL = 0;\r\n  this.prevSampleR = 0;\r\n  this.smpAccumL = 0;\r\n  this.smpAccumR = 0;\r\n\r\n  // DAC range:\r\n  this.dacRange = 0;\r\n  this.dcValue = 0;\r\n\r\n  // Master volume:\r\n  this.masterVolume = 256;\r\n\r\n  // Stereo positioning:\r\n  this.stereoPosLSquare1 = null;\r\n  this.stereoPosLSquare2 = null;\r\n  this.stereoPosLTriangle = null;\r\n  this.stereoPosLNoise = null;\r\n  this.stereoPosLDMC = null;\r\n  this.stereoPosRSquare1 = null;\r\n  this.stereoPosRSquare2 = null;\r\n  this.stereoPosRTriangle = null;\r\n  this.stereoPosRNoise = null;\r\n  this.stereoPosRDMC = null;\r\n\r\n  this.extraCycles = null;\r\n\r\n  this.maxSample = null;\r\n  this.minSample = null;\r\n\r\n  // Panning:\r\n  this.panning = [80, 170, 100, 150, 128];\r\n  this.setPanning(this.panning);\r\n\r\n  // Initialize lookup tables:\r\n  this.initLengthLookup();\r\n  this.initDmcFrequencyLookup();\r\n  this.initNoiseWavelengthLookup();\r\n  this.initDACtables();\r\n\r\n  // Init sound registers:\r\n  for (var i = 0; i < 0x14; i++) {\r\n    if (i === 0x10) {\r\n      this.writeReg(0x4010, 0x10);\r\n    } else {\r\n      this.writeReg(0x4000 + i, 0);\r\n    }\r\n  }\r\n\r\n  this.reset();\r\n};\r\n\r\nPAPU.prototype = {\r\n  reset: function () {\r\n    this.sampleRate = this.nes.opts.sampleRate;\r\n    this.sampleTimerMax = Math.floor(\r\n      (1024.0 * CPU_FREQ_NTSC * this.nes.opts.preferredFrameRate) /\r\n        (this.sampleRate * 60.0)\r\n    );\r\n\r\n    this.frameTime = Math.floor(\r\n      (14915.0 * this.nes.opts.preferredFrameRate) / 60.0\r\n    );\r\n\r\n    this.sampleTimer = 0;\r\n\r\n    this.updateChannelEnable(0);\r\n    this.masterFrameCounter = 0;\r\n    this.derivedFrameCounter = 0;\r\n    this.countSequence = 0;\r\n    this.sampleCount = 0;\r\n    this.initCounter = 2048;\r\n    this.frameIrqEnabled = false;\r\n    this.initingHardware = false;\r\n\r\n    this.resetCounter();\r\n\r\n    this.square1.reset();\r\n    this.square2.reset();\r\n    this.triangle.reset();\r\n    this.noise.reset();\r\n    this.dmc.reset();\r\n\r\n    this.accCount = 0;\r\n    this.smpSquare1 = 0;\r\n    this.smpSquare2 = 0;\r\n    this.smpTriangle = 0;\r\n    this.smpDmc = 0;\r\n\r\n    this.frameIrqEnabled = false;\r\n    this.frameIrqCounterMax = 4;\r\n\r\n    this.channelEnableValue = 0xff;\r\n    this.startedPlaying = false;\r\n    this.prevSampleL = 0;\r\n    this.prevSampleR = 0;\r\n    this.smpAccumL = 0;\r\n    this.smpAccumR = 0;\r\n\r\n    this.maxSample = -500000;\r\n    this.minSample = 500000;\r\n  },\r\n\r\n  // eslint-disable-next-line no-unused-vars\r\n  readReg: function (address) {\r\n    // Read 0x4015:\r\n    var tmp = 0;\r\n    tmp |= this.square1.getLengthStatus();\r\n    tmp |= this.square2.getLengthStatus() << 1;\r\n    tmp |= this.triangle.getLengthStatus() << 2;\r\n    tmp |= this.noise.getLengthStatus() << 3;\r\n    tmp |= this.dmc.getLengthStatus() << 4;\r\n    tmp |= (this.frameIrqActive && this.frameIrqEnabled ? 1 : 0) << 6;\r\n    tmp |= this.dmc.getIrqStatus() << 7;\r\n\r\n    this.frameIrqActive = false;\r\n    this.dmc.irqGenerated = false;\r\n\r\n    return tmp & 0xffff;\r\n  },\r\n\r\n  writeReg: function (address, value) {\r\n    if (address >= 0x4000 && address < 0x4004) {\r\n      // Square Wave 1 Control\r\n      this.square1.writeReg(address, value);\r\n      // console.log(\"Square Write\");\r\n    } else if (address >= 0x4004 && address < 0x4008) {\r\n      // Square 2 Control\r\n      this.square2.writeReg(address, value);\r\n    } else if (address >= 0x4008 && address < 0x400c) {\r\n      // Triangle Control\r\n      this.triangle.writeReg(address, value);\r\n    } else if (address >= 0x400c && address <= 0x400f) {\r\n      // Noise Control\r\n      this.noise.writeReg(address, value);\r\n    } else if (address === 0x4010) {\r\n      // DMC Play mode & DMA frequency\r\n      this.dmc.writeReg(address, value);\r\n    } else if (address === 0x4011) {\r\n      // DMC Delta Counter\r\n      this.dmc.writeReg(address, value);\r\n    } else if (address === 0x4012) {\r\n      // DMC Play code starting address\r\n      this.dmc.writeReg(address, value);\r\n    } else if (address === 0x4013) {\r\n      // DMC Play code length\r\n      this.dmc.writeReg(address, value);\r\n    } else if (address === 0x4015) {\r\n      // Channel enable\r\n      this.updateChannelEnable(value);\r\n\r\n      if (value !== 0 && this.initCounter > 0) {\r\n        // Start hardware initialization\r\n        this.initingHardware = true;\r\n      }\r\n\r\n      // DMC/IRQ Status\r\n      this.dmc.writeReg(address, value);\r\n    } else if (address === 0x4017) {\r\n      // Frame counter control\r\n      this.countSequence = (value >> 7) & 1;\r\n      this.masterFrameCounter = 0;\r\n      this.frameIrqActive = false;\r\n\r\n      if (((value >> 6) & 0x1) === 0) {\r\n        this.frameIrqEnabled = true;\r\n      } else {\r\n        this.frameIrqEnabled = false;\r\n      }\r\n\r\n      if (this.countSequence === 0) {\r\n        // NTSC:\r\n        this.frameIrqCounterMax = 4;\r\n        this.derivedFrameCounter = 4;\r\n      } else {\r\n        // PAL:\r\n        this.frameIrqCounterMax = 5;\r\n        this.derivedFrameCounter = 0;\r\n        this.frameCounterTick();\r\n      }\r\n    }\r\n  },\r\n\r\n  resetCounter: function () {\r\n    if (this.countSequence === 0) {\r\n      this.derivedFrameCounter = 4;\r\n    } else {\r\n      this.derivedFrameCounter = 0;\r\n    }\r\n  },\r\n\r\n  // Updates channel enable status.\r\n  // This is done on writes to the\r\n  // channel enable register (0x4015),\r\n  // and when the user enables/disables channels\r\n  // in the GUI.\r\n  updateChannelEnable: function (value) {\r\n    this.channelEnableValue = value & 0xffff;\r\n    this.square1.setEnabled((value & 1) !== 0);\r\n    this.square2.setEnabled((value & 2) !== 0);\r\n    this.triangle.setEnabled((value & 4) !== 0);\r\n    this.noise.setEnabled((value & 8) !== 0);\r\n    this.dmc.setEnabled((value & 16) !== 0);\r\n  },\r\n\r\n  // Clocks the frame counter. It should be clocked at\r\n  // twice the cpu speed, so the cycles will be\r\n  // divided by 2 for those counters that are\r\n  // clocked at cpu speed.\r\n  clockFrameCounter: function (nCycles) {\r\n    if (this.initCounter > 0) {\r\n      if (this.initingHardware) {\r\n        this.initCounter -= nCycles;\r\n        if (this.initCounter <= 0) {\r\n          this.initingHardware = false;\r\n        }\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Don't process ticks beyond next sampling:\r\n    nCycles += this.extraCycles;\r\n    var maxCycles = this.sampleTimerMax - this.sampleTimer;\r\n    if (nCycles << 10 > maxCycles) {\r\n      this.extraCycles = ((nCycles << 10) - maxCycles) >> 10;\r\n      nCycles -= this.extraCycles;\r\n    } else {\r\n      this.extraCycles = 0;\r\n    }\r\n\r\n    var dmc = this.dmc;\r\n    var triangle = this.triangle;\r\n    var square1 = this.square1;\r\n    var square2 = this.square2;\r\n    var noise = this.noise;\r\n\r\n    // Clock DMC:\r\n    if (dmc.isEnabled) {\r\n      dmc.shiftCounter -= nCycles << 3;\r\n      while (dmc.shiftCounter <= 0 && dmc.dmaFrequency > 0) {\r\n        dmc.shiftCounter += dmc.dmaFrequency;\r\n        dmc.clockDmc();\r\n      }\r\n    }\r\n\r\n    // Clock Triangle channel Prog timer:\r\n    if (triangle.progTimerMax > 0) {\r\n      triangle.progTimerCount -= nCycles;\r\n      while (triangle.progTimerCount <= 0) {\r\n        triangle.progTimerCount += triangle.progTimerMax + 1;\r\n        if (triangle.linearCounter > 0 && triangle.lengthCounter > 0) {\r\n          triangle.triangleCounter++;\r\n          triangle.triangleCounter &= 0x1f;\r\n\r\n          if (triangle.isEnabled) {\r\n            if (triangle.triangleCounter >= 0x10) {\r\n              // Normal value.\r\n              triangle.sampleValue = triangle.triangleCounter & 0xf;\r\n            } else {\r\n              // Inverted value.\r\n              triangle.sampleValue = 0xf - (triangle.triangleCounter & 0xf);\r\n            }\r\n            triangle.sampleValue <<= 4;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Clock Square channel 1 Prog timer:\r\n    square1.progTimerCount -= nCycles;\r\n    if (square1.progTimerCount <= 0) {\r\n      square1.progTimerCount += (square1.progTimerMax + 1) << 1;\r\n\r\n      square1.squareCounter++;\r\n      square1.squareCounter &= 0x7;\r\n      square1.updateSampleValue();\r\n    }\r\n\r\n    // Clock Square channel 2 Prog timer:\r\n    square2.progTimerCount -= nCycles;\r\n    if (square2.progTimerCount <= 0) {\r\n      square2.progTimerCount += (square2.progTimerMax + 1) << 1;\r\n\r\n      square2.squareCounter++;\r\n      square2.squareCounter &= 0x7;\r\n      square2.updateSampleValue();\r\n    }\r\n\r\n    // Clock noise channel Prog timer:\r\n    var acc_c = nCycles;\r\n    if (noise.progTimerCount - acc_c > 0) {\r\n      // Do all cycles at once:\r\n      noise.progTimerCount -= acc_c;\r\n      noise.accCount += acc_c;\r\n      noise.accValue += acc_c * noise.sampleValue;\r\n    } else {\r\n      // Slow-step:\r\n      while (acc_c-- > 0) {\r\n        if (--noise.progTimerCount <= 0 && noise.progTimerMax > 0) {\r\n          // Update noise shift register:\r\n          noise.shiftReg <<= 1;\r\n          noise.tmp =\r\n            ((noise.shiftReg << (noise.randomMode === 0 ? 1 : 6)) ^\r\n              noise.shiftReg) &\r\n            0x8000;\r\n          if (noise.tmp !== 0) {\r\n            // Sample value must be 0.\r\n            noise.shiftReg |= 0x01;\r\n            noise.randomBit = 0;\r\n            noise.sampleValue = 0;\r\n          } else {\r\n            // Find sample value:\r\n            noise.randomBit = 1;\r\n            if (noise.isEnabled && noise.lengthCounter > 0) {\r\n              noise.sampleValue = noise.masterVolume;\r\n            } else {\r\n              noise.sampleValue = 0;\r\n            }\r\n          }\r\n\r\n          noise.progTimerCount += noise.progTimerMax;\r\n        }\r\n\r\n        noise.accValue += noise.sampleValue;\r\n        noise.accCount++;\r\n      }\r\n    }\r\n\r\n    // Frame IRQ handling:\r\n    if (this.frameIrqEnabled && this.frameIrqActive) {\r\n      this.nes.cpu.requestIrq(this.nes.cpu.IRQ_NORMAL);\r\n    }\r\n\r\n    // Clock frame counter at double CPU speed:\r\n    this.masterFrameCounter += nCycles << 1;\r\n    if (this.masterFrameCounter >= this.frameTime) {\r\n      // 240Hz tick:\r\n      this.masterFrameCounter -= this.frameTime;\r\n      this.frameCounterTick();\r\n    }\r\n\r\n    // Accumulate sample value:\r\n    this.accSample(nCycles);\r\n\r\n    // Clock sample timer:\r\n    this.sampleTimer += nCycles << 10;\r\n    if (this.sampleTimer >= this.sampleTimerMax) {\r\n      // Sample channels:\r\n      this.sample();\r\n      this.sampleTimer -= this.sampleTimerMax;\r\n    }\r\n  },\r\n\r\n  accSample: function (cycles) {\r\n    // Special treatment for triangle channel - need to interpolate.\r\n    if (this.triangle.sampleCondition) {\r\n      this.triValue = Math.floor(\r\n        (this.triangle.progTimerCount << 4) / (this.triangle.progTimerMax + 1)\r\n      );\r\n      if (this.triValue > 16) {\r\n        this.triValue = 16;\r\n      }\r\n      if (this.triangle.triangleCounter >= 16) {\r\n        this.triValue = 16 - this.triValue;\r\n      }\r\n\r\n      // Add non-interpolated sample value:\r\n      this.triValue += this.triangle.sampleValue;\r\n    }\r\n\r\n    // Now sample normally:\r\n    if (cycles === 2) {\r\n      this.smpTriangle += this.triValue << 1;\r\n      this.smpDmc += this.dmc.sample << 1;\r\n      this.smpSquare1 += this.square1.sampleValue << 1;\r\n      this.smpSquare2 += this.square2.sampleValue << 1;\r\n      this.accCount += 2;\r\n    } else if (cycles === 4) {\r\n      this.smpTriangle += this.triValue << 2;\r\n      this.smpDmc += this.dmc.sample << 2;\r\n      this.smpSquare1 += this.square1.sampleValue << 2;\r\n      this.smpSquare2 += this.square2.sampleValue << 2;\r\n      this.accCount += 4;\r\n    } else {\r\n      this.smpTriangle += cycles * this.triValue;\r\n      this.smpDmc += cycles * this.dmc.sample;\r\n      this.smpSquare1 += cycles * this.square1.sampleValue;\r\n      this.smpSquare2 += cycles * this.square2.sampleValue;\r\n      this.accCount += cycles;\r\n    }\r\n  },\r\n\r\n  frameCounterTick: function () {\r\n    this.derivedFrameCounter++;\r\n    if (this.derivedFrameCounter >= this.frameIrqCounterMax) {\r\n      this.derivedFrameCounter = 0;\r\n    }\r\n\r\n    if (this.derivedFrameCounter === 1 || this.derivedFrameCounter === 3) {\r\n      // Clock length & sweep:\r\n      this.triangle.clockLengthCounter();\r\n      this.square1.clockLengthCounter();\r\n      this.square2.clockLengthCounter();\r\n      this.noise.clockLengthCounter();\r\n      this.square1.clockSweep();\r\n      this.square2.clockSweep();\r\n    }\r\n\r\n    if (this.derivedFrameCounter >= 0 && this.derivedFrameCounter < 4) {\r\n      // Clock linear & decay:\r\n      this.square1.clockEnvDecay();\r\n      this.square2.clockEnvDecay();\r\n      this.noise.clockEnvDecay();\r\n      this.triangle.clockLinearCounter();\r\n    }\r\n\r\n    if (this.derivedFrameCounter === 3 && this.countSequence === 0) {\r\n      // Enable IRQ:\r\n      this.frameIrqActive = true;\r\n    }\r\n\r\n    // End of 240Hz tick\r\n  },\r\n\r\n  // Samples the channels, mixes the output together, then writes to buffer.\r\n  sample: function () {\r\n    var sq_index, tnd_index;\r\n\r\n    if (this.accCount > 0) {\r\n      this.smpSquare1 <<= 4;\r\n      this.smpSquare1 = Math.floor(this.smpSquare1 / this.accCount);\r\n\r\n      this.smpSquare2 <<= 4;\r\n      this.smpSquare2 = Math.floor(this.smpSquare2 / this.accCount);\r\n\r\n      this.smpTriangle = Math.floor(this.smpTriangle / this.accCount);\r\n\r\n      this.smpDmc <<= 4;\r\n      this.smpDmc = Math.floor(this.smpDmc / this.accCount);\r\n\r\n      this.accCount = 0;\r\n    } else {\r\n      this.smpSquare1 = this.square1.sampleValue << 4;\r\n      this.smpSquare2 = this.square2.sampleValue << 4;\r\n      this.smpTriangle = this.triangle.sampleValue;\r\n      this.smpDmc = this.dmc.sample << 4;\r\n    }\r\n\r\n    var smpNoise = Math.floor((this.noise.accValue << 4) / this.noise.accCount);\r\n    this.noise.accValue = smpNoise >> 4;\r\n    this.noise.accCount = 1;\r\n\r\n    // Stereo sound.\r\n\r\n    // Left channel:\r\n    sq_index =\r\n      (this.smpSquare1 * this.stereoPosLSquare1 +\r\n        this.smpSquare2 * this.stereoPosLSquare2) >>\r\n      8;\r\n    tnd_index =\r\n      (3 * this.smpTriangle * this.stereoPosLTriangle +\r\n        (smpNoise << 1) * this.stereoPosLNoise +\r\n        this.smpDmc * this.stereoPosLDMC) >>\r\n      8;\r\n    if (sq_index >= this.square_table.length) {\r\n      sq_index = this.square_table.length - 1;\r\n    }\r\n    if (tnd_index >= this.tnd_table.length) {\r\n      tnd_index = this.tnd_table.length - 1;\r\n    }\r\n    var sampleValueL =\r\n      this.square_table[sq_index] + this.tnd_table[tnd_index] - this.dcValue;\r\n\r\n    // Right channel:\r\n    sq_index =\r\n      (this.smpSquare1 * this.stereoPosRSquare1 +\r\n        this.smpSquare2 * this.stereoPosRSquare2) >>\r\n      8;\r\n    tnd_index =\r\n      (3 * this.smpTriangle * this.stereoPosRTriangle +\r\n        (smpNoise << 1) * this.stereoPosRNoise +\r\n        this.smpDmc * this.stereoPosRDMC) >>\r\n      8;\r\n    if (sq_index >= this.square_table.length) {\r\n      sq_index = this.square_table.length - 1;\r\n    }\r\n    if (tnd_index >= this.tnd_table.length) {\r\n      tnd_index = this.tnd_table.length - 1;\r\n    }\r\n    var sampleValueR =\r\n      this.square_table[sq_index] + this.tnd_table[tnd_index] - this.dcValue;\r\n\r\n    // Remove DC from left channel:\r\n    var smpDiffL = sampleValueL - this.prevSampleL;\r\n    this.prevSampleL += smpDiffL;\r\n    this.smpAccumL += smpDiffL - (this.smpAccumL >> 10);\r\n    sampleValueL = this.smpAccumL;\r\n\r\n    // Remove DC from right channel:\r\n    var smpDiffR = sampleValueR - this.prevSampleR;\r\n    this.prevSampleR += smpDiffR;\r\n    this.smpAccumR += smpDiffR - (this.smpAccumR >> 10);\r\n    sampleValueR = this.smpAccumR;\r\n\r\n    // Write:\r\n    if (sampleValueL > this.maxSample) {\r\n      this.maxSample = sampleValueL;\r\n    }\r\n    if (sampleValueL < this.minSample) {\r\n      this.minSample = sampleValueL;\r\n    }\r\n\r\n    if (this.nes.opts.onAudioSample) {\r\n      this.nes.opts.onAudioSample(sampleValueL / 32768, sampleValueR / 32768);\r\n    }\r\n\r\n    // Reset sampled values:\r\n    this.smpSquare1 = 0;\r\n    this.smpSquare2 = 0;\r\n    this.smpTriangle = 0;\r\n    this.smpDmc = 0;\r\n  },\r\n\r\n  getLengthMax: function (value) {\r\n    return this.lengthLookup[value >> 3];\r\n  },\r\n\r\n  getDmcFrequency: function (value) {\r\n    if (value >= 0 && value < 0x10) {\r\n      return this.dmcFreqLookup[value];\r\n    }\r\n    return 0;\r\n  },\r\n\r\n  getNoiseWaveLength: function (value) {\r\n    if (value >= 0 && value < 0x10) {\r\n      return this.noiseWavelengthLookup[value];\r\n    }\r\n    return 0;\r\n  },\r\n\r\n  setPanning: function (pos) {\r\n    for (var i = 0; i < 5; i++) {\r\n      this.panning[i] = pos[i];\r\n    }\r\n    this.updateStereoPos();\r\n  },\r\n\r\n  setMasterVolume: function (value) {\r\n    if (value < 0) {\r\n      value = 0;\r\n    }\r\n    if (value > 256) {\r\n      value = 256;\r\n    }\r\n    this.masterVolume = value;\r\n    this.updateStereoPos();\r\n  },\r\n\r\n  updateStereoPos: function () {\r\n    this.stereoPosLSquare1 = (this.panning[0] * this.masterVolume) >> 8;\r\n    this.stereoPosLSquare2 = (this.panning[1] * this.masterVolume) >> 8;\r\n    this.stereoPosLTriangle = (this.panning[2] * this.masterVolume) >> 8;\r\n    this.stereoPosLNoise = (this.panning[3] * this.masterVolume) >> 8;\r\n    this.stereoPosLDMC = (this.panning[4] * this.masterVolume) >> 8;\r\n\r\n    this.stereoPosRSquare1 = this.masterVolume - this.stereoPosLSquare1;\r\n    this.stereoPosRSquare2 = this.masterVolume - this.stereoPosLSquare2;\r\n    this.stereoPosRTriangle = this.masterVolume - this.stereoPosLTriangle;\r\n    this.stereoPosRNoise = this.masterVolume - this.stereoPosLNoise;\r\n    this.stereoPosRDMC = this.masterVolume - this.stereoPosLDMC;\r\n  },\r\n\r\n  initLengthLookup: function () {\r\n    // prettier-ignore\r\n    this.lengthLookup = [\r\n            0x0A, 0xFE,\r\n            0x14, 0x02,\r\n            0x28, 0x04,\r\n            0x50, 0x06,\r\n            0xA0, 0x08,\r\n            0x3C, 0x0A,\r\n            0x0E, 0x0C,\r\n            0x1A, 0x0E,\r\n            0x0C, 0x10,\r\n            0x18, 0x12,\r\n            0x30, 0x14,\r\n            0x60, 0x16,\r\n            0xC0, 0x18,\r\n            0x48, 0x1A,\r\n            0x10, 0x1C,\r\n            0x20, 0x1E\r\n        ];\r\n  },\r\n\r\n  initDmcFrequencyLookup: function () {\r\n    this.dmcFreqLookup = new Array(16);\r\n\r\n    this.dmcFreqLookup[0x0] = 0xd60;\r\n    this.dmcFreqLookup[0x1] = 0xbe0;\r\n    this.dmcFreqLookup[0x2] = 0xaa0;\r\n    this.dmcFreqLookup[0x3] = 0xa00;\r\n    this.dmcFreqLookup[0x4] = 0x8f0;\r\n    this.dmcFreqLookup[0x5] = 0x7f0;\r\n    this.dmcFreqLookup[0x6] = 0x710;\r\n    this.dmcFreqLookup[0x7] = 0x6b0;\r\n    this.dmcFreqLookup[0x8] = 0x5f0;\r\n    this.dmcFreqLookup[0x9] = 0x500;\r\n    this.dmcFreqLookup[0xa] = 0x470;\r\n    this.dmcFreqLookup[0xb] = 0x400;\r\n    this.dmcFreqLookup[0xc] = 0x350;\r\n    this.dmcFreqLookup[0xd] = 0x2a0;\r\n    this.dmcFreqLookup[0xe] = 0x240;\r\n    this.dmcFreqLookup[0xf] = 0x1b0;\r\n    //for(int i=0;i<16;i++)dmcFreqLookup[i]/=8;\r\n  },\r\n\r\n  initNoiseWavelengthLookup: function () {\r\n    this.noiseWavelengthLookup = new Array(16);\r\n\r\n    this.noiseWavelengthLookup[0x0] = 0x004;\r\n    this.noiseWavelengthLookup[0x1] = 0x008;\r\n    this.noiseWavelengthLookup[0x2] = 0x010;\r\n    this.noiseWavelengthLookup[0x3] = 0x020;\r\n    this.noiseWavelengthLookup[0x4] = 0x040;\r\n    this.noiseWavelengthLookup[0x5] = 0x060;\r\n    this.noiseWavelengthLookup[0x6] = 0x080;\r\n    this.noiseWavelengthLookup[0x7] = 0x0a0;\r\n    this.noiseWavelengthLookup[0x8] = 0x0ca;\r\n    this.noiseWavelengthLookup[0x9] = 0x0fe;\r\n    this.noiseWavelengthLookup[0xa] = 0x17c;\r\n    this.noiseWavelengthLookup[0xb] = 0x1fc;\r\n    this.noiseWavelengthLookup[0xc] = 0x2fa;\r\n    this.noiseWavelengthLookup[0xd] = 0x3f8;\r\n    this.noiseWavelengthLookup[0xe] = 0x7f2;\r\n    this.noiseWavelengthLookup[0xf] = 0xfe4;\r\n  },\r\n\r\n  initDACtables: function () {\r\n    var value, ival, i;\r\n    var max_sqr = 0;\r\n    var max_tnd = 0;\r\n\r\n    this.square_table = new Array(32 * 16);\r\n    this.tnd_table = new Array(204 * 16);\r\n\r\n    for (i = 0; i < 32 * 16; i++) {\r\n      value = 95.52 / (8128.0 / (i / 16.0) + 100.0);\r\n      value *= 0.98411;\r\n      value *= 50000.0;\r\n      ival = Math.floor(value);\r\n\r\n      this.square_table[i] = ival;\r\n      if (ival > max_sqr) {\r\n        max_sqr = ival;\r\n      }\r\n    }\r\n\r\n    for (i = 0; i < 204 * 16; i++) {\r\n      value = 163.67 / (24329.0 / (i / 16.0) + 100.0);\r\n      value *= 0.98411;\r\n      value *= 50000.0;\r\n      ival = Math.floor(value);\r\n\r\n      this.tnd_table[i] = ival;\r\n      if (ival > max_tnd) {\r\n        max_tnd = ival;\r\n      }\r\n    }\r\n\r\n    this.dacRange = max_sqr + max_tnd;\r\n    this.dcValue = this.dacRange / 2;\r\n  },\r\n};\r\n\r\nvar ChannelDM = function (papu) {\r\n  this.papu = papu;\r\n\r\n  this.MODE_NORMAL = 0;\r\n  this.MODE_LOOP = 1;\r\n  this.MODE_IRQ = 2;\r\n\r\n  this.isEnabled = null;\r\n  this.hasSample = null;\r\n  this.irqGenerated = false;\r\n\r\n  this.playMode = null;\r\n  this.dmaFrequency = null;\r\n  this.dmaCounter = null;\r\n  this.deltaCounter = null;\r\n  this.playStartAddress = null;\r\n  this.playAddress = null;\r\n  this.playLength = null;\r\n  this.playLengthCounter = null;\r\n  this.shiftCounter = null;\r\n  this.reg4012 = null;\r\n  this.reg4013 = null;\r\n  this.sample = null;\r\n  this.dacLsb = null;\r\n  this.data = null;\r\n\r\n  this.reset();\r\n};\r\n\r\nChannelDM.prototype = {\r\n  clockDmc: function () {\r\n    // Only alter DAC value if the sample buffer has data:\r\n    if (this.hasSample) {\r\n      if ((this.data & 1) === 0) {\r\n        // Decrement delta:\r\n        if (this.deltaCounter > 0) {\r\n          this.deltaCounter--;\r\n        }\r\n      } else {\r\n        // Increment delta:\r\n        if (this.deltaCounter < 63) {\r\n          this.deltaCounter++;\r\n        }\r\n      }\r\n\r\n      // Update sample value:\r\n      this.sample = this.isEnabled ? (this.deltaCounter << 1) + this.dacLsb : 0;\r\n\r\n      // Update shift register:\r\n      this.data >>= 1;\r\n    }\r\n\r\n    this.dmaCounter--;\r\n    if (this.dmaCounter <= 0) {\r\n      // No more sample bits.\r\n      this.hasSample = false;\r\n      this.endOfSample();\r\n      this.dmaCounter = 8;\r\n    }\r\n\r\n    if (this.irqGenerated) {\r\n      this.papu.nes.cpu.requestIrq(this.papu.nes.cpu.IRQ_NORMAL);\r\n    }\r\n  },\r\n\r\n  endOfSample: function () {\r\n    if (this.playLengthCounter === 0 && this.playMode === this.MODE_LOOP) {\r\n      // Start from beginning of sample:\r\n      this.playAddress = this.playStartAddress;\r\n      this.playLengthCounter = this.playLength;\r\n    }\r\n\r\n    if (this.playLengthCounter > 0) {\r\n      // Fetch next sample:\r\n      this.nextSample();\r\n\r\n      if (this.playLengthCounter === 0) {\r\n        // Last byte of sample fetched, generate IRQ:\r\n        if (this.playMode === this.MODE_IRQ) {\r\n          // Generate IRQ:\r\n          this.irqGenerated = true;\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  nextSample: function () {\r\n    // Fetch byte:\r\n    this.data = this.papu.nes.mmap.load(this.playAddress);\r\n    this.papu.nes.cpu.haltCycles(4);\r\n\r\n    this.playLengthCounter--;\r\n    this.playAddress++;\r\n    if (this.playAddress > 0xffff) {\r\n      this.playAddress = 0x8000;\r\n    }\r\n\r\n    this.hasSample = true;\r\n  },\r\n\r\n  writeReg: function (address, value) {\r\n    if (address === 0x4010) {\r\n      // Play mode, DMA Frequency\r\n      if (value >> 6 === 0) {\r\n        this.playMode = this.MODE_NORMAL;\r\n      } else if (((value >> 6) & 1) === 1) {\r\n        this.playMode = this.MODE_LOOP;\r\n      } else if (value >> 6 === 2) {\r\n        this.playMode = this.MODE_IRQ;\r\n      }\r\n\r\n      if ((value & 0x80) === 0) {\r\n        this.irqGenerated = false;\r\n      }\r\n\r\n      this.dmaFrequency = this.papu.getDmcFrequency(value & 0xf);\r\n    } else if (address === 0x4011) {\r\n      // Delta counter load register:\r\n      this.deltaCounter = (value >> 1) & 63;\r\n      this.dacLsb = value & 1;\r\n      this.sample = (this.deltaCounter << 1) + this.dacLsb; // update sample value\r\n    } else if (address === 0x4012) {\r\n      // DMA address load register\r\n      this.playStartAddress = (value << 6) | 0x0c000;\r\n      this.playAddress = this.playStartAddress;\r\n      this.reg4012 = value;\r\n    } else if (address === 0x4013) {\r\n      // Length of play code\r\n      this.playLength = (value << 4) + 1;\r\n      this.playLengthCounter = this.playLength;\r\n      this.reg4013 = value;\r\n    } else if (address === 0x4015) {\r\n      // DMC/IRQ Status\r\n      if (((value >> 4) & 1) === 0) {\r\n        // Disable:\r\n        this.playLengthCounter = 0;\r\n      } else {\r\n        // Restart:\r\n        this.playAddress = this.playStartAddress;\r\n        this.playLengthCounter = this.playLength;\r\n      }\r\n      this.irqGenerated = false;\r\n    }\r\n  },\r\n\r\n  setEnabled: function (value) {\r\n    if (!this.isEnabled && value) {\r\n      this.playLengthCounter = this.playLength;\r\n    }\r\n    this.isEnabled = value;\r\n  },\r\n\r\n  getLengthStatus: function () {\r\n    return this.playLengthCounter === 0 || !this.isEnabled ? 0 : 1;\r\n  },\r\n\r\n  getIrqStatus: function () {\r\n    return this.irqGenerated ? 1 : 0;\r\n  },\r\n\r\n  reset: function () {\r\n    this.isEnabled = false;\r\n    this.irqGenerated = false;\r\n    this.playMode = this.MODE_NORMAL;\r\n    this.dmaFrequency = 0;\r\n    this.dmaCounter = 0;\r\n    this.deltaCounter = 0;\r\n    this.playStartAddress = 0;\r\n    this.playAddress = 0;\r\n    this.playLength = 0;\r\n    this.playLengthCounter = 0;\r\n    this.sample = 0;\r\n    this.dacLsb = 0;\r\n    this.shiftCounter = 0;\r\n    this.reg4012 = 0;\r\n    this.reg4013 = 0;\r\n    this.data = 0;\r\n  },\r\n};\r\n\r\nvar ChannelNoise = function (papu) {\r\n  this.papu = papu;\r\n\r\n  this.isEnabled = null;\r\n  this.envDecayDisable = null;\r\n  this.envDecayLoopEnable = null;\r\n  this.lengthCounterEnable = null;\r\n  this.envReset = null;\r\n  this.shiftNow = null;\r\n\r\n  this.lengthCounter = null;\r\n  this.progTimerCount = null;\r\n  this.progTimerMax = null;\r\n  this.envDecayRate = null;\r\n  this.envDecayCounter = null;\r\n  this.envVolume = null;\r\n  this.masterVolume = null;\r\n  this.shiftReg = 1 << 14;\r\n  this.randomBit = null;\r\n  this.randomMode = null;\r\n  this.sampleValue = null;\r\n  this.accValue = 0;\r\n  this.accCount = 1;\r\n  this.tmp = null;\r\n\r\n  this.reset();\r\n};\r\n\r\nChannelNoise.prototype = {\r\n  reset: function () {\r\n    this.progTimerCount = 0;\r\n    this.progTimerMax = 0;\r\n    this.isEnabled = false;\r\n    this.lengthCounter = 0;\r\n    this.lengthCounterEnable = false;\r\n    this.envDecayDisable = false;\r\n    this.envDecayLoopEnable = false;\r\n    this.shiftNow = false;\r\n    this.envDecayRate = 0;\r\n    this.envDecayCounter = 0;\r\n    this.envVolume = 0;\r\n    this.masterVolume = 0;\r\n    this.shiftReg = 1;\r\n    this.randomBit = 0;\r\n    this.randomMode = 0;\r\n    this.sampleValue = 0;\r\n    this.tmp = 0;\r\n  },\r\n\r\n  clockLengthCounter: function () {\r\n    if (this.lengthCounterEnable && this.lengthCounter > 0) {\r\n      this.lengthCounter--;\r\n      if (this.lengthCounter === 0) {\r\n        this.updateSampleValue();\r\n      }\r\n    }\r\n  },\r\n\r\n  clockEnvDecay: function () {\r\n    if (this.envReset) {\r\n      // Reset envelope:\r\n      this.envReset = false;\r\n      this.envDecayCounter = this.envDecayRate + 1;\r\n      this.envVolume = 0xf;\r\n    } else if (--this.envDecayCounter <= 0) {\r\n      // Normal handling:\r\n      this.envDecayCounter = this.envDecayRate + 1;\r\n      if (this.envVolume > 0) {\r\n        this.envVolume--;\r\n      } else {\r\n        this.envVolume = this.envDecayLoopEnable ? 0xf : 0;\r\n      }\r\n    }\r\n    if (this.envDecayDisable) {\r\n      this.masterVolume = this.envDecayRate;\r\n    } else {\r\n      this.masterVolume = this.envVolume;\r\n    }\r\n    this.updateSampleValue();\r\n  },\r\n\r\n  updateSampleValue: function () {\r\n    if (this.isEnabled && this.lengthCounter > 0) {\r\n      this.sampleValue = this.randomBit * this.masterVolume;\r\n    }\r\n  },\r\n\r\n  writeReg: function (address, value) {\r\n    if (address === 0x400c) {\r\n      // Volume/Envelope decay:\r\n      this.envDecayDisable = (value & 0x10) !== 0;\r\n      this.envDecayRate = value & 0xf;\r\n      this.envDecayLoopEnable = (value & 0x20) !== 0;\r\n      this.lengthCounterEnable = (value & 0x20) === 0;\r\n      if (this.envDecayDisable) {\r\n        this.masterVolume = this.envDecayRate;\r\n      } else {\r\n        this.masterVolume = this.envVolume;\r\n      }\r\n    } else if (address === 0x400e) {\r\n      // Programmable timer:\r\n      this.progTimerMax = this.papu.getNoiseWaveLength(value & 0xf);\r\n      this.randomMode = value >> 7;\r\n    } else if (address === 0x400f) {\r\n      // Length counter\r\n      this.lengthCounter = this.papu.getLengthMax(value & 248);\r\n      this.envReset = true;\r\n    }\r\n    // Update:\r\n    //updateSampleValue();\r\n  },\r\n\r\n  setEnabled: function (value) {\r\n    this.isEnabled = value;\r\n    if (!value) {\r\n      this.lengthCounter = 0;\r\n    }\r\n    this.updateSampleValue();\r\n  },\r\n\r\n  getLengthStatus: function () {\r\n    return this.lengthCounter === 0 || !this.isEnabled ? 0 : 1;\r\n  },\r\n};\r\n\r\nvar ChannelSquare = function (papu, square1) {\r\n  this.papu = papu;\r\n\r\n  // prettier-ignore\r\n  this.dutyLookup = [\r\n         0, 1, 0, 0, 0, 0, 0, 0,\r\n         0, 1, 1, 0, 0, 0, 0, 0,\r\n         0, 1, 1, 1, 1, 0, 0, 0,\r\n         1, 0, 0, 1, 1, 1, 1, 1\r\n    ];\r\n  // prettier-ignore\r\n  this.impLookup = [\r\n         1,-1, 0, 0, 0, 0, 0, 0,\r\n         1, 0,-1, 0, 0, 0, 0, 0,\r\n         1, 0, 0, 0,-1, 0, 0, 0,\r\n        -1, 0, 1, 0, 0, 0, 0, 0\r\n    ];\r\n\r\n  this.sqr1 = square1;\r\n  this.isEnabled = null;\r\n  this.lengthCounterEnable = null;\r\n  this.sweepActive = null;\r\n  this.envDecayDisable = null;\r\n  this.envDecayLoopEnable = null;\r\n  this.envReset = null;\r\n  this.sweepCarry = null;\r\n  this.updateSweepPeriod = null;\r\n\r\n  this.progTimerCount = null;\r\n  this.progTimerMax = null;\r\n  this.lengthCounter = null;\r\n  this.squareCounter = null;\r\n  this.sweepCounter = null;\r\n  this.sweepCounterMax = null;\r\n  this.sweepMode = null;\r\n  this.sweepShiftAmount = null;\r\n  this.envDecayRate = null;\r\n  this.envDecayCounter = null;\r\n  this.envVolume = null;\r\n  this.masterVolume = null;\r\n  this.dutyMode = null;\r\n  this.sweepResult = null;\r\n  this.sampleValue = null;\r\n  this.vol = null;\r\n\r\n  this.reset();\r\n};\r\n\r\nChannelSquare.prototype = {\r\n  reset: function () {\r\n    this.progTimerCount = 0;\r\n    this.progTimerMax = 0;\r\n    this.lengthCounter = 0;\r\n    this.squareCounter = 0;\r\n    this.sweepCounter = 0;\r\n    this.sweepCounterMax = 0;\r\n    this.sweepMode = 0;\r\n    this.sweepShiftAmount = 0;\r\n    this.envDecayRate = 0;\r\n    this.envDecayCounter = 0;\r\n    this.envVolume = 0;\r\n    this.masterVolume = 0;\r\n    this.dutyMode = 0;\r\n    this.vol = 0;\r\n\r\n    this.isEnabled = false;\r\n    this.lengthCounterEnable = false;\r\n    this.sweepActive = false;\r\n    this.sweepCarry = false;\r\n    this.envDecayDisable = false;\r\n    this.envDecayLoopEnable = false;\r\n  },\r\n\r\n  clockLengthCounter: function () {\r\n    if (this.lengthCounterEnable && this.lengthCounter > 0) {\r\n      this.lengthCounter--;\r\n      if (this.lengthCounter === 0) {\r\n        this.updateSampleValue();\r\n      }\r\n    }\r\n  },\r\n\r\n  clockEnvDecay: function () {\r\n    if (this.envReset) {\r\n      // Reset envelope:\r\n      this.envReset = false;\r\n      this.envDecayCounter = this.envDecayRate + 1;\r\n      this.envVolume = 0xf;\r\n    } else if (--this.envDecayCounter <= 0) {\r\n      // Normal handling:\r\n      this.envDecayCounter = this.envDecayRate + 1;\r\n      if (this.envVolume > 0) {\r\n        this.envVolume--;\r\n      } else {\r\n        this.envVolume = this.envDecayLoopEnable ? 0xf : 0;\r\n      }\r\n    }\r\n\r\n    if (this.envDecayDisable) {\r\n      this.masterVolume = this.envDecayRate;\r\n    } else {\r\n      this.masterVolume = this.envVolume;\r\n    }\r\n    this.updateSampleValue();\r\n  },\r\n\r\n  clockSweep: function () {\r\n    if (--this.sweepCounter <= 0) {\r\n      this.sweepCounter = this.sweepCounterMax + 1;\r\n      if (\r\n        this.sweepActive &&\r\n        this.sweepShiftAmount > 0 &&\r\n        this.progTimerMax > 7\r\n      ) {\r\n        // Calculate result from shifter:\r\n        this.sweepCarry = false;\r\n        if (this.sweepMode === 0) {\r\n          this.progTimerMax += this.progTimerMax >> this.sweepShiftAmount;\r\n          if (this.progTimerMax > 4095) {\r\n            this.progTimerMax = 4095;\r\n            this.sweepCarry = true;\r\n          }\r\n        } else {\r\n          this.progTimerMax =\r\n            this.progTimerMax -\r\n            ((this.progTimerMax >> this.sweepShiftAmount) -\r\n              (this.sqr1 ? 1 : 0));\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.updateSweepPeriod) {\r\n      this.updateSweepPeriod = false;\r\n      this.sweepCounter = this.sweepCounterMax + 1;\r\n    }\r\n  },\r\n\r\n  updateSampleValue: function () {\r\n    if (this.isEnabled && this.lengthCounter > 0 && this.progTimerMax > 7) {\r\n      if (\r\n        this.sweepMode === 0 &&\r\n        this.progTimerMax + (this.progTimerMax >> this.sweepShiftAmount) > 4095\r\n      ) {\r\n        //if (this.sweepCarry) {\r\n        this.sampleValue = 0;\r\n      } else {\r\n        this.sampleValue =\r\n          this.masterVolume *\r\n          this.dutyLookup[(this.dutyMode << 3) + this.squareCounter];\r\n      }\r\n    } else {\r\n      this.sampleValue = 0;\r\n    }\r\n  },\r\n\r\n  writeReg: function (address, value) {\r\n    var addrAdd = this.sqr1 ? 0 : 4;\r\n    if (address === 0x4000 + addrAdd) {\r\n      // Volume/Envelope decay:\r\n      this.envDecayDisable = (value & 0x10) !== 0;\r\n      this.envDecayRate = value & 0xf;\r\n      this.envDecayLoopEnable = (value & 0x20) !== 0;\r\n      this.dutyMode = (value >> 6) & 0x3;\r\n      this.lengthCounterEnable = (value & 0x20) === 0;\r\n      if (this.envDecayDisable) {\r\n        this.masterVolume = this.envDecayRate;\r\n      } else {\r\n        this.masterVolume = this.envVolume;\r\n      }\r\n      this.updateSampleValue();\r\n    } else if (address === 0x4001 + addrAdd) {\r\n      // Sweep:\r\n      this.sweepActive = (value & 0x80) !== 0;\r\n      this.sweepCounterMax = (value >> 4) & 7;\r\n      this.sweepMode = (value >> 3) & 1;\r\n      this.sweepShiftAmount = value & 7;\r\n      this.updateSweepPeriod = true;\r\n    } else if (address === 0x4002 + addrAdd) {\r\n      // Programmable timer:\r\n      this.progTimerMax &= 0x700;\r\n      this.progTimerMax |= value;\r\n    } else if (address === 0x4003 + addrAdd) {\r\n      // Programmable timer, length counter\r\n      this.progTimerMax &= 0xff;\r\n      this.progTimerMax |= (value & 0x7) << 8;\r\n\r\n      if (this.isEnabled) {\r\n        this.lengthCounter = this.papu.getLengthMax(value & 0xf8);\r\n      }\r\n\r\n      this.envReset = true;\r\n    }\r\n  },\r\n\r\n  setEnabled: function (value) {\r\n    this.isEnabled = value;\r\n    if (!value) {\r\n      this.lengthCounter = 0;\r\n    }\r\n    this.updateSampleValue();\r\n  },\r\n\r\n  getLengthStatus: function () {\r\n    return this.lengthCounter === 0 || !this.isEnabled ? 0 : 1;\r\n  },\r\n};\r\n\r\nvar ChannelTriangle = function (papu) {\r\n  this.papu = papu;\r\n\r\n  this.isEnabled = null;\r\n  this.sampleCondition = null;\r\n  this.lengthCounterEnable = null;\r\n  this.lcHalt = null;\r\n  this.lcControl = null;\r\n\r\n  this.progTimerCount = null;\r\n  this.progTimerMax = null;\r\n  this.triangleCounter = null;\r\n  this.lengthCounter = null;\r\n  this.linearCounter = null;\r\n  this.lcLoadValue = null;\r\n  this.sampleValue = null;\r\n  this.tmp = null;\r\n\r\n  this.reset();\r\n};\r\n\r\nChannelTriangle.prototype = {\r\n  reset: function () {\r\n    this.progTimerCount = 0;\r\n    this.progTimerMax = 0;\r\n    this.triangleCounter = 0;\r\n    this.isEnabled = false;\r\n    this.sampleCondition = false;\r\n    this.lengthCounter = 0;\r\n    this.lengthCounterEnable = false;\r\n    this.linearCounter = 0;\r\n    this.lcLoadValue = 0;\r\n    this.lcHalt = true;\r\n    this.lcControl = false;\r\n    this.tmp = 0;\r\n    this.sampleValue = 0xf;\r\n  },\r\n\r\n  clockLengthCounter: function () {\r\n    if (this.lengthCounterEnable && this.lengthCounter > 0) {\r\n      this.lengthCounter--;\r\n      if (this.lengthCounter === 0) {\r\n        this.updateSampleCondition();\r\n      }\r\n    }\r\n  },\r\n\r\n  clockLinearCounter: function () {\r\n    if (this.lcHalt) {\r\n      // Load:\r\n      this.linearCounter = this.lcLoadValue;\r\n      this.updateSampleCondition();\r\n    } else if (this.linearCounter > 0) {\r\n      // Decrement:\r\n      this.linearCounter--;\r\n      this.updateSampleCondition();\r\n    }\r\n    if (!this.lcControl) {\r\n      // Clear halt flag:\r\n      this.lcHalt = false;\r\n    }\r\n  },\r\n\r\n  getLengthStatus: function () {\r\n    return this.lengthCounter === 0 || !this.isEnabled ? 0 : 1;\r\n  },\r\n\r\n  // eslint-disable-next-line no-unused-vars\r\n  readReg: function (address) {\r\n    return 0;\r\n  },\r\n\r\n  writeReg: function (address, value) {\r\n    if (address === 0x4008) {\r\n      // New values for linear counter:\r\n      this.lcControl = (value & 0x80) !== 0;\r\n      this.lcLoadValue = value & 0x7f;\r\n\r\n      // Length counter enable:\r\n      this.lengthCounterEnable = !this.lcControl;\r\n    } else if (address === 0x400a) {\r\n      // Programmable timer:\r\n      this.progTimerMax &= 0x700;\r\n      this.progTimerMax |= value;\r\n    } else if (address === 0x400b) {\r\n      // Programmable timer, length counter\r\n      this.progTimerMax &= 0xff;\r\n      this.progTimerMax |= (value & 0x07) << 8;\r\n      this.lengthCounter = this.papu.getLengthMax(value & 0xf8);\r\n      this.lcHalt = true;\r\n    }\r\n\r\n    this.updateSampleCondition();\r\n  },\r\n\r\n  clockProgrammableTimer: function (nCycles) {\r\n    if (this.progTimerMax > 0) {\r\n      this.progTimerCount += nCycles;\r\n      while (\r\n        this.progTimerMax > 0 &&\r\n        this.progTimerCount >= this.progTimerMax\r\n      ) {\r\n        this.progTimerCount -= this.progTimerMax;\r\n        if (\r\n          this.isEnabled &&\r\n          this.lengthCounter > 0 &&\r\n          this.linearCounter > 0\r\n        ) {\r\n          this.clockTriangleGenerator();\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  clockTriangleGenerator: function () {\r\n    this.triangleCounter++;\r\n    this.triangleCounter &= 0x1f;\r\n  },\r\n\r\n  setEnabled: function (value) {\r\n    this.isEnabled = value;\r\n    if (!value) {\r\n      this.lengthCounter = 0;\r\n    }\r\n    this.updateSampleCondition();\r\n  },\r\n\r\n  updateSampleCondition: function () {\r\n    this.sampleCondition =\r\n      this.isEnabled &&\r\n      this.progTimerMax > 7 &&\r\n      this.linearCounter > 0 &&\r\n      this.lengthCounter > 0;\r\n  },\r\n};\r\n\r\nmodule.exports = PAPU;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/papu.js\n// module id = 7\n// module chunks = 0 1","var Mappers = require(\"./mappers\");\r\nvar Tile = require(\"./tile\");\r\n\r\nvar ROM = function (nes) {\r\n  this.nes = nes;\r\n\r\n  this.mapperName = new Array(92);\r\n\r\n  for (var i = 0; i < 92; i++) {\r\n    this.mapperName[i] = \"Unknown Mapper\";\r\n  }\r\n  this.mapperName[0] = \"Direct Access\";\r\n  this.mapperName[1] = \"Nintendo MMC1\";\r\n  this.mapperName[2] = \"UNROM\";\r\n  this.mapperName[3] = \"CNROM\";\r\n  this.mapperName[4] = \"Nintendo MMC3\";\r\n  this.mapperName[5] = \"Nintendo MMC5\";\r\n  this.mapperName[6] = \"FFE F4xxx\";\r\n  this.mapperName[7] = \"AOROM\";\r\n  this.mapperName[8] = \"FFE F3xxx\";\r\n  this.mapperName[9] = \"Nintendo MMC2\";\r\n  this.mapperName[10] = \"Nintendo MMC4\";\r\n  this.mapperName[11] = \"Color Dreams Chip\";\r\n  this.mapperName[12] = \"FFE F6xxx\";\r\n  this.mapperName[15] = \"100-in-1 switch\";\r\n  this.mapperName[16] = \"Bandai chip\";\r\n  this.mapperName[17] = \"FFE F8xxx\";\r\n  this.mapperName[18] = \"Jaleco SS8806 chip\";\r\n  this.mapperName[19] = \"Namcot 106 chip\";\r\n  this.mapperName[20] = \"Famicom Disk System\";\r\n  this.mapperName[21] = \"Konami VRC4a\";\r\n  this.mapperName[22] = \"Konami VRC2a\";\r\n  this.mapperName[23] = \"Konami VRC2a\";\r\n  this.mapperName[24] = \"Konami VRC6\";\r\n  this.mapperName[25] = \"Konami VRC4b\";\r\n  this.mapperName[32] = \"Irem G-101 chip\";\r\n  this.mapperName[33] = \"Taito TC0190/TC0350\";\r\n  this.mapperName[34] = \"32kB ROM switch\";\r\n\r\n  this.mapperName[64] = \"Tengen RAMBO-1 chip\";\r\n  this.mapperName[65] = \"Irem H-3001 chip\";\r\n  this.mapperName[66] = \"GNROM switch\";\r\n  this.mapperName[67] = \"SunSoft3 chip\";\r\n  this.mapperName[68] = \"SunSoft4 chip\";\r\n  this.mapperName[69] = \"SunSoft5 FME-7 chip\";\r\n  this.mapperName[71] = \"Camerica chip\";\r\n  this.mapperName[78] = \"Irem 74HC161/32-based\";\r\n  this.mapperName[91] = \"Pirate HK-SF3 chip\";\r\n};\r\n\r\nROM.prototype = {\r\n  // Mirroring types:\r\n  VERTICAL_MIRRORING: 0,\r\n  HORIZONTAL_MIRRORING: 1,\r\n  FOURSCREEN_MIRRORING: 2,\r\n  SINGLESCREEN_MIRRORING: 3,\r\n  SINGLESCREEN_MIRRORING2: 4,\r\n  SINGLESCREEN_MIRRORING3: 5,\r\n  SINGLESCREEN_MIRRORING4: 6,\r\n  CHRROM_MIRRORING: 7,\r\n\r\n  header: null,\r\n  rom: null,\r\n  vrom: null,\r\n  vromTile: null,\r\n\r\n  romCount: null,\r\n  vromCount: null,\r\n  mirroring: null,\r\n  batteryRam: null,\r\n  trainer: null,\r\n  fourScreen: null,\r\n  mapperType: null,\r\n  valid: false,\r\n\r\n  load: function (data) {\r\n    var i, j, v;\r\n\r\n    if (data.indexOf(\"NES\\x1a\") === -1) {\r\n      throw new Error(\"Not a valid NES ROM.\");\r\n    }\r\n    this.header = new Array(16);\r\n    for (i = 0; i < 16; i++) {\r\n      this.header[i] = data.charCodeAt(i) & 0xff;\r\n    }\r\n    this.romCount = this.header[4];\r\n    this.vromCount = this.header[5] * 2; // Get the number of 4kB banks, not 8kB\r\n    this.mirroring = (this.header[6] & 1) !== 0 ? 1 : 0;\r\n    this.batteryRam = (this.header[6] & 2) !== 0;\r\n    this.trainer = (this.header[6] & 4) !== 0;\r\n    this.fourScreen = (this.header[6] & 8) !== 0;\r\n    this.mapperType = (this.header[6] >> 4) | (this.header[7] & 0xf0);\r\n    /* TODO\r\n        if (this.batteryRam)\r\n            this.loadBatteryRam();*/\r\n    // Check whether byte 8-15 are zero's:\r\n    var foundError = false;\r\n    for (i = 8; i < 16; i++) {\r\n      if (this.header[i] !== 0) {\r\n        foundError = true;\r\n        break;\r\n      }\r\n    }\r\n    if (foundError) {\r\n      this.mapperType &= 0xf; // Ignore byte 7\r\n    }\r\n    // Load PRG-ROM banks:\r\n    this.rom = new Array(this.romCount);\r\n    var offset = 16;\r\n    for (i = 0; i < this.romCount; i++) {\r\n      this.rom[i] = new Array(16384);\r\n      for (j = 0; j < 16384; j++) {\r\n        if (offset + j >= data.length) {\r\n          break;\r\n        }\r\n        this.rom[i][j] = data.charCodeAt(offset + j) & 0xff;\r\n      }\r\n      offset += 16384;\r\n    }\r\n    // Load CHR-ROM banks:\r\n    this.vrom = new Array(this.vromCount);\r\n    for (i = 0; i < this.vromCount; i++) {\r\n      this.vrom[i] = new Array(4096);\r\n      for (j = 0; j < 4096; j++) {\r\n        if (offset + j >= data.length) {\r\n          break;\r\n        }\r\n        this.vrom[i][j] = data.charCodeAt(offset + j) & 0xff;\r\n      }\r\n      offset += 4096;\r\n    }\r\n\r\n    // Create VROM tiles:\r\n    this.vromTile = new Array(this.vromCount);\r\n    for (i = 0; i < this.vromCount; i++) {\r\n      this.vromTile[i] = new Array(256);\r\n      for (j = 0; j < 256; j++) {\r\n        this.vromTile[i][j] = new Tile();\r\n      }\r\n    }\r\n\r\n    // Convert CHR-ROM banks to tiles:\r\n    var tileIndex;\r\n    var leftOver;\r\n    for (v = 0; v < this.vromCount; v++) {\r\n      for (i = 0; i < 4096; i++) {\r\n        tileIndex = i >> 4;\r\n        leftOver = i % 16;\r\n        if (leftOver < 8) {\r\n          this.vromTile[v][tileIndex].setScanline(\r\n            leftOver,\r\n            this.vrom[v][i],\r\n            this.vrom[v][i + 8]\r\n          );\r\n        } else {\r\n          this.vromTile[v][tileIndex].setScanline(\r\n            leftOver - 8,\r\n            this.vrom[v][i - 8],\r\n            this.vrom[v][i]\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    this.valid = true;\r\n  },\r\n\r\n  getMirroringType: function () {\r\n    if (this.fourScreen) {\r\n      return this.FOURSCREEN_MIRRORING;\r\n    }\r\n    if (this.mirroring === 0) {\r\n      return this.HORIZONTAL_MIRRORING;\r\n    }\r\n    return this.VERTICAL_MIRRORING;\r\n  },\r\n\r\n  getMapperName: function () {\r\n    if (this.mapperType >= 0 && this.mapperType < this.mapperName.length) {\r\n      return this.mapperName[this.mapperType];\r\n    }\r\n    return \"Unknown Mapper, \" + this.mapperType;\r\n  },\r\n\r\n  mapperSupported: function () {\r\n    return typeof Mappers[this.mapperType] !== \"undefined\";\r\n  },\r\n\r\n  createMapper: function () {\r\n    if (this.mapperSupported()) {\r\n      return new Mappers[this.mapperType](this.nes);\r\n    } else {\r\n      throw new Error(\r\n        \"This ROM uses a mapper not supported by JSNES: \" +\r\n          this.getMapperName() +\r\n          \"(\" +\r\n          this.mapperType +\r\n          \")\"\r\n      );\r\n    }\r\n  },\r\n};\r\n\r\nmodule.exports = ROM;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/rom.js\n// module id = 8\n// module chunks = 0 1","var utils = require(\"./utils\");\r\n\r\nvar Mappers = {};\r\n\r\nMappers[0] = function (nes) {\r\n  this.nes = nes;\r\n};\r\n\r\nMappers[0].prototype = {\r\n  reset: function () {\r\n    this.joy1StrobeState = 0;\r\n    this.joy2StrobeState = 0;\r\n    this.joypadLastWrite = 0;\r\n\r\n    this.zapperFired = false;\r\n    this.zapperX = null;\r\n    this.zapperY = null;\r\n  },\r\n\r\n  write: function (address, value) {\r\n    if (address < 0x2000) {\r\n      // Mirroring of RAM:\r\n      this.nes.cpu.mem[address & 0x7ff] = value;\r\n    } else if (address > 0x4017) {\r\n      this.nes.cpu.mem[address] = value;\r\n      if (address >= 0x6000 && address < 0x8000) {\r\n        // Write to persistent RAM\r\n        this.nes.opts.onBatteryRamWrite(address, value);\r\n      }\r\n    } else if (address > 0x2007 && address < 0x4000) {\r\n      this.regWrite(0x2000 + (address & 0x7), value);\r\n    } else {\r\n      this.regWrite(address, value);\r\n    }\r\n  },\r\n\r\n  writelow: function (address, value) {\r\n    if (address < 0x2000) {\r\n      // Mirroring of RAM:\r\n      this.nes.cpu.mem[address & 0x7ff] = value;\r\n    } else if (address > 0x4017) {\r\n      this.nes.cpu.mem[address] = value;\r\n    } else if (address > 0x2007 && address < 0x4000) {\r\n      this.regWrite(0x2000 + (address & 0x7), value);\r\n    } else {\r\n      this.regWrite(address, value);\r\n    }\r\n  },\r\n\r\n  load: function (address) {\r\n    // Wrap around:\r\n    address &= 0xffff;\r\n\r\n    // Check address range:\r\n    if (address > 0x4017) {\r\n      // ROM:\r\n      return this.nes.cpu.mem[address];\r\n    } else if (address >= 0x2000) {\r\n      // I/O Ports.\r\n      return this.regLoad(address);\r\n    } else {\r\n      // RAM (mirrored)\r\n      return this.nes.cpu.mem[address & 0x7ff];\r\n    }\r\n  },\r\n\r\n  regLoad: function (address) {\r\n    switch (\r\n      address >> 12 // use fourth nibble (0xF000)\r\n    ) {\r\n      case 0:\r\n        break;\r\n\r\n      case 1:\r\n        break;\r\n\r\n      case 2:\r\n      // Fall through to case 3\r\n      case 3:\r\n        // PPU Registers\r\n        switch (address & 0x7) {\r\n          case 0x0:\r\n            // 0x2000:\r\n            // PPU Control Register 1.\r\n            // (the value is stored both\r\n            // in main memory and in the\r\n            // PPU as flags):\r\n            // (not in the real NES)\r\n            return this.nes.cpu.mem[0x2000];\r\n\r\n          case 0x1:\r\n            // 0x2001:\r\n            // PPU Control Register 2.\r\n            // (the value is stored both\r\n            // in main memory and in the\r\n            // PPU as flags):\r\n            // (not in the real NES)\r\n            return this.nes.cpu.mem[0x2001];\r\n\r\n          case 0x2:\r\n            // 0x2002:\r\n            // PPU Status Register.\r\n            // The value is stored in\r\n            // main memory in addition\r\n            // to as flags in the PPU.\r\n            // (not in the real NES)\r\n            return this.nes.ppu.readStatusRegister();\r\n\r\n          case 0x3:\r\n            return 0;\r\n\r\n          case 0x4:\r\n            // 0x2004:\r\n            // Sprite Memory read.\r\n            return this.nes.ppu.sramLoad();\r\n          case 0x5:\r\n            return 0;\r\n\r\n          case 0x6:\r\n            return 0;\r\n\r\n          case 0x7:\r\n            // 0x2007:\r\n            // VRAM read:\r\n            return this.nes.ppu.vramLoad();\r\n        }\r\n        break;\r\n      case 4:\r\n        // Sound+Joypad registers\r\n        switch (address - 0x4015) {\r\n          case 0:\r\n            // 0x4015:\r\n            // Sound channel enable, DMC Status\r\n            return this.nes.papu.readReg(address);\r\n\r\n          case 1:\r\n            // 0x4016:\r\n            // Joystick 1 + Strobe\r\n            return this.joy1Read();\r\n\r\n          case 2:\r\n            // 0x4017:\r\n            // Joystick 2 + Strobe\r\n            // https://wiki.nesdev.com/w/index.php/Zapper\r\n            var w;\r\n\r\n            if (\r\n              this.zapperX !== null &&\r\n              this.zapperY !== null &&\r\n              this.nes.ppu.isPixelWhite(this.zapperX, this.zapperY)\r\n            ) {\r\n              w = 0;\r\n            } else {\r\n              w = 0x1 << 3;\r\n            }\r\n\r\n            if (this.zapperFired) {\r\n              w |= 0x1 << 4;\r\n            }\r\n            return (this.joy2Read() | w) & 0xffff;\r\n        }\r\n        break;\r\n    }\r\n    return 0;\r\n  },\r\n\r\n  regWrite: function (address, value) {\r\n    switch (address) {\r\n      case 0x2000:\r\n        // PPU Control register 1\r\n        this.nes.cpu.mem[address] = value;\r\n        this.nes.ppu.updateControlReg1(value);\r\n        break;\r\n\r\n      case 0x2001:\r\n        // PPU Control register 2\r\n        this.nes.cpu.mem[address] = value;\r\n        this.nes.ppu.updateControlReg2(value);\r\n        break;\r\n\r\n      case 0x2003:\r\n        // Set Sprite RAM address:\r\n        this.nes.ppu.writeSRAMAddress(value);\r\n        break;\r\n\r\n      case 0x2004:\r\n        // Write to Sprite RAM:\r\n        this.nes.ppu.sramWrite(value);\r\n        break;\r\n\r\n      case 0x2005:\r\n        // Screen Scroll offsets:\r\n        this.nes.ppu.scrollWrite(value);\r\n        break;\r\n\r\n      case 0x2006:\r\n        // Set VRAM address:\r\n        this.nes.ppu.writeVRAMAddress(value);\r\n        break;\r\n\r\n      case 0x2007:\r\n        // Write to VRAM:\r\n        this.nes.ppu.vramWrite(value);\r\n        break;\r\n\r\n      case 0x4014:\r\n        // Sprite Memory DMA Access\r\n        this.nes.ppu.sramDMA(value);\r\n        break;\r\n\r\n      case 0x4015:\r\n        // Sound Channel Switch, DMC Status\r\n        this.nes.papu.writeReg(address, value);\r\n        break;\r\n\r\n      case 0x4016:\r\n        // Joystick 1 + Strobe\r\n        if ((value & 1) === 0 && (this.joypadLastWrite & 1) === 1) {\r\n          this.joy1StrobeState = 0;\r\n          this.joy2StrobeState = 0;\r\n        }\r\n        this.joypadLastWrite = value;\r\n        break;\r\n\r\n      case 0x4017:\r\n        // Sound channel frame sequencer:\r\n        this.nes.papu.writeReg(address, value);\r\n        break;\r\n\r\n      default:\r\n        // Sound registers\r\n        // console.log(\"write to sound reg\");\r\n        if (address >= 0x4000 && address <= 0x4017) {\r\n          this.nes.papu.writeReg(address, value);\r\n        }\r\n    }\r\n  },\r\n\r\n  joy1Read: function () {\r\n    var ret;\r\n\r\n    switch (this.joy1StrobeState) {\r\n      case 0:\r\n      case 1:\r\n      case 2:\r\n      case 3:\r\n      case 4:\r\n      case 5:\r\n      case 6:\r\n      case 7:\r\n        ret = this.nes.controllers[1].state[this.joy1StrobeState];\r\n        break;\r\n      case 8:\r\n      case 9:\r\n      case 10:\r\n      case 11:\r\n      case 12:\r\n      case 13:\r\n      case 14:\r\n      case 15:\r\n      case 16:\r\n      case 17:\r\n      case 18:\r\n        ret = 0;\r\n        break;\r\n      case 19:\r\n        ret = 1;\r\n        break;\r\n      default:\r\n        ret = 0;\r\n    }\r\n\r\n    this.joy1StrobeState++;\r\n    if (this.joy1StrobeState === 24) {\r\n      this.joy1StrobeState = 0;\r\n    }\r\n\r\n    return ret;\r\n  },\r\n\r\n  joy2Read: function () {\r\n    var ret;\r\n\r\n    switch (this.joy2StrobeState) {\r\n      case 0:\r\n      case 1:\r\n      case 2:\r\n      case 3:\r\n      case 4:\r\n      case 5:\r\n      case 6:\r\n      case 7:\r\n        ret = this.nes.controllers[2].state[this.joy2StrobeState];\r\n        break;\r\n      case 8:\r\n      case 9:\r\n      case 10:\r\n      case 11:\r\n      case 12:\r\n      case 13:\r\n      case 14:\r\n      case 15:\r\n      case 16:\r\n      case 17:\r\n      case 18:\r\n        ret = 0;\r\n        break;\r\n      case 19:\r\n        ret = 1;\r\n        break;\r\n      default:\r\n        ret = 0;\r\n    }\r\n\r\n    this.joy2StrobeState++;\r\n    if (this.joy2StrobeState === 24) {\r\n      this.joy2StrobeState = 0;\r\n    }\r\n\r\n    return ret;\r\n  },\r\n\r\n  loadROM: function () {\r\n    if (!this.nes.rom.valid || this.nes.rom.romCount < 1) {\r\n      throw new Error(\"NoMapper: Invalid ROM! Unable to load.\");\r\n    }\r\n\r\n    // Load ROM into memory:\r\n    this.loadPRGROM();\r\n\r\n    // Load CHR-ROM:\r\n    this.loadCHRROM();\r\n\r\n    // Load Battery RAM (if present):\r\n    this.loadBatteryRam();\r\n\r\n    // Reset IRQ:\r\n    //nes.getCpu().doResetInterrupt();\r\n    this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\r\n  },\r\n\r\n  loadPRGROM: function () {\r\n    if (this.nes.rom.romCount > 1) {\r\n      // Load the two first banks into memory.\r\n      this.loadRomBank(0, 0x8000);\r\n      this.loadRomBank(1, 0xc000);\r\n    } else {\r\n      // Load the one bank into both memory locations:\r\n      this.loadRomBank(0, 0x8000);\r\n      this.loadRomBank(0, 0xc000);\r\n    }\r\n  },\r\n\r\n  loadCHRROM: function () {\r\n    // console.log(\"Loading CHR ROM..\");\r\n    if (this.nes.rom.vromCount > 0) {\r\n      if (this.nes.rom.vromCount === 1) {\r\n        this.loadVromBank(0, 0x0000);\r\n        this.loadVromBank(0, 0x1000);\r\n      } else {\r\n        this.loadVromBank(0, 0x0000);\r\n        this.loadVromBank(1, 0x1000);\r\n      }\r\n    } else {\r\n      //System.out.println(\"There aren't any CHR-ROM banks..\");\r\n    }\r\n  },\r\n\r\n  loadBatteryRam: function () {\r\n    if (this.nes.rom.batteryRam) {\r\n      var ram = this.nes.rom.batteryRam;\r\n      if (ram !== null && ram.length === 0x2000) {\r\n        // Load Battery RAM into memory:\r\n        utils.copyArrayElements(ram, 0, this.nes.cpu.mem, 0x6000, 0x2000);\r\n      }\r\n    }\r\n  },\r\n\r\n  loadRomBank: function (bank, address) {\r\n    // Loads a ROM bank into the specified address.\r\n    bank %= this.nes.rom.romCount;\r\n    //var data = this.nes.rom.rom[bank];\r\n    //cpuMem.write(address,data,data.length);\r\n    utils.copyArrayElements(\r\n      this.nes.rom.rom[bank],\r\n      0,\r\n      this.nes.cpu.mem,\r\n      address,\r\n      16384\r\n    );\r\n  },\r\n\r\n  loadVromBank: function (bank, address) {\r\n    if (this.nes.rom.vromCount === 0) {\r\n      return;\r\n    }\r\n    this.nes.ppu.triggerRendering();\r\n\r\n    utils.copyArrayElements(\r\n      this.nes.rom.vrom[bank % this.nes.rom.vromCount],\r\n      0,\r\n      this.nes.ppu.vramMem,\r\n      address,\r\n      4096\r\n    );\r\n\r\n    var vromTile = this.nes.rom.vromTile[bank % this.nes.rom.vromCount];\r\n    utils.copyArrayElements(\r\n      vromTile,\r\n      0,\r\n      this.nes.ppu.ptTile,\r\n      address >> 4,\r\n      256\r\n    );\r\n  },\r\n\r\n  load32kRomBank: function (bank, address) {\r\n    this.loadRomBank((bank * 2) % this.nes.rom.romCount, address);\r\n    this.loadRomBank((bank * 2 + 1) % this.nes.rom.romCount, address + 16384);\r\n  },\r\n\r\n  load8kVromBank: function (bank4kStart, address) {\r\n    if (this.nes.rom.vromCount === 0) {\r\n      return;\r\n    }\r\n    this.nes.ppu.triggerRendering();\r\n\r\n    this.loadVromBank(bank4kStart % this.nes.rom.vromCount, address);\r\n    this.loadVromBank(\r\n      (bank4kStart + 1) % this.nes.rom.vromCount,\r\n      address + 4096\r\n    );\r\n  },\r\n\r\n  load1kVromBank: function (bank1k, address) {\r\n    if (this.nes.rom.vromCount === 0) {\r\n      return;\r\n    }\r\n    this.nes.ppu.triggerRendering();\r\n\r\n    var bank4k = Math.floor(bank1k / 4) % this.nes.rom.vromCount;\r\n    var bankoffset = (bank1k % 4) * 1024;\r\n    utils.copyArrayElements(\r\n      this.nes.rom.vrom[bank4k],\r\n      bankoffset,\r\n      this.nes.ppu.vramMem,\r\n      address,\r\n      1024\r\n    );\r\n\r\n    // Update tiles:\r\n    var vromTile = this.nes.rom.vromTile[bank4k];\r\n    var baseIndex = address >> 4;\r\n    for (var i = 0; i < 64; i++) {\r\n      this.nes.ppu.ptTile[baseIndex + i] = vromTile[(bank1k % 4 << 6) + i];\r\n    }\r\n  },\r\n\r\n  load2kVromBank: function (bank2k, address) {\r\n    if (this.nes.rom.vromCount === 0) {\r\n      return;\r\n    }\r\n    this.nes.ppu.triggerRendering();\r\n\r\n    var bank4k = Math.floor(bank2k / 2) % this.nes.rom.vromCount;\r\n    var bankoffset = (bank2k % 2) * 2048;\r\n    utils.copyArrayElements(\r\n      this.nes.rom.vrom[bank4k],\r\n      bankoffset,\r\n      this.nes.ppu.vramMem,\r\n      address,\r\n      2048\r\n    );\r\n\r\n    // Update tiles:\r\n    var vromTile = this.nes.rom.vromTile[bank4k];\r\n    var baseIndex = address >> 4;\r\n    for (var i = 0; i < 128; i++) {\r\n      this.nes.ppu.ptTile[baseIndex + i] = vromTile[(bank2k % 2 << 7) + i];\r\n    }\r\n  },\r\n\r\n  load8kRomBank: function (bank8k, address) {\r\n    var bank16k = Math.floor(bank8k / 2) % this.nes.rom.romCount;\r\n    var offset = (bank8k % 2) * 8192;\r\n\r\n    //this.nes.cpu.mem.write(address,this.nes.rom.rom[bank16k],offset,8192);\r\n    utils.copyArrayElements(\r\n      this.nes.rom.rom[bank16k],\r\n      offset,\r\n      this.nes.cpu.mem,\r\n      address,\r\n      8192\r\n    );\r\n  },\r\n\r\n  clockIrqCounter: function () {\r\n    // Does nothing. This is used by the MMC3 mapper.\r\n  },\r\n\r\n  // eslint-disable-next-line no-unused-vars\r\n  latchAccess: function (address) {\r\n    // Does nothing. This is used by MMC2.\r\n  },\r\n\r\n  toJSON: function () {\r\n    return {\r\n      joy1StrobeState: this.joy1StrobeState,\r\n      joy2StrobeState: this.joy2StrobeState,\r\n      joypadLastWrite: this.joypadLastWrite,\r\n    };\r\n  },\r\n\r\n  fromJSON: function (s) {\r\n    this.joy1StrobeState = s.joy1StrobeState;\r\n    this.joy2StrobeState = s.joy2StrobeState;\r\n    this.joypadLastWrite = s.joypadLastWrite;\r\n  },\r\n};\r\n\r\nMappers[1] = function (nes) {\r\n  this.nes = nes;\r\n};\r\n\r\nMappers[1].prototype = new Mappers[0]();\r\n\r\nMappers[1].prototype.reset = function () {\r\n  Mappers[0].prototype.reset.apply(this);\r\n\r\n  // 5-bit buffer:\r\n  this.regBuffer = 0;\r\n  this.regBufferCounter = 0;\r\n\r\n  // Register 0:\r\n  this.mirroring = 0;\r\n  this.oneScreenMirroring = 0;\r\n  this.prgSwitchingArea = 1;\r\n  this.prgSwitchingSize = 1;\r\n  this.vromSwitchingSize = 0;\r\n\r\n  // Register 1:\r\n  this.romSelectionReg0 = 0;\r\n\r\n  // Register 2:\r\n  this.romSelectionReg1 = 0;\r\n\r\n  // Register 3:\r\n  this.romBankSelect = 0;\r\n};\r\n\r\nMappers[1].prototype.write = function (address, value) {\r\n  // Writes to addresses other than MMC registers are handled by NoMapper.\r\n  if (address < 0x8000) {\r\n    Mappers[0].prototype.write.apply(this, arguments);\r\n    return;\r\n  }\r\n\r\n  // See what should be done with the written value:\r\n  if ((value & 128) !== 0) {\r\n    // Reset buffering:\r\n    this.regBufferCounter = 0;\r\n    this.regBuffer = 0;\r\n\r\n    // Reset register:\r\n    if (this.getRegNumber(address) === 0) {\r\n      this.prgSwitchingArea = 1;\r\n      this.prgSwitchingSize = 1;\r\n    }\r\n  } else {\r\n    // Continue buffering:\r\n    //regBuffer = (regBuffer & (0xFF-(1<<regBufferCounter))) | ((value & (1<<regBufferCounter))<<regBufferCounter);\r\n    this.regBuffer =\r\n      (this.regBuffer & (0xff - (1 << this.regBufferCounter))) |\r\n      ((value & 1) << this.regBufferCounter);\r\n    this.regBufferCounter++;\r\n\r\n    if (this.regBufferCounter === 5) {\r\n      // Use the buffered value:\r\n      this.setReg(this.getRegNumber(address), this.regBuffer);\r\n\r\n      // Reset buffer:\r\n      this.regBuffer = 0;\r\n      this.regBufferCounter = 0;\r\n    }\r\n  }\r\n};\r\n\r\nMappers[1].prototype.setReg = function (reg, value) {\r\n  var tmp;\r\n\r\n  switch (reg) {\r\n    case 0:\r\n      // Mirroring:\r\n      tmp = value & 3;\r\n      if (tmp !== this.mirroring) {\r\n        // Set mirroring:\r\n        this.mirroring = tmp;\r\n        if ((this.mirroring & 2) === 0) {\r\n          // SingleScreen mirroring overrides the other setting:\r\n          this.nes.ppu.setMirroring(this.nes.rom.SINGLESCREEN_MIRRORING);\r\n        } else if ((this.mirroring & 1) !== 0) {\r\n          // Not overridden by SingleScreen mirroring.\r\n          this.nes.ppu.setMirroring(this.nes.rom.HORIZONTAL_MIRRORING);\r\n        } else {\r\n          this.nes.ppu.setMirroring(this.nes.rom.VERTICAL_MIRRORING);\r\n        }\r\n      }\r\n\r\n      // PRG Switching Area;\r\n      this.prgSwitchingArea = (value >> 2) & 1;\r\n\r\n      // PRG Switching Size:\r\n      this.prgSwitchingSize = (value >> 3) & 1;\r\n\r\n      // VROM Switching Size:\r\n      this.vromSwitchingSize = (value >> 4) & 1;\r\n\r\n      break;\r\n\r\n    case 1:\r\n      // ROM selection:\r\n      this.romSelectionReg0 = (value >> 4) & 1;\r\n\r\n      // Check whether the cart has VROM:\r\n      if (this.nes.rom.vromCount > 0) {\r\n        // Select VROM bank at 0x0000:\r\n        if (this.vromSwitchingSize === 0) {\r\n          // Swap 8kB VROM:\r\n          if (this.romSelectionReg0 === 0) {\r\n            this.load8kVromBank(value & 0xf, 0x0000);\r\n          } else {\r\n            this.load8kVromBank(\r\n              Math.floor(this.nes.rom.vromCount / 2) + (value & 0xf),\r\n              0x0000\r\n            );\r\n          }\r\n        } else {\r\n          // Swap 4kB VROM:\r\n          if (this.romSelectionReg0 === 0) {\r\n            this.loadVromBank(value & 0xf, 0x0000);\r\n          } else {\r\n            this.loadVromBank(\r\n              Math.floor(this.nes.rom.vromCount / 2) + (value & 0xf),\r\n              0x0000\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      break;\r\n\r\n    case 2:\r\n      // ROM selection:\r\n      this.romSelectionReg1 = (value >> 4) & 1;\r\n\r\n      // Check whether the cart has VROM:\r\n      if (this.nes.rom.vromCount > 0) {\r\n        // Select VROM bank at 0x1000:\r\n        if (this.vromSwitchingSize === 1) {\r\n          // Swap 4kB of VROM:\r\n          if (this.romSelectionReg1 === 0) {\r\n            this.loadVromBank(value & 0xf, 0x1000);\r\n          } else {\r\n            this.loadVromBank(\r\n              Math.floor(this.nes.rom.vromCount / 2) + (value & 0xf),\r\n              0x1000\r\n            );\r\n          }\r\n        }\r\n      }\r\n      break;\r\n\r\n    default:\r\n      // Select ROM bank:\r\n      // -------------------------\r\n      tmp = value & 0xf;\r\n      var bank;\r\n      var baseBank = 0;\r\n\r\n      if (this.nes.rom.romCount >= 32) {\r\n        // 1024 kB cart\r\n        if (this.vromSwitchingSize === 0) {\r\n          if (this.romSelectionReg0 === 1) {\r\n            baseBank = 16;\r\n          }\r\n        } else {\r\n          baseBank =\r\n            (this.romSelectionReg0 | (this.romSelectionReg1 << 1)) << 3;\r\n        }\r\n      } else if (this.nes.rom.romCount >= 16) {\r\n        // 512 kB cart\r\n        if (this.romSelectionReg0 === 1) {\r\n          baseBank = 8;\r\n        }\r\n      }\r\n\r\n      if (this.prgSwitchingSize === 0) {\r\n        // 32kB\r\n        bank = baseBank + (value & 0xf);\r\n        this.load32kRomBank(bank, 0x8000);\r\n      } else {\r\n        // 16kB\r\n        bank = baseBank * 2 + (value & 0xf);\r\n        if (this.prgSwitchingArea === 0) {\r\n          this.loadRomBank(bank, 0xc000);\r\n        } else {\r\n          this.loadRomBank(bank, 0x8000);\r\n        }\r\n      }\r\n  }\r\n};\r\n\r\n// Returns the register number from the address written to:\r\nMappers[1].prototype.getRegNumber = function (address) {\r\n  if (address >= 0x8000 && address <= 0x9fff) {\r\n    return 0;\r\n  } else if (address >= 0xa000 && address <= 0xbfff) {\r\n    return 1;\r\n  } else if (address >= 0xc000 && address <= 0xdfff) {\r\n    return 2;\r\n  } else {\r\n    return 3;\r\n  }\r\n};\r\n\r\nMappers[1].prototype.loadROM = function () {\r\n  if (!this.nes.rom.valid) {\r\n    throw new Error(\"MMC1: Invalid ROM! Unable to load.\");\r\n  }\r\n\r\n  // Load PRG-ROM:\r\n  this.loadRomBank(0, 0x8000); //   First ROM bank..\r\n  this.loadRomBank(this.nes.rom.romCount - 1, 0xc000); // ..and last ROM bank.\r\n\r\n  // Load CHR-ROM:\r\n  this.loadCHRROM();\r\n\r\n  // Load Battery RAM (if present):\r\n  this.loadBatteryRam();\r\n\r\n  // Do Reset-Interrupt:\r\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\r\n};\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nMappers[1].prototype.switchLowHighPrgRom = function (oldSetting) {\r\n  // not yet.\r\n};\r\n\r\nMappers[1].prototype.switch16to32 = function () {\r\n  // not yet.\r\n};\r\n\r\nMappers[1].prototype.switch32to16 = function () {\r\n  // not yet.\r\n};\r\n\r\nMappers[1].prototype.toJSON = function () {\r\n  var s = Mappers[0].prototype.toJSON.apply(this);\r\n  s.mirroring = this.mirroring;\r\n  s.oneScreenMirroring = this.oneScreenMirroring;\r\n  s.prgSwitchingArea = this.prgSwitchingArea;\r\n  s.prgSwitchingSize = this.prgSwitchingSize;\r\n  s.vromSwitchingSize = this.vromSwitchingSize;\r\n  s.romSelectionReg0 = this.romSelectionReg0;\r\n  s.romSelectionReg1 = this.romSelectionReg1;\r\n  s.romBankSelect = this.romBankSelect;\r\n  s.regBuffer = this.regBuffer;\r\n  s.regBufferCounter = this.regBufferCounter;\r\n  return s;\r\n};\r\n\r\nMappers[1].prototype.fromJSON = function (s) {\r\n  Mappers[0].prototype.fromJSON.apply(this, arguments);\r\n  this.mirroring = s.mirroring;\r\n  this.oneScreenMirroring = s.oneScreenMirroring;\r\n  this.prgSwitchingArea = s.prgSwitchingArea;\r\n  this.prgSwitchingSize = s.prgSwitchingSize;\r\n  this.vromSwitchingSize = s.vromSwitchingSize;\r\n  this.romSelectionReg0 = s.romSelectionReg0;\r\n  this.romSelectionReg1 = s.romSelectionReg1;\r\n  this.romBankSelect = s.romBankSelect;\r\n  this.regBuffer = s.regBuffer;\r\n  this.regBufferCounter = s.regBufferCounter;\r\n};\r\n\r\nMappers[2] = function (nes) {\r\n  this.nes = nes;\r\n};\r\n\r\nMappers[2].prototype = new Mappers[0]();\r\n\r\nMappers[2].prototype.write = function (address, value) {\r\n  // Writes to addresses other than MMC registers are handled by NoMapper.\r\n  if (address < 0x8000) {\r\n    Mappers[0].prototype.write.apply(this, arguments);\r\n    return;\r\n  } else {\r\n    // This is a ROM bank select command.\r\n    // Swap in the given ROM bank at 0x8000:\r\n    this.loadRomBank(value, 0x8000);\r\n  }\r\n};\r\n\r\nMappers[2].prototype.loadROM = function () {\r\n  if (!this.nes.rom.valid) {\r\n    throw new Error(\"UNROM: Invalid ROM! Unable to load.\");\r\n  }\r\n\r\n  // Load PRG-ROM:\r\n  this.loadRomBank(0, 0x8000);\r\n  this.loadRomBank(this.nes.rom.romCount - 1, 0xc000);\r\n\r\n  // Load CHR-ROM:\r\n  this.loadCHRROM();\r\n\r\n  // Do Reset-Interrupt:\r\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\r\n};\r\n\r\n/**\r\n * Mapper 003 (CNROM)\r\n *\r\n * @constructor\r\n * @example Solomon's Key, Arkanoid, Arkista's Ring, Bump 'n' Jump, Cybernoid\r\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_003\r\n */\r\nMappers[3] = function (nes) {\r\n  this.nes = nes;\r\n};\r\n\r\nMappers[3].prototype = new Mappers[0]();\r\n\r\nMappers[3].prototype.write = function (address, value) {\r\n  // Writes to addresses other than MMC registers are handled by NoMapper.\r\n  if (address < 0x8000) {\r\n    Mappers[0].prototype.write.apply(this, arguments);\r\n    return;\r\n  } else {\r\n    // This is a ROM bank select command.\r\n    // Swap in the given ROM bank at 0x8000:\r\n    // This is a VROM bank select command.\r\n    // Swap in the given VROM bank at 0x0000:\r\n    var bank = (value % (this.nes.rom.vromCount / 2)) * 2;\r\n    this.loadVromBank(bank, 0x0000);\r\n    this.loadVromBank(bank + 1, 0x1000);\r\n    this.load8kVromBank(value * 2, 0x0000);\r\n  }\r\n};\r\n\r\nMappers[4] = function (nes) {\r\n  this.nes = nes;\r\n\r\n  this.CMD_SEL_2_1K_VROM_0000 = 0;\r\n  this.CMD_SEL_2_1K_VROM_0800 = 1;\r\n  this.CMD_SEL_1K_VROM_1000 = 2;\r\n  this.CMD_SEL_1K_VROM_1400 = 3;\r\n  this.CMD_SEL_1K_VROM_1800 = 4;\r\n  this.CMD_SEL_1K_VROM_1C00 = 5;\r\n  this.CMD_SEL_ROM_PAGE1 = 6;\r\n  this.CMD_SEL_ROM_PAGE2 = 7;\r\n\r\n  this.command = null;\r\n  this.prgAddressSelect = null;\r\n  this.chrAddressSelect = null;\r\n  this.pageNumber = null;\r\n  this.irqCounter = null;\r\n  this.irqLatchValue = null;\r\n  this.irqEnable = null;\r\n  this.prgAddressChanged = false;\r\n};\r\n\r\nMappers[4].prototype = new Mappers[0]();\r\n\r\nMappers[4].prototype.write = function (address, value) {\r\n  // Writes to addresses other than MMC registers are handled by NoMapper.\r\n  if (address < 0x8000) {\r\n    Mappers[0].prototype.write.apply(this, arguments);\r\n    return;\r\n  }\r\n\r\n  switch (address) {\r\n    case 0x8000:\r\n      // Command/Address Select register\r\n      this.command = value & 7;\r\n      var tmp = (value >> 6) & 1;\r\n      if (tmp !== this.prgAddressSelect) {\r\n        this.prgAddressChanged = true;\r\n      }\r\n      this.prgAddressSelect = tmp;\r\n      this.chrAddressSelect = (value >> 7) & 1;\r\n      break;\r\n\r\n    case 0x8001:\r\n      // Page number for command\r\n      this.executeCommand(this.command, value);\r\n      break;\r\n\r\n    case 0xa000:\r\n      // Mirroring select\r\n      if ((value & 1) !== 0) {\r\n        this.nes.ppu.setMirroring(this.nes.rom.HORIZONTAL_MIRRORING);\r\n      } else {\r\n        this.nes.ppu.setMirroring(this.nes.rom.VERTICAL_MIRRORING);\r\n      }\r\n      break;\r\n\r\n    case 0xa001:\r\n      // SaveRAM Toggle\r\n      // TODO\r\n      //nes.getRom().setSaveState((value&1)!=0);\r\n      break;\r\n\r\n    case 0xc000:\r\n      // IRQ Counter register\r\n      this.irqCounter = value;\r\n      //nes.ppu.mapperIrqCounter = 0;\r\n      break;\r\n\r\n    case 0xc001:\r\n      // IRQ Latch register\r\n      this.irqLatchValue = value;\r\n      break;\r\n\r\n    case 0xe000:\r\n      // IRQ Control Reg 0 (disable)\r\n      //irqCounter = irqLatchValue;\r\n      this.irqEnable = 0;\r\n      break;\r\n\r\n    case 0xe001:\r\n      // IRQ Control Reg 1 (enable)\r\n      this.irqEnable = 1;\r\n      break;\r\n\r\n    default:\r\n    // Not a MMC3 register.\r\n    // The game has probably crashed,\r\n    // since it tries to write to ROM..\r\n    // IGNORE.\r\n  }\r\n};\r\n\r\nMappers[4].prototype.executeCommand = function (cmd, arg) {\r\n  switch (cmd) {\r\n    case this.CMD_SEL_2_1K_VROM_0000:\r\n      // Select 2 1KB VROM pages at 0x0000:\r\n      if (this.chrAddressSelect === 0) {\r\n        this.load1kVromBank(arg, 0x0000);\r\n        this.load1kVromBank(arg + 1, 0x0400);\r\n      } else {\r\n        this.load1kVromBank(arg, 0x1000);\r\n        this.load1kVromBank(arg + 1, 0x1400);\r\n      }\r\n      break;\r\n\r\n    case this.CMD_SEL_2_1K_VROM_0800:\r\n      // Select 2 1KB VROM pages at 0x0800:\r\n      if (this.chrAddressSelect === 0) {\r\n        this.load1kVromBank(arg, 0x0800);\r\n        this.load1kVromBank(arg + 1, 0x0c00);\r\n      } else {\r\n        this.load1kVromBank(arg, 0x1800);\r\n        this.load1kVromBank(arg + 1, 0x1c00);\r\n      }\r\n      break;\r\n\r\n    case this.CMD_SEL_1K_VROM_1000:\r\n      // Select 1K VROM Page at 0x1000:\r\n      if (this.chrAddressSelect === 0) {\r\n        this.load1kVromBank(arg, 0x1000);\r\n      } else {\r\n        this.load1kVromBank(arg, 0x0000);\r\n      }\r\n      break;\r\n\r\n    case this.CMD_SEL_1K_VROM_1400:\r\n      // Select 1K VROM Page at 0x1400:\r\n      if (this.chrAddressSelect === 0) {\r\n        this.load1kVromBank(arg, 0x1400);\r\n      } else {\r\n        this.load1kVromBank(arg, 0x0400);\r\n      }\r\n      break;\r\n\r\n    case this.CMD_SEL_1K_VROM_1800:\r\n      // Select 1K VROM Page at 0x1800:\r\n      if (this.chrAddressSelect === 0) {\r\n        this.load1kVromBank(arg, 0x1800);\r\n      } else {\r\n        this.load1kVromBank(arg, 0x0800);\r\n      }\r\n      break;\r\n\r\n    case this.CMD_SEL_1K_VROM_1C00:\r\n      // Select 1K VROM Page at 0x1C00:\r\n      if (this.chrAddressSelect === 0) {\r\n        this.load1kVromBank(arg, 0x1c00);\r\n      } else {\r\n        this.load1kVromBank(arg, 0x0c00);\r\n      }\r\n      break;\r\n\r\n    case this.CMD_SEL_ROM_PAGE1:\r\n      if (this.prgAddressChanged) {\r\n        // Load the two hardwired banks:\r\n        if (this.prgAddressSelect === 0) {\r\n          this.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0xc000);\r\n        } else {\r\n          this.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0x8000);\r\n        }\r\n        this.prgAddressChanged = false;\r\n      }\r\n\r\n      // Select first switchable ROM page:\r\n      if (this.prgAddressSelect === 0) {\r\n        this.load8kRomBank(arg, 0x8000);\r\n      } else {\r\n        this.load8kRomBank(arg, 0xc000);\r\n      }\r\n      break;\r\n\r\n    case this.CMD_SEL_ROM_PAGE2:\r\n      // Select second switchable ROM page:\r\n      this.load8kRomBank(arg, 0xa000);\r\n\r\n      // hardwire appropriate bank:\r\n      if (this.prgAddressChanged) {\r\n        // Load the two hardwired banks:\r\n        if (this.prgAddressSelect === 0) {\r\n          this.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0xc000);\r\n        } else {\r\n          this.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0x8000);\r\n        }\r\n        this.prgAddressChanged = false;\r\n      }\r\n  }\r\n};\r\n\r\nMappers[4].prototype.loadROM = function () {\r\n  if (!this.nes.rom.valid) {\r\n    throw new Error(\"MMC3: Invalid ROM! Unable to load.\");\r\n  }\r\n\r\n  // Load hardwired PRG banks (0xC000 and 0xE000):\r\n  this.load8kRomBank((this.nes.rom.romCount - 1) * 2, 0xc000);\r\n  this.load8kRomBank((this.nes.rom.romCount - 1) * 2 + 1, 0xe000);\r\n\r\n  // Load swappable PRG banks (0x8000 and 0xA000):\r\n  this.load8kRomBank(0, 0x8000);\r\n  this.load8kRomBank(1, 0xa000);\r\n\r\n  // Load CHR-ROM:\r\n  this.loadCHRROM();\r\n\r\n  // Load Battery RAM (if present):\r\n  this.loadBatteryRam();\r\n\r\n  // Do Reset-Interrupt:\r\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\r\n};\r\n\r\nMappers[4].prototype.clockIrqCounter = function () {\r\n  if (this.irqEnable === 1) {\r\n    this.irqCounter--;\r\n    if (this.irqCounter < 0) {\r\n      // Trigger IRQ:\r\n      //nes.getCpu().doIrq();\r\n      this.nes.cpu.requestIrq(this.nes.cpu.IRQ_NORMAL);\r\n      this.irqCounter = this.irqLatchValue;\r\n    }\r\n  }\r\n};\r\n\r\nMappers[4].prototype.toJSON = function () {\r\n  var s = Mappers[0].prototype.toJSON.apply(this);\r\n  s.command = this.command;\r\n  s.prgAddressSelect = this.prgAddressSelect;\r\n  s.chrAddressSelect = this.chrAddressSelect;\r\n  s.pageNumber = this.pageNumber;\r\n  s.irqCounter = this.irqCounter;\r\n  s.irqLatchValue = this.irqLatchValue;\r\n  s.irqEnable = this.irqEnable;\r\n  s.prgAddressChanged = this.prgAddressChanged;\r\n  return s;\r\n};\r\n\r\nMappers[4].prototype.fromJSON = function (s) {\r\n  Mappers[0].prototype.fromJSON.apply(this, arguments);\r\n  this.command = s.command;\r\n  this.prgAddressSelect = s.prgAddressSelect;\r\n  this.chrAddressSelect = s.chrAddressSelect;\r\n  this.pageNumber = s.pageNumber;\r\n  this.irqCounter = s.irqCounter;\r\n  this.irqLatchValue = s.irqLatchValue;\r\n  this.irqEnable = s.irqEnable;\r\n  this.prgAddressChanged = s.prgAddressChanged;\r\n};\r\n\r\n/**\r\n * Mapper005 (MMC5,ExROM)\r\n *\r\n * @example Castlevania 3, Just Breed, Uncharted Waters, Romance of the 3 Kingdoms 2, Laser Invasion, Metal Slader Glory, Uchuu Keibitai SDF, Shin 4 Nin Uchi Mahjong - Yakuman Tengoku\r\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_005\r\n * @constructor\r\n */\r\nMappers[5] = function (nes) {\r\n  this.nes = nes;\r\n};\r\n\r\nMappers[5].prototype = new Mappers[0]();\r\n\r\nMappers[5].prototype.write = function (address, value) {\r\n  // Writes to addresses other than MMC registers are handled by NoMapper.\r\n  if (address < 0x8000) {\r\n    Mappers[0].prototype.write.apply(this, arguments);\r\n  } else {\r\n    this.load8kVromBank(value, 0x0000);\r\n  }\r\n};\r\n\r\nMappers[5].prototype.write = function (address, value) {\r\n  // Writes to addresses other than MMC registers are handled by NoMapper.\r\n  if (address < 0x5000) {\r\n    Mappers[0].prototype.write.apply(this, arguments);\r\n    return;\r\n  }\r\n\r\n  switch (address) {\r\n    case 0x5100:\r\n      this.prg_size = value & 3;\r\n      break;\r\n    case 0x5101:\r\n      this.chr_size = value & 3;\r\n      break;\r\n    case 0x5102:\r\n      this.sram_we_a = value & 3;\r\n      break;\r\n    case 0x5103:\r\n      this.sram_we_b = value & 3;\r\n      break;\r\n    case 0x5104:\r\n      this.graphic_mode = value & 3;\r\n      break;\r\n    case 0x5105:\r\n      this.nametable_mode = value;\r\n      this.nametable_type[0] = value & 3;\r\n      this.load1kVromBank(value & 3, 0x2000);\r\n      value >>= 2;\r\n      this.nametable_type[1] = value & 3;\r\n      this.load1kVromBank(value & 3, 0x2400);\r\n      value >>= 2;\r\n      this.nametable_type[2] = value & 3;\r\n      this.load1kVromBank(value & 3, 0x2800);\r\n      value >>= 2;\r\n      this.nametable_type[3] = value & 3;\r\n      this.load1kVromBank(value & 3, 0x2c00);\r\n      break;\r\n    case 0x5106:\r\n      this.fill_chr = value;\r\n      break;\r\n    case 0x5107:\r\n      this.fill_pal = value & 3;\r\n      break;\r\n    case 0x5113:\r\n      this.SetBank_SRAM(3, value & 3);\r\n      break;\r\n    case 0x5114:\r\n    case 0x5115:\r\n    case 0x5116:\r\n    case 0x5117:\r\n      this.SetBank_CPU(address, value);\r\n      break;\r\n    case 0x5120:\r\n    case 0x5121:\r\n    case 0x5122:\r\n    case 0x5123:\r\n    case 0x5124:\r\n    case 0x5125:\r\n    case 0x5126:\r\n    case 0x5127:\r\n      this.chr_mode = 0;\r\n      this.chr_page[0][address & 7] = value;\r\n      this.SetBank_PPU();\r\n      break;\r\n    case 0x5128:\r\n    case 0x5129:\r\n    case 0x512a:\r\n    case 0x512b:\r\n      this.chr_mode = 1;\r\n      this.chr_page[1][(address & 3) + 0] = value;\r\n      this.chr_page[1][(address & 3) + 4] = value;\r\n      this.SetBank_PPU();\r\n      break;\r\n    case 0x5200:\r\n      this.split_control = value;\r\n      break;\r\n    case 0x5201:\r\n      this.split_scroll = value;\r\n      break;\r\n    case 0x5202:\r\n      this.split_page = value & 0x3f;\r\n      break;\r\n    case 0x5203:\r\n      this.irq_line = value;\r\n      this.nes.cpu.ClearIRQ();\r\n      break;\r\n    case 0x5204:\r\n      this.irq_enable = value;\r\n      this.nes.cpu.ClearIRQ();\r\n      break;\r\n    case 0x5205:\r\n      this.mult_a = value;\r\n      break;\r\n    case 0x5206:\r\n      this.mult_b = value;\r\n      break;\r\n    default:\r\n      if (address >= 0x5000 && address <= 0x5015) {\r\n        this.nes.papu.exWrite(address, value);\r\n      } else if (address >= 0x5c00 && address <= 0x5fff) {\r\n        if (this.graphic_mode === 2) {\r\n          // ExRAM\r\n          // vram write\r\n        } else if (this.graphic_mode !== 3) {\r\n          // Split,ExGraphic\r\n          if (this.irq_status & 0x40) {\r\n            // vram write\r\n          } else {\r\n            // vram write\r\n          }\r\n        }\r\n      } else if (address >= 0x6000 && address <= 0x7fff) {\r\n        if (this.sram_we_a === 2 && this.sram_we_b === 1) {\r\n          // additional ram write\r\n        }\r\n      }\r\n      break;\r\n  }\r\n};\r\n\r\nMappers[5].prototype.loadROM = function () {\r\n  if (!this.nes.rom.valid) {\r\n    throw new Error(\"UNROM: Invalid ROM! Unable to load.\");\r\n  }\r\n\r\n  // Load PRG-ROM:\r\n  this.load8kRomBank(this.nes.rom.romCount * 2 - 1, 0x8000);\r\n  this.load8kRomBank(this.nes.rom.romCount * 2 - 1, 0xa000);\r\n  this.load8kRomBank(this.nes.rom.romCount * 2 - 1, 0xc000);\r\n  this.load8kRomBank(this.nes.rom.romCount * 2 - 1, 0xe000);\r\n\r\n  // Load CHR-ROM:\r\n  this.loadCHRROM();\r\n\r\n  // Do Reset-Interrupt:\r\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\r\n};\r\n\r\n/**\r\n * Mapper007 (AxROM)\r\n * @example Battletoads, Time Lord, Marble Madness\r\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_007\r\n * @constructor\r\n */\r\nMappers[7] = function (nes) {\r\n  this.nes = nes;\r\n};\r\n\r\nMappers[7].prototype = new Mappers[0]();\r\n\r\nMappers[7].prototype.write = function (address, value) {\r\n  // Writes to addresses other than MMC registers are handled by NoMapper.\r\n  if (address < 0x8000) {\r\n    Mappers[0].prototype.write.apply(this, arguments);\r\n  } else {\r\n    this.load32kRomBank(value & 0x7, 0x8000);\r\n    if (value & 0x10) {\r\n      this.nes.ppu.setMirroring(this.nes.rom.SINGLESCREEN_MIRRORING2);\r\n    } else {\r\n      this.nes.ppu.setMirroring(this.nes.rom.SINGLESCREEN_MIRRORING);\r\n    }\r\n  }\r\n};\r\n\r\nMappers[7].prototype.loadROM = function () {\r\n  if (!this.nes.rom.valid) {\r\n    throw new Error(\"AOROM: Invalid ROM! Unable to load.\");\r\n  }\r\n\r\n  // Load PRG-ROM:\r\n  this.loadPRGROM();\r\n\r\n  // Load CHR-ROM:\r\n  this.loadCHRROM();\r\n\r\n  // Do Reset-Interrupt:\r\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\r\n};\r\n\r\n/**\r\n * Mapper 011 (Color Dreams)\r\n *\r\n * @description http://wiki.nesdev.com/w/index.php/Color_Dreams\r\n * @example Crystal Mines, Metal Fighter\r\n * @constructor\r\n */\r\nMappers[11] = function (nes) {\r\n  this.nes = nes;\r\n};\r\n\r\nMappers[11].prototype = new Mappers[0]();\r\n\r\nMappers[11].prototype.write = function (address, value) {\r\n  if (address < 0x8000) {\r\n    Mappers[0].prototype.write.apply(this, arguments);\r\n    return;\r\n  } else {\r\n    // Swap in the given PRG-ROM bank:\r\n    var prgbank1 = ((value & 0xf) * 2) % this.nes.rom.romCount;\r\n    var prgbank2 = ((value & 0xf) * 2 + 1) % this.nes.rom.romCount;\r\n\r\n    this.loadRomBank(prgbank1, 0x8000);\r\n    this.loadRomBank(prgbank2, 0xc000);\r\n\r\n    if (this.nes.rom.vromCount > 0) {\r\n      // Swap in the given VROM bank at 0x0000:\r\n      var bank = ((value >> 4) * 2) % this.nes.rom.vromCount;\r\n      this.loadVromBank(bank, 0x0000);\r\n      this.loadVromBank(bank + 1, 0x1000);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Mapper 034 (BNROM, NINA-01)\r\n *\r\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_034\r\n * @example Darkseed, Mashou, Mission Impossible 2\r\n * @constructor\r\n */\r\nMappers[34] = function (nes) {\r\n  this.nes = nes;\r\n};\r\n\r\nMappers[34].prototype = new Mappers[0]();\r\n\r\nMappers[34].prototype.write = function (address, value) {\r\n  if (address < 0x8000) {\r\n    Mappers[0].prototype.write.apply(this, arguments);\r\n    return;\r\n  } else {\r\n    this.load32kRomBank(value, 0x8000);\r\n  }\r\n};\r\n\r\n/**\r\n * Mapper 038\r\n *\r\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_038\r\n * @example Crime Busters\r\n * @constructor\r\n */\r\nMappers[38] = function (nes) {\r\n  this.nes = nes;\r\n};\r\n\r\nMappers[38].prototype = new Mappers[0]();\r\n\r\nMappers[38].prototype.write = function (address, value) {\r\n  if (address < 0x7000 || address > 0x7fff) {\r\n    Mappers[0].prototype.write.apply(this, arguments);\r\n    return;\r\n  } else {\r\n    // Swap in the given PRG-ROM bank at 0x8000:\r\n    this.load32kRomBank(value & 3, 0x8000);\r\n\r\n    // Swap in the given VROM bank at 0x0000:\r\n    this.load8kVromBank(((value >> 2) & 3) * 2, 0x0000);\r\n  }\r\n};\r\n\r\n/**\r\n * Mapper 066 (GxROM)\r\n *\r\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_066\r\n * @example Doraemon, Dragon Power, Gumshoe, Thunder & Lightning,\r\n * Super Mario Bros. + Duck Hunt\r\n * @constructor\r\n */\r\nMappers[66] = function (nes) {\r\n  this.nes = nes;\r\n};\r\n\r\nMappers[66].prototype = new Mappers[0]();\r\n\r\nMappers[66].prototype.write = function (address, value) {\r\n  if (address < 0x8000) {\r\n    Mappers[0].prototype.write.apply(this, arguments);\r\n    return;\r\n  } else {\r\n    // Swap in the given PRG-ROM bank at 0x8000:\r\n    this.load32kRomBank((value >> 4) & 3, 0x8000);\r\n\r\n    // Swap in the given VROM bank at 0x0000:\r\n    this.load8kVromBank((value & 3) * 2, 0x0000);\r\n  }\r\n};\r\n\r\n/**\r\n * Mapper 094 (UN1ROM)\r\n *\r\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_094\r\n * @example Senjou no Ookami\r\n * @constructor\r\n */\r\nMappers[94] = function (nes) {\r\n  this.nes = nes;\r\n};\r\n\r\nMappers[94].prototype = new Mappers[0]();\r\n\r\nMappers[94].prototype.write = function (address, value) {\r\n  // Writes to addresses other than MMC registers are handled by NoMapper.\r\n  if (address < 0x8000) {\r\n    Mappers[0].prototype.write.apply(this, arguments);\r\n    return;\r\n  } else {\r\n    // This is a ROM bank select command.\r\n    // Swap in the given ROM bank at 0x8000:\r\n    this.loadRomBank(value >> 2, 0x8000);\r\n  }\r\n};\r\n\r\nMappers[94].prototype.loadROM = function () {\r\n  if (!this.nes.rom.valid) {\r\n    throw new Error(\"UN1ROM: Invalid ROM! Unable to load.\");\r\n  }\r\n\r\n  // Load PRG-ROM:\r\n  this.loadRomBank(0, 0x8000);\r\n  this.loadRomBank(this.nes.rom.romCount - 1, 0xc000);\r\n\r\n  // Load CHR-ROM:\r\n  this.loadCHRROM();\r\n\r\n  // Do Reset-Interrupt:\r\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\r\n};\r\n\r\n/**\r\n * Mapper 140\r\n *\r\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_140\r\n * @example Bio Senshi Dan - Increaser Tono Tatakai\r\n * @constructor\r\n */\r\nMappers[140] = function (nes) {\r\n  this.nes = nes;\r\n};\r\n\r\nMappers[140].prototype = new Mappers[0]();\r\n\r\nMappers[140].prototype.write = function (address, value) {\r\n  if (address < 0x6000 || address > 0x7fff) {\r\n    Mappers[0].prototype.write.apply(this, arguments);\r\n    return;\r\n  } else {\r\n    // Swap in the given PRG-ROM bank at 0x8000:\r\n    this.load32kRomBank((value >> 4) & 3, 0x8000);\r\n\r\n    // Swap in the given VROM bank at 0x0000:\r\n    this.load8kVromBank((value & 0xf) * 2, 0x0000);\r\n  }\r\n};\r\n\r\n/**\r\n * Mapper 180\r\n *\r\n * @description http://wiki.nesdev.com/w/index.php/INES_Mapper_180\r\n * @example Crazy Climber\r\n * @constructor\r\n */\r\nMappers[180] = function (nes) {\r\n  this.nes = nes;\r\n};\r\n\r\nMappers[180].prototype = new Mappers[0]();\r\n\r\nMappers[180].prototype.write = function (address, value) {\r\n  // Writes to addresses other than MMC registers are handled by NoMapper.\r\n  if (address < 0x8000) {\r\n    Mappers[0].prototype.write.apply(this, arguments);\r\n    return;\r\n  } else {\r\n    // This is a ROM bank select command.\r\n    // Swap in the given ROM bank at 0xc000:\r\n    this.loadRomBank(value, 0xc000);\r\n  }\r\n};\r\n\r\nMappers[180].prototype.loadROM = function () {\r\n  if (!this.nes.rom.valid) {\r\n    throw new Error(\"Mapper 180: Invalid ROM! Unable to load.\");\r\n  }\r\n\r\n  // Load PRG-ROM:\r\n  this.loadRomBank(0, 0x8000);\r\n  this.loadRomBank(this.nes.rom.romCount - 1, 0xc000);\r\n\r\n  // Load CHR-ROM:\r\n  this.loadCHRROM();\r\n\r\n  // Do Reset-Interrupt:\r\n  this.nes.cpu.requestIrq(this.nes.cpu.IRQ_RESET);\r\n};\r\n\r\nmodule.exports = Mappers;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/mappers.js\n// module id = 9\n// module chunks = 0 1"],"sourceRoot":""}